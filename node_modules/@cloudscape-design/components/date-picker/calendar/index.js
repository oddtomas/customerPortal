import { __assign } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useEffect, useRef, useState } from 'react';
import { addDays, addMonths, isSameMonth, startOfMonth } from 'date-fns';
import styles from '../styles.css.js';
import useFocusVisible from '../../internal/hooks/focus-visible/index.js';
import CalendarHeader from './header';
import Grid from './grid';
import moveFocusHandler from './utils/move-focus-handler';
import { useUniqueId } from '../../internal/hooks/use-unique-id/index.js';
import { useMergeRefs } from '../../internal/hooks/use-merge-refs/index.js';
var Calendar = React.forwardRef(function (_a, ref) {
    var locale = _a.locale, startOfWeek = _a.startOfWeek, displayedDate = _a.displayedDate, _b = _a.focusedDate, focusedDate = _b === void 0 ? null : _b, todayAriaLabel = _a.todayAriaLabel, calendarHasFocus = _a.calendarHasFocus, selectedDate = _a.selectedDate, isDateEnabled = _a.isDateEnabled, onChangeMonth = _a.onChangeMonth, onSelectDate = _a.onSelectDate, onFocusDate = _a.onFocusDate, previousMonthLabel = _a.previousMonthLabel, nextMonthLabel = _a.nextMonthLabel;
    var focusVisible = useFocusVisible();
    var headerId = useUniqueId('calendar-dialog-title-');
    var elementRef = useRef(null);
    var calendarRef = useMergeRefs(elementRef, ref);
    var gridWrapperRef = useRef(null);
    var _c = useState(false), gridHasFocus = _c[0], setGridHasFocus = _c[1];
    var selectFocusedDate = function (selected, baseDate) {
        if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {
            return selected;
        }
        var today = new Date();
        if (isDateEnabled(today) && isSameMonth(today, baseDate)) {
            return today;
        }
        if (isDateEnabled(baseDate)) {
            return baseDate;
        }
        return null;
    };
    var getBaseDate = function (date) {
        var startDate = startOfMonth(date);
        if (isDateEnabled(startDate)) {
            return startDate;
        }
        return moveFocusHandler(startDate, isDateEnabled, function (date) { return addDays(date, 1); });
    };
    var baseDate = getBaseDate(displayedDate);
    var focusCurrentDate = function () { var _a, _b; return (_b = (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(".".concat(styles['calendar-day-focusable']))) === null || _b === void 0 ? void 0 : _b.focus(); };
    var onHeaderChangeMonthHandler = function (isPrevious) {
        return onChangeMonth(addMonths(baseDate, isPrevious ? -1 : 1));
    };
    useEffect(function () {
        // focus current date if the focus is already inside the calendar grid
        if (focusedDate instanceof Date && isSameMonth(focusedDate, baseDate) && gridHasFocus) {
            focusCurrentDate();
        }
    }, [baseDate, focusedDate, gridHasFocus]);
    useEffect(function () {
        var _a, _b;
        var calendarShouldHaveFocus = calendarHasFocus;
        var calendarActuallyHasFocus = (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.contains(document.activeElement);
        if (calendarShouldHaveFocus && !calendarActuallyHasFocus) {
            (_b = elementRef.current) === null || _b === void 0 ? void 0 : _b.focus();
        }
        // When the baseDate or isDateEnabled changes, there might not be a focusable date in the grid anymore
    }, [calendarHasFocus, baseDate, isDateEnabled]);
    if (calendarHasFocus && !focusedDate) {
        focusedDate = selectFocusedDate(selectedDate, baseDate);
    }
    var onGridBlur = function (event) {
        var _a;
        var newFocusTargetIsInGrid = event.relatedTarget && ((_a = gridWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget));
        if (!newFocusTargetIsInGrid) {
            setGridHasFocus(false);
        }
    };
    var onGridFocus = function () {
        if (!gridHasFocus) {
            setGridHasFocus(true);
        }
    };
    return (React.createElement("div", __assign({}, focusVisible, { className: styles.calendar, tabIndex: 0, role: "application", "aria-describedby": headerId, ref: calendarRef }),
        React.createElement("div", { className: styles['calendar-inner'] },
            React.createElement(CalendarHeader, { headerId: headerId, baseDate: baseDate, locale: locale, onChangeMonth: onHeaderChangeMonthHandler, previousMonthLabel: previousMonthLabel, nextMonthLabel: nextMonthLabel, calendarHasFocus: calendarHasFocus }),
            React.createElement("div", { onBlur: onGridBlur, onFocus: onGridFocus, ref: gridWrapperRef },
                React.createElement(Grid, { locale: locale, baseDate: baseDate, isDateEnabled: isDateEnabled, focusedDate: focusedDate, onSelectDate: onSelectDate, onFocusDate: onFocusDate, onChangeMonth: onChangeMonth, startOfWeek: startOfWeek, todayAriaLabel: todayAriaLabel, selectedDate: selectedDate, handleFocusMove: moveFocusHandler })))));
});
export default Calendar;
//# sourceMappingURL=index.js.map