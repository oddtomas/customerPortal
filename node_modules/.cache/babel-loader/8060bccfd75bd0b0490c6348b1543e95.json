{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport Option from '../internal/components/option';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { getBaseProps } from '../internal/base-component';\nimport SpaceBetween from '../space-between/internal';\nimport DismissButton from './dismiss-button';\nimport SelectToggle from './toggle';\nimport styles from './styles.css.js';\nexport default function InternalTokenGroup(_a) {\n  var items = _a.items,\n      alignment = _a.alignment,\n      _onDismiss = _a.onDismiss,\n      __internalRootRef = _a.__internalRootRef,\n      limit = _a.limit,\n      props = __rest(_a, [\"items\", \"alignment\", \"onDismiss\", \"__internalRootRef\", \"limit\"]);\n\n  checkControlled('TokenGroup', 'items', items, 'onDismiss', _onDismiss);\n\n  var _b = useState(false),\n      expanded = _b[0],\n      setExpanded = _b[1];\n\n  var controlId = useUniqueId();\n  var hasItems = items.length > 0;\n  var hasHiddenItems = hasItems && limit !== undefined && items.length > limit;\n  var slicedItems = hasHiddenItems && !expanded ? items.slice(0, limit) : items;\n  var baseProps = getBaseProps(props);\n  var className = clsx(baseProps.className, styles.root, hasItems && styles['has-items']);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: className,\n    ref: __internalRootRef\n  }), hasItems && React.createElement(SpaceBetween, {\n    id: controlId,\n    direction: alignment,\n    size: \"xs\"\n  }, slicedItems.map(function (item, itemIndex) {\n    return React.createElement(Token, __assign({\n      key: itemIndex\n    }, item, {\n      onDismiss: function onDismiss() {\n        return fireNonCancelableEvent(_onDismiss, {\n          itemIndex: itemIndex\n        });\n      }\n    }));\n  })), hasHiddenItems && React.createElement(SelectToggle, {\n    controlId: controlId,\n    allHidden: limit === 0,\n    expanded: expanded,\n    numberOfHiddenOptions: items.length - slicedItems.length,\n    i18nStrings: props.i18nStrings,\n    onClick: function onClick() {\n      return setExpanded(!expanded);\n    }\n  }));\n}\nexport function Token(_a) {\n  var disabled = _a.disabled,\n      dismissLabel = _a.dismissLabel,\n      onDismiss = _a.onDismiss,\n      props = __rest(_a, [\"disabled\", \"dismissLabel\", \"onDismiss\"]);\n\n  return React.createElement(\"div\", {\n    className: clsx(styles.token, disabled && styles['token-disabled']),\n    \"aria-disabled\": disabled ? 'true' : undefined\n  }, React.createElement(Option, {\n    option: __assign(__assign({}, props), {\n      disabled: disabled\n    })\n  }), React.createElement(DismissButton, {\n    disabled: disabled,\n    dismissLabel: dismissLabel,\n    onDismiss: onDismiss\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}