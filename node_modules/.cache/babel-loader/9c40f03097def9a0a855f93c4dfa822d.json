{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState } from 'react';\nimport { useCallback, useRef } from 'react';\nimport { Transition as ReactTransitionGroupTransition } from 'react-transition-group';\nimport { useReducedMotion } from '../../hooks/use-visual-mode';\n/**\n * This component is a wrapper around the CSSTransition component.\n *\n * It provides a second parameter in its rendering function that must be\n * attached to the node that is transitioning.\n */\n\nexport function Transition(_a) {\n  var isIn = _a[\"in\"],\n      children = _a.children,\n      _b = _a.exit,\n      exit = _b === void 0 ? true : _b,\n      _c = _a.onStatusChange,\n      onStatusChange = _c === void 0 ? function () {\n    return void 0;\n  } : _c,\n      _d = _a.disabled,\n      disabled = _d === void 0 ? false : _d,\n      transitionChangeDelay = _a.transitionChangeDelay,\n      rest = __rest(_a, [\"in\", \"children\", \"exit\", \"onStatusChange\", \"disabled\", \"transitionChangeDelay\"]);\n\n  var transitionRootElement = useRef(null); // the initial state of the transition should be either 'exited' or 'entered' depending\n  // on the `in` property, this mimicks how internally the Transition component works here:\n  // https://github.com/reactjs/react-transition-group/blob/6cbd6aaedaf8e9472007640b429ddb48c6c24158/src/Transition.js#L121\n\n  var _e = useState(isIn ? 'entered' : 'exited'),\n      transitionState = _e[0],\n      setTransitionState = _e[1];\n\n  var motionDisabled = useReducedMotion(transitionRootElement) || disabled;\n  var addTransitionEndListener = useCallback(function (done) {\n    var node = transitionRootElement.current;\n\n    if (node === null) {\n      return;\n    }\n\n    var listener = function listener(e) {\n      if (e.target === node) {\n        node.removeEventListener('transitionend', listener);\n        node.removeEventListener('animationend', listener);\n        done();\n      }\n    };\n\n    node.addEventListener('transitionend', listener);\n    node.addEventListener('animationend', listener);\n  }, []);\n  return React.createElement(ReactTransitionGroupTransition, __assign({\n    addEndListener: addTransitionEndListener,\n    timeout: motionDisabled ? 0 : undefined,\n    \"in\": isIn,\n    nodeRef: transitionRootElement,\n    exit: exit,\n    onEnter: function onEnter(isAppearing) {\n      if (!isAppearing) {\n        setTransitionState('enter');\n        onStatusChange('enter');\n      }\n    },\n    onEntering: function onEntering(isAppearing) {\n      var _a;\n\n      if (!isAppearing) {\n        // This line forces the browser to recalculate the layout because we want the starting state in the 'enter' style\n        // to be applied before the animation starts.\n        void ((_a = transitionRootElement.current) === null || _a === void 0 ? void 0 : _a.offsetHeight);\n\n        if (transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering) {\n          setTimeout(function () {\n            setTransitionState('entering');\n            onStatusChange('entering');\n          }, transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering);\n        } else {\n          setTransitionState('entering');\n          onStatusChange('entering');\n        }\n      }\n    },\n    onEntered: function onEntered(isAppearing) {\n      if (!isAppearing) {\n        setTransitionState('entered');\n        onStatusChange('entered');\n      }\n    },\n    onExit: function onExit() {\n      setTransitionState('exit');\n      onStatusChange('exit');\n    },\n    onExiting: function onExiting() {\n      setTransitionState('exiting');\n      onStatusChange('exiting');\n    },\n    onExited: function onExited() {\n      setTransitionState('exited');\n      onStatusChange('exited');\n    }\n  }, rest), function () {\n    return children(transitionState, transitionRootElement);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}