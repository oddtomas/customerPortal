{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isItemGroup, indexEquals } from './utils';\nexport default function moveHighlight(_a) {\n  var startIndex = _a.startIndex,\n      expandedIndex = _a.expandedIndex,\n      getNext = _a.getNext,\n      hasExpandableGroups = _a.hasExpandableGroups,\n      isInRestrictedView = _a.isInRestrictedView;\n\n  var tryMove = function tryMove(currentIndex) {\n    var _a;\n\n    var next = getNext(currentIndex);\n\n    if (!next) {\n      return null;\n    } // Prevents stepping into disabled expandable groups. However,\n    // it's possible to navigate nested groups.\n\n\n    if (((_a = next.parent) === null || _a === void 0 ? void 0 : _a.disabled) && hasExpandableGroups) {\n      return tryMove(next.index);\n    } // it is not allowed to highlight groups when non-expandable\n\n\n    if (isItemGroup(next.item) && !hasExpandableGroups) {\n      return tryMove(next.index);\n    } // can only move within same parent unless is in restricted view\n\n\n    if (hasExpandableGroups && !isInRestrictedView && !isSameParent(startIndex, next.index)) {\n      return tryMove(next.index);\n    } // in restricted view can only navigate to children if group is expanded\n\n\n    if (hasExpandableGroups && isInRestrictedView && !isSameLevel(next.index, expandedIndex) && !isIncluded(expandedIndex, next.index)) {\n      return tryMove(next.index);\n    }\n\n    return next.index;\n  };\n\n  return tryMove(startIndex);\n}\n\nfunction isSameParent(left, right) {\n  return indexEquals(left.slice(0, -1), right.slice(0, -1));\n}\n\nfunction isSameLevel(left, right) {\n  return left.length === right.length;\n}\n\nfunction isIncluded(parent, child) {\n  return indexEquals(parent, child.slice(0, -1));\n}","map":null,"metadata":{},"sourceType":"module"}