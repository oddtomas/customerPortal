{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback } from 'react';\nimport clsx from 'clsx';\nimport FocusLock from 'react-focus-lock';\nimport { KeyCode } from '../internal/keycode';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { InternalButton } from '../button/internal';\nimport styles from './styles.css.js';\nexport default function PopoverBody(_a) {\n  var _b, _c;\n\n  var size = _a.size,\n      fixedWidth = _a.fixedWidth,\n      showDismissButton = _a.dismissButton,\n      dismissAriaLabel = _a.dismissAriaLabel,\n      header = _a.header,\n      children = _a.children,\n      onDismiss = _a.onDismiss,\n      variant = _a.variant,\n      _d = _a.returnFocus,\n      returnFocus = _d === void 0 ? true : _d,\n      overflowVisible = _a.overflowVisible,\n      dismissButtonRef = _a.dismissButtonRef,\n      className = _a.className;\n  var labelledById = useUniqueId('awsui-popover-');\n  var onKeyDown = useCallback(function (event) {\n    if (event.keyCode === KeyCode.escape) {\n      onDismiss();\n    }\n  }, [onDismiss]);\n  var dismissButton = (showDismissButton !== null && showDismissButton !== void 0 ? showDismissButton : null) && React.createElement(\"div\", {\n    className: styles.dismiss\n  }, React.createElement(InternalButton, {\n    variant: \"icon\",\n    formAction: \"none\",\n    iconName: \"close\",\n    className: styles['dismiss-control'],\n    ariaLabel: dismissAriaLabel,\n    onClick: function onClick() {\n      return onDismiss();\n    },\n    ref: dismissButtonRef\n  }));\n  return React.createElement(\"div\", {\n    className: clsx(styles.body, className, styles[\"body-size-\".concat(size)], (_b = {}, _b[styles['fixed-width']] = fixedWidth, _b[styles[\"variant-\".concat(variant)]] = variant, _b[styles['body-overflow-visible']] = overflowVisible === 'both', _b)),\n    role: header ? 'dialog' : undefined,\n    onKeyDown: onKeyDown,\n    \"aria-modal\": showDismissButton && variant !== 'annotation' ? true : undefined,\n    \"aria-labelledby\": header ? labelledById : undefined\n  }, React.createElement(FocusLock, {\n    disabled: variant === 'annotation' || !showDismissButton,\n    autoFocus: true,\n    returnFocus: returnFocus\n  }, header && React.createElement(\"div\", {\n    className: clsx(styles['header-row'], showDismissButton && styles['has-dismiss'])\n  }, dismissButton, React.createElement(\"div\", {\n    className: styles.header,\n    id: labelledById\n  }, React.createElement(\"h2\", null, header))), React.createElement(\"div\", {\n    className: !header && showDismissButton ? styles['has-dismiss'] : undefined\n  }, !header && dismissButton, React.createElement(\"div\", {\n    className: clsx(styles.content, (_c = {}, _c[styles['content-overflow-visible']] = !!overflowVisible, _c))\n  }, children))));\n}","map":null,"metadata":{},"sourceType":"module"}