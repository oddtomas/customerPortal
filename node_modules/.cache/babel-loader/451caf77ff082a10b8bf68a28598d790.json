{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\n\nexport default function Tools(_a) {\n  var children = _a.children;\n\n  var _b = useContext(AppLayoutContext),\n      ariaLabels = _b.ariaLabels,\n      handleSplitPanelClick = _b.handleSplitPanelClick,\n      handleToolsClick = _b.handleToolsClick,\n      hasDefaultToolsWidth = _b.hasDefaultToolsWidth,\n      isNavigationOpen = _b.isNavigationOpen,\n      isMobile = _b.isMobile,\n      isSplitPanelOpen = _b.isSplitPanelOpen,\n      isToolsOpen = _b.isToolsOpen,\n      splitPanel = _b.splitPanel,\n      tools = _b.tools,\n      toolsHide = _b.toolsHide,\n      toolsWidth = _b.toolsWidth,\n      isAnyPanelOpen = _b.isAnyPanelOpen,\n      navigationHide = _b.navigationHide;\n\n  var _c = useContext(SplitPanelContext),\n      splitPanelPosition = _c.position,\n      openButtonAriaLabel = _c.openButtonAriaLabel;\n\n  var hasSplitPanel = getSplitPanelStatus(splitPanel, splitPanelPosition);\n  var hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);\n  var hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n  var focusRefs = useFocusControl(isToolsOpen);\n\n  if (toolsHide && !hasSplitPanel) {\n    return null;\n  }\n\n  var isUnfocusable = isMobile && isAnyPanelOpen && isNavigationOpen && !navigationHide;\n  return React.createElement(Transition, {\n    \"in\": isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false\n  }, function (state, transitionEventsRef) {\n    var _a, _b, _c, _d;\n\n    var _e, _f, _g;\n\n    return React.createElement(\"div\", {\n      className: clsx(styles['tools-container'], (_a = {}, _a[testutilStyles['drawer-closed']] = !isToolsOpen, _a[styles.unfocusable] = isUnfocusable, _a)),\n      style: (_b = {}, _b[customCssProps.toolsAnimationStartingOpacity] = \"\".concat(hasSplitPanel && isSplitPanelOpen ? 1 : 0), // Overwrite the default tools width (depends on breakpoints) only when the `toolsWidth` property has been set.\n      _b[customCssProps.toolsWidth] = hasDefaultToolsWidth ? '' : \"\".concat(toolsWidth, \"px\"), _b)\n    }, children, !toolsHide && React.createElement(\"aside\", {\n      \"aria-hidden\": !isToolsOpen ? true : false,\n      \"aria-label\": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _e !== void 0 ? _e : undefined,\n      className: clsx(styles.tools, (_c = {}, _c[styles.animating] = state === 'entering', _c[styles['has-tools-form-persistence']] = hasToolsFormPersistence, _c[styles['is-tools-open']] = isToolsOpen, _c), testutilStyles.tools),\n      ref: state !== 'exiting' ? transitionEventsRef : undefined\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, React.createElement(\"div\", {\n      className: clsx(styles['hide-tools'])\n    }, React.createElement(InternalButton, {\n      ariaLabel: (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _f !== void 0 ? _f : undefined,\n      iconName: isMobile ? 'close' : 'angle-right',\n      onClick: function onClick() {\n        return handleToolsClick(false);\n      },\n      variant: \"icon\",\n      formAction: \"none\",\n      className: testutilStyles['tools-close'],\n      ref: focusRefs.close\n    })), tools)), !isMobile && React.createElement(\"aside\", {\n      \"aria-hidden\": !hasToolsForm ? true : false,\n      \"aria-label\": (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _g !== void 0 ? _g : undefined,\n      className: clsx(styles['show-tools'], (_d = {}, _d[styles.animating] = state === 'exiting', _d[styles['has-tools-form']] = hasToolsForm, _d[styles['has-tools-form-persistence']] = hasToolsFormPersistence, _d), splitPanelStyles.root),\n      ref: state === 'exiting' ? transitionEventsRef : undefined\n    }, !toolsHide && React.createElement(TriggerButton, {\n      ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle,\n      iconName: \"status-info\",\n      onClick: function onClick() {\n        return handleToolsClick(!isToolsOpen);\n      },\n      selected: hasSplitPanel && isToolsOpen,\n      className: testutilStyles['tools-toggle'],\n      ref: focusRefs.toggle\n    }), hasSplitPanel && React.createElement(TriggerButton, {\n      ariaLabel: openButtonAriaLabel,\n      iconName: \"view-vertical\",\n      onClick: function onClick() {\n        return handleSplitPanelClick();\n      },\n      selected: hasSplitPanel && isSplitPanelOpen,\n      className: splitPanelStyles['open-button']\n    })));\n  });\n}\n/**\n * Determine the default state of the Tools component. Mobile viewports should be\n * closed by default under all circumstances. If the toolsOpen prop has not been\n * set then it should be closed as well. Otherwise, default to the toolsOpen prop.\n */\n\nexport function getToolsDefaultState(isMobile, stateFromProps) {\n  var isToolsOpen;\n\n  if (isMobile || stateFromProps === undefined) {\n    isToolsOpen = false;\n  } else {\n    isToolsOpen = stateFromProps;\n  }\n\n  return isToolsOpen;\n}\n/**\n * This simple function returns the presence of the split panel as a child of the\n * Tools component. It must exist and be in side position.\n */\n\nfunction getSplitPanelStatus(splitPanel, splitPanelPosition) {\n  return splitPanel && splitPanelPosition === 'side' ? true : false;\n}\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\n\n\nfunction getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  var hasToolsForm = false;\n\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    } // The Split Panel button is needed\n\n\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    } // The Tools button is needed\n\n\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n\n  return hasToolsForm;\n}\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\n\n\nfunction getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  var hasToolsFormPersistence = false; // Both Tools and Split Panel exist and one or both is open\n\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n\n  return hasToolsFormPersistence;\n}","map":null,"metadata":{},"sourceType":"module"}