{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport balanced from 'balanced-match';\nimport { calculateOnce } from './calculate-once';\nexport function findUpUntil(node, callback) {\n  var current = node;\n\n  while (current && !callback(current)) {\n    current = current.parentElement; // If a component is used within an svg (i.e. as foreignObject), then it will\n    // have some ancestor nodes that are SVGElement. We want to skip those,\n    // as they have very different properties to HTLMElements.\n\n    while (current && !(current instanceof HTMLElement)) {\n      current = current.parentElement;\n    }\n  }\n\n  return current;\n}\n/**\n * Returns whether the browser supports CSS position sticky.\n * In our list of supported browsers, only returns false for IE11.\n */\n\nexport function supportsStickyPosition() {\n  var _a, _b, _c;\n\n  if (typeof window === 'undefined') {\n    // render no-sticky UI on server-side\n    return false;\n  }\n\n  return (_c = (_b = (_a = window.CSS) === null || _a === void 0 ? void 0 : _a.supports) === null || _b === void 0 ? void 0 : _b.call(_a, 'position', 'sticky')) !== null && _c !== void 0 ? _c : false;\n}\n/**\n * Returns whether `position: fixed` can be relative to transformed parents or\n * whether it's always relative to the viewport. Returns `true` on all browsers\n * except IE.\n */\n\nvar supportsContainingBlockPositioning = calculateOnce(function () {\n  var parent = document.createElement('div');\n  parent.style.transform = 'translateY(5px)';\n  document.body.appendChild(parent);\n  var child = document.createElement('div');\n  child.style.position = 'fixed';\n  child.style.top = '0';\n  parent.appendChild(child);\n  var result = parent.getBoundingClientRect().top === child.getBoundingClientRect().top;\n  document.body.removeChild(parent);\n  return result;\n});\n/**\n * Returns an element that is used to position the given element.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block\n */\n\nexport function getContainingBlock(startElement) {\n  if (!startElement.parentElement) {\n    return null;\n  }\n\n  return supportsContainingBlockPositioning() ? findUpUntil(startElement.parentElement, function (element) {\n    var computedStyle = getComputedStyle(element);\n    return !!computedStyle.transform && computedStyle.transform !== 'none' || !!computedStyle.perspective && computedStyle.perspective !== 'none';\n  }) : null;\n}\nvar cssVariableExpression = /--.+?\\s*,\\s*(.+)/;\n/**\n * Parses a CSS color value that might contain CSS Custom Properties\n * and returns a value that will be understood by the browser, no matter of support level.\n * If the browser support CSS Custom Properties, the value will be return as is. Otherwise,\n * the fallback value will be extracted and returned instead.\n */\n\nexport function parseCssVariable(value) {\n  var _a, _b, _c;\n\n  if ((_c = (_b = (_a = window.CSS) === null || _a === void 0 ? void 0 : _a.supports) === null || _b === void 0 ? void 0 : _b.call(_a, 'color', 'var(--dummy, #000)')) !== null && _c !== void 0 ? _c : false) {\n    return value;\n  }\n\n  var varIndex = value.lastIndexOf('var(');\n\n  if (varIndex === -1) {\n    return value;\n  }\n\n  var expr = balanced('(', ')', value.substr(varIndex));\n\n  if (!expr) {\n    return value;\n  }\n\n  var match = expr.body.match(cssVariableExpression);\n  return match ? match[1] : value;\n}\n/**\n * Checks whether the given node is a parent of the other descendant node.\n * This utility is helpful when the parent might be an SVG element,\n * which doesn't have a native `contains` implementation on some browsers like IE11.\n * @param parent Parent node\n * @param descendant Node that is checked to be a descendant of the parent node\n */\n\nexport function nodeContains(parent, descendant) {\n  if (!parent || !descendant) {\n    return false;\n  } // Use the native `contains` method when available\n\n\n  if (parent.contains && descendant.nodeType === Node.ELEMENT_NODE) {\n    return parent === descendant || parent.contains(descendant);\n  } // Fall back to a simple upwards tree traversal\n\n\n  var upperNode = descendant;\n\n  while (upperNode && parent !== upperNode) {\n    upperNode = upperNode.parentNode;\n  }\n\n  return upperNode === parent;\n}\n/**\n * Checks whether the given node is a descendant of a container.\n * @param container Container node\n * @param node Node that is checked to be a descendant of the container\n */\n\nexport function containsOrEqual(container, node) {\n  if (container === null) {\n    return false;\n  }\n\n  return container === node || container.contains(node);\n}","map":null,"metadata":{},"sourceType":"module"}