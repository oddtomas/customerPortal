{"ast":null,"code":"import React from 'react';\nimport InternalSpinner from '../spinner/internal';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { InternalButton } from '../button/internal';\nimport { warnOnce } from '../internal/logging';\nimport { isDevelopment } from '../internal/is-development';\nvar ICON_TYPES = {\n  success: 'status-positive',\n  warning: 'status-warning',\n  info: 'status-info',\n  error: 'status-negative'\n};\n\nfunction actionButton(buttonText, onButtonClick) {\n  return React.createElement(InternalButton, {\n    onClick: onButtonClick,\n    className: styles['action-button'],\n    formAction: \"none\"\n  }, buttonText);\n}\n\nfunction dismissButton(dismissLabel, onDismiss) {\n  return React.createElement(\"div\", {\n    className: styles['dismiss-button-wrapper']\n  }, React.createElement(InternalButton, {\n    onClick: onDismiss,\n    className: styles['dismiss-button'],\n    variant: \"flashbar-icon\",\n    iconName: \"close\",\n    formAction: \"none\",\n    ariaLabel: dismissLabel\n  }));\n}\n\nexport var Flash = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var header = _a.header,\n      content = _a.content,\n      dismissible = _a.dismissible,\n      dismissLabel = _a.dismissLabel,\n      loading = _a.loading,\n      action = _a.action,\n      buttonText = _a.buttonText,\n      onButtonClick = _a.onButtonClick,\n      onDismiss = _a.onDismiss,\n      className = _a.className,\n      transitionState = _a.transitionState,\n      _c = _a.type,\n      type = _c === void 0 ? 'info' : _c;\n\n  if (isDevelopment) {\n    if (buttonText && !onButtonClick) {\n      warnOnce('Flashbar', \"You provided a `buttonText` prop without an `onButtonClick` handler. This will render a non-interactive action button.\");\n    }\n\n    if (dismissible && !onDismiss) {\n      warnOnce('Flashbar', \"You have set the `dismissible` prop without an `onDismiss` handler. This will render a non-interactive dismiss button.\");\n    }\n  }\n\n  var button = action || buttonText && actionButton(buttonText, onButtonClick);\n  var iconType = ICON_TYPES[type];\n  var icon = loading ? React.createElement(InternalSpinner, null) : React.createElement(InternalIcon, {\n    name: iconType\n  });\n  var effectiveType = loading ? 'info' : type;\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: clsx(styles.flash, styles[\"flash-type-\".concat(effectiveType)], className, transitionState ? (_b = {}, _b[styles.enter] = transitionState === 'enter', _b[styles.entering] = transitionState === 'entering', _b[styles.entered] = transitionState === 'entered', _b[styles.exit] = transitionState === 'exit', _b[styles.exiting] = transitionState === 'exiting', _b[styles.exited] = transitionState === 'exited', _b) : '')\n  }, React.createElement(\"div\", {\n    className: clsx(styles['flash-icon'], styles['flash-text'])\n  }, icon), React.createElement(\"div\", {\n    className: styles['flash-body']\n  }, React.createElement(\"div\", {\n    className: clsx(styles['flash-message'], styles['flash-text'])\n  }, React.createElement(\"div\", {\n    className: styles['flash-header']\n  }, header), React.createElement(\"div\", {\n    className: styles['flash-content']\n  }, content)), button && React.createElement(\"div\", {\n    className: styles['action-button-wrapper']\n  }, button)), dismissible && dismissButton(dismissLabel, onDismiss));\n});","map":null,"metadata":{},"sourceType":"module"}