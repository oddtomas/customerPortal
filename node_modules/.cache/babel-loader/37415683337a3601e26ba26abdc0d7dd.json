{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { scaleLinear, scaleLog, scaleTime, scaleBand } from 'd3-scale';\n\nfunction isNumericDomain(domain) {\n  return domain.length > 0 && typeof domain[0] === 'number';\n}\n\nfunction isDateDomain(domain) {\n  return domain.length > 0 && domain[0] instanceof Date;\n}\n\nfunction createNumericScale(type, domain) {\n  var scale;\n\n  switch (type) {\n    case 'log':\n      scale = scaleLog();\n      break;\n\n    default:\n      scale = scaleLinear();\n  }\n\n  if (isNumericDomain(domain)) {\n    scale.domain(domain);\n  }\n\n  return scale;\n}\n\nfunction createTimeScale(domain) {\n  var scale = scaleTime();\n\n  if (isDateDomain(domain)) {\n    scale.domain(domain);\n  }\n\n  return scale;\n}\n\nfunction createBandScale(domain) {\n  var scale = scaleBand().padding(0.1);\n  scale.domain(domain);\n  return scale;\n}\n\nexport function createScale(type, domain, range) {\n  switch (type) {\n    case 'linear':\n    case 'log':\n      return {\n        type: 'numeric',\n        scale: createNumericScale(type, domain).range(range)\n      };\n\n    case 'time':\n      return {\n        type: 'time',\n        scale: createTimeScale(domain).range(range)\n      };\n\n    case 'categorical':\n      return {\n        type: 'categorical',\n        scale: createBandScale(domain).range(range)\n      };\n  }\n}\n\nvar ChartScale =\n/** @class */\nfunction () {\n  function ChartScale(scaleType, domain, range, noCategoricalOuterPadding) {\n    if (noCategoricalOuterPadding === void 0) {\n      noCategoricalOuterPadding = false;\n    }\n\n    this.scaleType = scaleType;\n    this.domain = domain;\n    this.range = range;\n    this.scale = createScale(this.scaleType, this.domain, this.range);\n    this.d3Scale = this.scale.scale;\n\n    if (this.isCategorical()) {\n      if (noCategoricalOuterPadding) {\n        // Categorical charts with only line (or threshold) series don't need as much out padding\n        // compared to a bar series. Increasing the inner padding to push more data points to the outside.\n        this.d3Scale.paddingInner(0.7);\n        this.d3Scale.paddingOuter(0);\n      } else {\n        this.d3Scale.paddingInner(0.2);\n        this.d3Scale.paddingOuter(0.05);\n      }\n    }\n  }\n\n  ChartScale.prototype.cloneScale = function (newScaleType, newDomain, newRange) {\n    return new ChartScale(newScaleType || this.scaleType, newDomain || this.domain, newRange || this.range);\n  };\n\n  ChartScale.prototype.isNumeric = function () {\n    return this.scale.type === 'numeric';\n  };\n\n  ChartScale.prototype.isTime = function () {\n    return this.scale.type === 'time';\n  };\n\n  ChartScale.prototype.isCategorical = function () {\n    return this.scale.type === 'categorical';\n  };\n\n  return ChartScale;\n}();\n\nexport { ChartScale };\n\nvar NumericChartScale =\n/** @class */\nfunction () {\n  function NumericChartScale(scaleType, domain, range, adjustDomain) {\n    this.scaleType = scaleType;\n    var scale = createNumericScale(scaleType, domain).range(range);\n\n    if (adjustDomain !== null) {\n      scale.nice(adjustDomain);\n    }\n\n    this.scale = {\n      type: 'numeric',\n      scale: scale\n    };\n    this.d3Scale = this.scale.scale;\n  }\n\n  NumericChartScale.prototype.isCategorical = function () {\n    return false;\n  };\n\n  return NumericChartScale;\n}();\n\nexport { NumericChartScale };","map":null,"metadata":{},"sourceType":"module"}