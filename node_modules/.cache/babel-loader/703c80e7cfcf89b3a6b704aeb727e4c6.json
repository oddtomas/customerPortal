{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { isLinkItem } from '../utils/utils';\nimport styles from './styles.css.js';\nimport Tooltip from '../tooltip';\nimport { getItemTarget } from '../utils/utils';\nimport useHiddenDescription from '../utils/use-hidden-description';\nimport InternalIcon from '../../icon/internal';\nimport { useDropdownContext } from '../../internal/components/dropdown/context';\nimport { getMenuItemProps } from '../utils/menu-item';\n\nvar ItemElement = function ItemElement(_a) {\n  var _b;\n\n  var item = _a.item,\n      disabled = _a.disabled,\n      onItemActivate = _a.onItemActivate,\n      highlighted = _a.highlighted,\n      highlightItem = _a.highlightItem,\n      _c = _a.first,\n      first = _c === void 0 ? false : _c,\n      last = _a.last,\n      hasCategoryHeader = _a.hasCategoryHeader,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'normal' : _d;\n  var isLink = isLinkItem(item);\n\n  var onClick = function onClick(event) {\n    // Stop propagation to parent node and handle event exclusively in here. This ensures\n    // that no group will interfere with the default behavior of links\n    event.stopPropagation();\n\n    if (!isLink) {\n      event.preventDefault();\n    }\n\n    if (!disabled) {\n      onItemActivate(item, event);\n    }\n  };\n\n  var onHover = function onHover(event) {\n    event.preventDefault();\n    highlightItem(item);\n  };\n\n  return React.createElement(\"li\", {\n    className: clsx(styles['item-element'], styles[\"variant-\".concat(variant)], (_b = {}, _b[styles.highlighted] = highlighted, _b[styles.disabled] = disabled, _b[styles.first] = first, _b[styles.last] = last, _b[styles['has-category-header']] = hasCategoryHeader, _b)),\n    role: \"presentation\",\n    \"data-testid\": item.id,\n    \"data-description\": item.description,\n    onClick: onClick,\n    onMouseEnter: onHover,\n    onTouchStart: onHover\n  }, React.createElement(MenuItem, {\n    item: item,\n    disabled: disabled,\n    highlighted: highlighted\n  }));\n};\n\nfunction MenuItem(_a) {\n  var item = _a.item,\n      disabled = _a.disabled,\n      highlighted = _a.highlighted;\n  var menuItemRef = useRef(null);\n  useEffect(function () {\n    if (highlighted && menuItemRef.current) {\n      menuItemRef.current.focus();\n    }\n  }, [highlighted]);\n  var isDisabledWithReason = disabled && item.disabledReason;\n\n  var _b = useHiddenDescription(item.disabledReason),\n      targetProps = _b.targetProps,\n      descriptionEl = _b.descriptionEl;\n\n  var menuItemProps = __assign(__assign({\n    className: styles['menu-item'],\n    ref: menuItemRef,\n    // We are using the roving tabindex technique to manage the focus state of the dropdown.\n    // The current element will always have tabindex=0 which means that it can be tabbed to,\n    // while all other items have tabindex=-1 so we can focus them when necessary.\n    tabIndex: highlighted ? 0 : -1\n  }, getMenuItemProps({\n    disabled: disabled\n  })), isDisabledWithReason ? targetProps : {});\n\n  var menuItem = isLinkItem(item) ? React.createElement(\"a\", __assign({}, menuItemProps, {\n    href: !disabled ? item.href : undefined,\n    target: getItemTarget(item),\n    rel: item.external ? 'noopener noreferrer' : undefined\n  }), React.createElement(MenuItemContent, {\n    item: item,\n    disabled: disabled\n  })) : React.createElement(\"span\", __assign({}, menuItemProps), React.createElement(MenuItemContent, {\n    item: item,\n    disabled: disabled\n  }));\n  var position = useDropdownContext().position;\n  var tooltipPosition = position === 'bottom-left' || position === 'top-left' ? 'left' : 'right';\n  return isDisabledWithReason ? React.createElement(Tooltip, {\n    content: item.disabledReason,\n    position: tooltipPosition\n  }, menuItem, descriptionEl) : menuItem;\n}\n\nvar MenuItemContent = function MenuItemContent(_a) {\n  var item = _a.item,\n      disabled = _a.disabled;\n  var hasIcon = !!(item.iconName || item.iconUrl || item.iconSvg);\n  var hasExternal = isLinkItem(item) && item.external;\n  return React.createElement(React.Fragment, null, hasIcon && React.createElement(MenuItemIcon, {\n    name: item.iconName,\n    url: item.iconUrl,\n    svg: item.iconSvg,\n    alt: item.iconAlt\n  }), ' ', item.text, \" \", hasExternal && React.createElement(ExternalIcon, {\n    disabled: disabled,\n    ariaLabel: item.externalIconAriaLabel\n  }));\n};\n\nvar MenuItemIcon = function MenuItemIcon(props) {\n  return React.createElement(\"span\", {\n    className: styles.icon\n  }, React.createElement(InternalIcon, __assign({}, props)));\n};\n\nvar ExternalIcon = function ExternalIcon(_a) {\n  var disabled = _a.disabled,\n      ariaLabel = _a.ariaLabel;\n  var icon = React.createElement(InternalIcon, {\n    variant: disabled ? 'disabled' : 'normal',\n    name: \"external\"\n  });\n  return React.createElement(\"span\", {\n    className: styles['external-icon'],\n    role: ariaLabel ? 'img' : undefined,\n    \"aria-label\": ariaLabel\n  }, icon);\n};\n\nexport default ItemElement;","map":null,"metadata":{},"sourceType":"module"}