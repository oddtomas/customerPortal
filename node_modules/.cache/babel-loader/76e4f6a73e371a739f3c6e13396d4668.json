{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useReducer, useRef } from 'react';\nimport InternalBreadcrumbGroup from '../../breadcrumb-group/internal';\nimport { InternalButton } from '../../button/internal';\nimport InternalModal from '../../modal/internal';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\nimport { BucketsTable } from './buckets-table';\nimport { ObjectsTable } from './objects-table';\nimport { VersionsTable } from './versions-table';\nimport styles from './styles.css.js';\nimport { joinObjectPath } from '../utils'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nfunction assertNever(_value) {\n  return null;\n}\n\nvar initialBrowseState = {\n  selectedItem: null,\n  currentView: 'buckets',\n  breadcrumbs: []\n};\n\nfunction s3BrowseReducer(state, action) {\n  switch (action.type) {\n    case 'browse-buckets':\n      return initialBrowseState;\n\n    case 'browse-objects':\n      return {\n        selectedItem: null,\n        currentView: 'objects',\n        breadcrumbs: action.breadcrumbs\n      };\n\n    case 'browse-versions':\n      return {\n        selectedItem: null,\n        currentView: 'versions',\n        breadcrumbs: action.breadcrumbs\n      };\n\n    case 'select-item':\n      return __assign(__assign({}, state), {\n        selectedItem: action.item\n      });\n\n    default:\n      assertNever(action);\n  }\n\n  return state;\n}\n\nfunction createResourceInfo(_a) {\n  var currentView = _a.currentView,\n      breadcrumbs = _a.breadcrumbs,\n      selectedItem = _a.selectedItem;\n  var prefix = 's3://';\n\n  if (currentView === 'versions') {\n    return {\n      uri: prefix + joinObjectPath(breadcrumbs),\n      versionId: selectedItem !== null && selectedItem !== void 0 ? selectedItem : undefined\n    };\n  }\n\n  return {\n    uri: prefix + joinObjectPath(__spreadArray(__spreadArray([], breadcrumbs, true), [selectedItem], false))\n  };\n}\n\nexport function S3Modal(_a) {\n  var _b, _c;\n\n  var i18nStrings = _a.i18nStrings,\n      alert = _a.alert,\n      selectableItemsTypes = _a.selectableItemsTypes,\n      fetchBuckets = _a.fetchBuckets,\n      bucketsVisibleColumns = _a.bucketsVisibleColumns,\n      bucketsIsItemDisabled = _a.bucketsIsItemDisabled,\n      fetchObjects = _a.fetchObjects,\n      objectsVisibleColumns = _a.objectsVisibleColumns,\n      objectsIsItemDisabled = _a.objectsIsItemDisabled,\n      fetchVersions = _a.fetchVersions,\n      versionsVisibleColumns = _a.versionsVisibleColumns,\n      versionsIsItemDisabled = _a.versionsIsItemDisabled,\n      onSubmit = _a.onSubmit,\n      onDismiss = _a.onDismiss;\n\n  var _d = useReducer(s3BrowseReducer, initialBrowseState),\n      _e = _d[0],\n      currentView = _e.currentView,\n      breadcrumbs = _e.breadcrumbs,\n      selectedItem = _e.selectedItem,\n      dispatch = _d[1];\n\n  var forwardFocusRef = useRef(null);\n  var modalWrapperRef = useRef(null);\n  var isVisualRefresh = useVisualRefresh(modalWrapperRef);\n  useEffectOnUpdate(function () {\n    var _a;\n\n    (_a = forwardFocusRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [breadcrumbs]);\n  return React.createElement(\"div\", {\n    ref: modalWrapperRef\n  }, React.createElement(InternalModal, {\n    visible: true,\n    size: \"max\",\n    closeAriaLabel: (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelModalDismiss) !== null && _b !== void 0 ? _b : '',\n    onDismiss: onDismiss,\n    header: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalTitle,\n    footer: React.createElement(InternalSpaceBetween, {\n      className: styles['modal-actions'],\n      size: \"xs\",\n      direction: \"horizontal\"\n    }, React.createElement(InternalButton, {\n      variant: \"link\",\n      formAction: \"none\",\n      onClick: onDismiss\n    }, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalCancelButton), React.createElement(InternalButton, {\n      variant: \"primary\",\n      className: styles['submit-button'],\n      disabled: !selectedItem,\n      formAction: \"none\",\n      onClick: function onClick() {\n        return onSubmit(createResourceInfo({\n          currentView: currentView,\n          breadcrumbs: breadcrumbs,\n          selectedItem: selectedItem\n        }));\n      }\n    }, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalSubmitButton))\n  }, React.createElement(InternalSpaceBetween, {\n    size: isVisualRefresh ? 'xxs' : 'xs'\n  }, React.createElement(InternalBreadcrumbGroup, {\n    ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelBreadcrumbs,\n    expandAriaLabel: \"Show path\",\n    onFollow: function onFollow(event) {\n      event.preventDefault();\n      event.detail.item.meta.onClick();\n    },\n    items: __spreadArray([{\n      text: (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalBreadcrumbRootItem) !== null && _c !== void 0 ? _c : '',\n      href: '',\n      meta: {\n        onClick: function onClick() {\n          return dispatch({\n            type: 'browse-buckets'\n          });\n        }\n      }\n    }], breadcrumbs.map(function (segment, index) {\n      return {\n        text: segment,\n        href: '',\n        meta: {\n          onClick: function onClick() {\n            return dispatch({\n              type: 'browse-objects',\n              breadcrumbs: breadcrumbs.slice(0, index + 1)\n            });\n          }\n        }\n      };\n    }), true)\n  }), alert, currentView === 'buckets' ? React.createElement(BucketsTable, {\n    forwardFocusRef: forwardFocusRef,\n    fetchData: fetchBuckets,\n    visibleColumns: bucketsVisibleColumns,\n    isItemDisabled: bucketsIsItemDisabled,\n    selectableItemsTypes: selectableItemsTypes,\n    i18nStrings: i18nStrings,\n    isVisualRefresh: isVisualRefresh,\n    onDrilldown: function onDrilldown(path) {\n      return dispatch({\n        type: 'browse-objects',\n        breadcrumbs: [path]\n      });\n    },\n    onSelect: function onSelect(item) {\n      return dispatch({\n        type: 'select-item',\n        item: item\n      });\n    }\n  }) : currentView === 'objects' ? React.createElement(ObjectsTable, {\n    forwardFocusRef: forwardFocusRef,\n    pathSegments: breadcrumbs,\n    fetchData: fetchObjects,\n    visibleColumns: objectsVisibleColumns,\n    isItemDisabled: objectsIsItemDisabled,\n    selectableItemsTypes: selectableItemsTypes,\n    i18nStrings: i18nStrings,\n    isVisualRefresh: isVisualRefresh,\n    onDrilldown: function onDrilldown(item) {\n      dispatch({\n        type: item.IsFolder ? 'browse-objects' : 'browse-versions',\n        breadcrumbs: __spreadArray(__spreadArray([], breadcrumbs, true), [item.Key], false)\n      });\n    },\n    onSelect: function onSelect(item) {\n      return dispatch({\n        type: 'select-item',\n        item: item\n      });\n    }\n  }) : currentView === 'versions' ? React.createElement(VersionsTable, {\n    forwardFocusRef: forwardFocusRef,\n    pathSegments: breadcrumbs,\n    fetchData: fetchVersions,\n    visibleColumns: versionsVisibleColumns,\n    isItemDisabled: versionsIsItemDisabled,\n    i18nStrings: i18nStrings,\n    isVisualRefresh: isVisualRefresh,\n    onSelect: function onSelect(item) {\n      return dispatch({\n        type: 'select-item',\n        item: item\n      });\n    }\n  }) : assertNever(currentView))));\n}","map":null,"metadata":{},"sourceType":"module"}