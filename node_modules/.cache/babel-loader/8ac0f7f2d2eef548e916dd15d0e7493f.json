{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useRef } from 'react';\nimport { fireNonCancelableEvent } from '../internal/events/index';\n/**\n * This hook generates `onBlur`, `onFocus` and `onLoadItems` handlers that make sure an `onLoadItems` event\n * fires exactly once every time control they are used on gets focused.\n * It is neccesary to do this because Autosuggest and Select dedupe their `onLoadItems` events stopping\n * the same event from firing twice in a row. This means, refocusing the control sometimes results in\n * `onLoadItems` firing, but sometimes not.\n */\n\nexport var useLoadItems = function useLoadItems(onLoadItems, focusFilteringText, currentFilteringProperty, currentFilteringText, currentFilteringOperator) {\n  var focusIn = useRef(false);\n\n  var handleBlur = function handleBlur() {\n    focusIn.current = true;\n  };\n\n  var fireLoadItems = function fireLoadItems(detail) {\n    var _a;\n\n    fireNonCancelableEvent(onLoadItems, __assign(__assign({}, detail), {\n      filteringText: (_a = currentFilteringText !== null && currentFilteringText !== void 0 ? currentFilteringText : detail.filteringText) !== null && _a !== void 0 ? _a : '',\n      filteringProperty: currentFilteringProperty,\n      filteringOperator: currentFilteringOperator\n    }));\n    focusIn.current = false;\n  };\n\n  var handleFocus = function handleFocus() {\n    if (focusIn.current) {\n      fireLoadItems({\n        firstPage: true,\n        samePage: false,\n        filteringText: focusFilteringText\n      });\n    }\n  };\n\n  var handleLoadItems = function handleLoadItems(_a) {\n    var detail = _a.detail;\n    return fireLoadItems(detail);\n  };\n\n  return {\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onLoadItems: handleLoadItems\n  };\n};","map":null,"metadata":{},"sourceType":"module"}