{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useLayoutEffect, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '../internal/logging';\nimport styles from './styles.css.js';\nimport icons from './icons';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\nfunction iconSizeMap(height) {\n  if (height === null) {\n    // This is the best guess for the contextual height while server rendering.\n    return 'normal';\n  }\n\n  if (height >= 50) {\n    return 'large';\n  } else if (height >= 36) {\n    return 'big';\n  } else if (height >= 24) {\n    return 'medium';\n  } else if (height <= 16) {\n    return 'small';\n  } else {\n    return 'normal';\n  }\n}\n\nvar InternalIcon = function InternalIcon(_a) {\n  var name = _a.name,\n      _b = _a.size,\n      size = _b === void 0 ? 'normal' : _b,\n      _c = _a.variant,\n      variant = _c === void 0 ? 'normal' : _c,\n      url = _a.url,\n      alt = _a.alt,\n      svg = _a.svg,\n      badge = _a.badge,\n      _d = _a.__internalRootRef,\n      __internalRootRef = _d === void 0 ? null : _d,\n      props = __rest(_a, [\"name\", \"size\", \"variant\", \"url\", \"alt\", \"svg\", \"badge\", \"__internalRootRef\"]);\n\n  var iconRef = useRef(null); // To ensure a re-render is triggered on visual mode changes\n\n  useVisualRefresh(iconRef);\n\n  var _e = useState(null),\n      parentHeight = _e[0],\n      setParentHeight = _e[1];\n\n  var contextualSize = size === 'inherit';\n  var iconSize = contextualSize ? iconSizeMap(parentHeight) : size;\n  var inlineStyles = contextualSize && parentHeight !== null ? {\n    height: \"\".concat(parentHeight, \"px\")\n  } : {};\n  var baseProps = getBaseProps(props);\n  baseProps.className = clsx(baseProps.className, styles.icon, contextualSize && styles['icon-flex-height'], badge && styles.badge, !contextualSize && styles[\"size-\".concat(iconSize, \"-mapped-height\")], styles[\"size-\".concat(iconSize)], styles[\"variant-\".concat(variant)]); // Possible infinite loop is not a concern here because line\n  // height should not change without an external state update.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useLayoutEffect(function () {\n    if (!contextualSize || !iconRef.current) {\n      return;\n    }\n\n    var lineHeight = getComputedStyle(iconRef.current).lineHeight;\n    var newParentHeight = parseInt(lineHeight, 10);\n    setParentHeight(newParentHeight);\n  });\n  var mergedRef = useMergeRefs(iconRef, __internalRootRef);\n\n  if (svg) {\n    if (url) {\n      warnOnce('Icon', 'You have specified both `url` and `svg`. `svg` will take precedence and `url` will be ignored.');\n    }\n\n    return React.createElement(\"span\", __assign({}, baseProps, {\n      ref: mergedRef,\n      \"aria-hidden\": \"true\",\n      style: inlineStyles\n    }), svg);\n  }\n\n  if (url) {\n    return React.createElement(\"span\", __assign({}, baseProps, {\n      ref: mergedRef,\n      style: inlineStyles\n    }), React.createElement(\"img\", {\n      src: url,\n      alt: alt\n    }));\n  }\n\n  var validIcon = name && Object.prototype.hasOwnProperty.call(icons, name);\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    // dangerouslySetInnerHTML is safe here, as we control the content coming from `icons`\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: validIcon ? {\n      __html: icons[name]\n    } : undefined,\n    ref: mergedRef,\n    style: inlineStyles\n  }));\n};\n\nexport default InternalIcon;","map":null,"metadata":{},"sourceType":"module"}