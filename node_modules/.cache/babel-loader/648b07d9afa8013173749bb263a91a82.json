{"ast":null,"code":"import { differenceInDays, add } from 'date-fns';\nimport { X_TICK_COUNT_RATIO, Y_TICK_COUNT_RATIO } from './constants'; // The number of ticks is currently defined by the length of the scale.\n// The x scale tends to have longer labels, so we're using less ticks for it.\n// These numbers are currently based on first impressions and might change in the future.\n// We might also open up an API in the future to control the amount of ticks displayed.\n\nexport function getXTickCount(width) {\n  return Math.ceil(width / X_TICK_COUNT_RATIO);\n}\nexport function getYTickCount(height) {\n  return Math.ceil(height / Y_TICK_COUNT_RATIO);\n}\nexport function createXTicks(scale, values) {\n  if (scale.isNumeric()) {\n    return scale.d3Scale.ticks(values);\n  } else if (scale.isTime()) {\n    var rawTicks = scale.d3Scale.ticks(values);\n    var domain = scale.d3Scale.domain();\n    return uniform(rawTicks, domain[domain.length - 1]);\n  } else {\n    return scale.d3Scale.domain();\n  }\n}\nexport function createYTicks(scale, values) {\n  var ticks = scale.d3Scale.ticks(values); // The logarithmic scale sometimes produces a very large amount of (major and minor) ticks,\n  // at which point we need to reduce them significantly for space.\n\n  if (scale.scaleType === 'log' && ticks.length > 10) {\n    return scale.d3Scale.ticks(3);\n  }\n\n  return ticks;\n}\n/**\n * Ensure uniformly-spaced ticks for 2-day intervals. d3-scale generates\n * ticks for even or odd numbers, which causes varying interval lengths\n * between months.\n */\n\nfunction uniform(ticks, max) {\n  if (ticks.length < 3 || !isMixedDayInterval(ticks)) {\n    return ticks;\n  }\n\n  return createTwoDayInterval(ticks[0], max);\n}\n\nfunction isMixedDayInterval(ticks) {\n  var oneDayInterval = false;\n  var twoDayInterval = false;\n\n  for (var i = 1; i < ticks.length; i++) {\n    oneDayInterval = oneDayInterval || isDayInterval(ticks[i - 1], ticks[i], 1);\n    twoDayInterval = twoDayInterval || isDayInterval(ticks[i - 1], ticks[i], 2);\n  }\n\n  return oneDayInterval && twoDayInterval;\n}\n\nfunction isDayInterval(a, b, difference) {\n  if (difference === void 0) {\n    difference = 1;\n  }\n\n  return Math.abs(differenceInDays(a, b)) === difference;\n}\n\nfunction createTwoDayInterval(start, max) {\n  var result = [];\n  var curr = start;\n\n  while (curr < max) {\n    result.push(curr);\n    curr = add(curr, {\n      days: 2\n    });\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}