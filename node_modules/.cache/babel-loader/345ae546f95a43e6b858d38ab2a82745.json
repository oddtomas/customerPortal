{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useEffect, useRef, useState, useImperativeHandle } from 'react';\nimport clsx from 'clsx';\nimport { KeyCode } from '../internal/keycode';\nimport { getBaseProps } from '../internal/base-component';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport Arrow from './arrow';\nimport Portal from '../internal/components/portal';\nimport PopoverContainer from './container';\nimport PopoverBody from './body';\nimport styles from './styles.css.js';\nimport { fireNonCancelableEvent } from '../internal/events/index';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { usePortalModeClasses } from '../internal/hooks/use-portal-mode-classes';\nexport default React.forwardRef(InternalPopover);\n\nfunction InternalPopover(_a, ref) {\n  var _b = _a.position,\n      position = _b === void 0 ? 'right' : _b,\n      _c = _a.size,\n      size = _c === void 0 ? 'medium' : _c,\n      _d = _a.fixedWidth,\n      fixedWidth = _d === void 0 ? false : _d,\n      _e = _a.triggerType,\n      triggerType = _e === void 0 ? 'text' : _e,\n      _f = _a.dismissButton,\n      dismissButton = _f === void 0 ? true : _f,\n      dismissAriaLabel = _a.dismissAriaLabel,\n      children = _a.children,\n      header = _a.header,\n      content = _a.content,\n      _g = _a.renderWithPortal,\n      renderWithPortal = _g === void 0 ? false : _g,\n      __onOpen = _a.__onOpen,\n      _h = _a.__internalRootRef,\n      __internalRootRef = _h === void 0 ? null : _h,\n      restProps = __rest(_a, [\"position\", \"size\", \"fixedWidth\", \"triggerType\", \"dismissButton\", \"dismissAriaLabel\", \"children\", \"header\", \"content\", \"renderWithPortal\", \"__onOpen\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(restProps);\n  var focusVisible = useFocusVisible();\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var clickFrameId = useRef(null);\n\n  var _j = useState(false),\n      visible = _j[0],\n      setVisible = _j[1];\n\n  var onTriggerClick = useCallback(function () {\n    fireNonCancelableEvent(__onOpen);\n    setVisible(true);\n  }, [__onOpen]);\n  var onDismiss = useCallback(function () {\n    setVisible(false);\n  }, []);\n  var onTriggerKeyDown = useCallback(function (event) {\n    if (event.keyCode === KeyCode.tab || event.keyCode === KeyCode.escape) {\n      setVisible(false);\n    }\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      dismissPopover: onDismiss\n    };\n  });\n  useEffect(function () {\n    if (!triggerRef.current) {\n      return;\n    }\n\n    var document = triggerRef.current.ownerDocument;\n\n    var onDocumentClick = function onDocumentClick() {\n      // Dismiss popover unless there was a click inside within the last animation frame.\n      if (clickFrameId.current === null) {\n        setVisible(false);\n      }\n    }; // useCapture=false makes sure this listener is called after the one attached to the element.\n    // the options.capture notation is unsupported by IE.\n\n\n    document.addEventListener('mousedown', onDocumentClick, false);\n    return function () {\n      document.removeEventListener('mousedown', onDocumentClick, false);\n    };\n  }, []);\n  var popoverClasses = usePortalModeClasses(triggerRef);\n  var triggerProps = {\n    // https://github.com/microsoft/TypeScript/issues/36659\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: triggerRef,\n    onClick: onTriggerClick,\n    onKeyDown: onTriggerKeyDown,\n    className: clsx(styles.trigger, styles[\"trigger-type-\".concat(triggerType)])\n  };\n  var popoverContent = React.createElement(\"span\", {\n    \"aria-live\": dismissButton ? undefined : 'polite',\n    \"aria-atomic\": dismissButton ? undefined : true,\n    className: popoverClasses\n  }, visible && React.createElement(PopoverContainer, {\n    position: position,\n    trackRef: triggerRef,\n    arrow: function arrow(position) {\n      return React.createElement(Arrow, {\n        position: position\n      });\n    },\n    renderWithPortal: renderWithPortal,\n    zIndex: renderWithPortal ? 7000 : undefined\n  }, React.createElement(PopoverBody, {\n    size: size,\n    fixedWidth: fixedWidth,\n    dismissButton: dismissButton,\n    dismissAriaLabel: dismissAriaLabel,\n    header: header,\n    onDismiss: onDismiss,\n    overflowVisible: \"both\"\n  }, content)));\n  var mergedRef = useMergeRefs(popoverRef, __internalRootRef);\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: mergedRef,\n    onMouseDown: function onMouseDown() {\n      // Indicate there was a click inside popover recently, including nested portals.\n      clickFrameId.current = requestAnimationFrame(function () {\n        clickFrameId.current = null;\n      });\n    }\n  }), triggerType === 'text' ? React.createElement(\"button\", __assign({}, triggerProps, {\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\"\n  }, focusVisible), React.createElement(\"span\", {\n    className: styles['trigger-inner-text']\n  }, children)) : React.createElement(\"span\", __assign({}, triggerProps), children), renderWithPortal ? React.createElement(Portal, null, popoverContent) : popoverContent);\n}","map":null,"metadata":{},"sourceType":"module"}