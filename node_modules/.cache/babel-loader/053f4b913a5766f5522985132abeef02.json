{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { Segment } from './segment';\nimport styles from './styles.css.js';\nexport default function InternalSegmentedControl(_a) {\n  var selectedId = _a.selectedId,\n      options = _a.options,\n      label = _a.label,\n      ariaLabelledby = _a.ariaLabelledby,\n      onChange = _a.onChange;\n  var segmentByIdRef = useRef({});\n  var selectedOptions = (options || []).filter(function (option) {\n    return option.id === selectedId;\n  });\n  var currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;\n  var enabledSegments = (options || []).filter(function (option) {\n    return !option.disabled;\n  });\n\n  var moveHighlight = function moveHighlight(event, activeIndex) {\n    var _a;\n\n    if (event.keyCode !== KeyCode.right && event.keyCode !== KeyCode.left) {\n      return;\n    }\n\n    var nextIndex = activeIndex;\n\n    if (event.keyCode === KeyCode.right) {\n      nextIndex = activeIndex + 1 === enabledSegments.length ? 0 : activeIndex + 1;\n    } else if (event.keyCode === KeyCode.left) {\n      nextIndex = activeIndex === 0 ? enabledSegments.length - 1 : activeIndex - 1;\n    }\n\n    var nextSegmentId = enabledSegments[nextIndex].id;\n    (_a = segmentByIdRef.current[nextSegmentId]) === null || _a === void 0 ? void 0 : _a.focus();\n  };\n\n  return React.createElement(\"div\", {\n    className: clsx(styles['segment-part'], styles[\"segment-count-\".concat(options === null || options === void 0 ? void 0 : options.length)]),\n    \"aria-label\": label,\n    \"aria-labelledby\": ariaLabelledby,\n    role: \"toolbar\"\n  }, options && options.map(function (option, index) {\n    var isActive = selectedId === option.id;\n    var enabledSegmentIndex = enabledSegments.indexOf(option);\n    var tabIndex = isActive ? 0 : -1;\n\n    if (currentSelectedOption === null && enabledSegmentIndex === 0) {\n      tabIndex = 0;\n    }\n\n    return React.createElement(Segment, {\n      key: index,\n      id: option.id,\n      disabled: !!option.disabled,\n      iconName: option.iconName,\n      iconAlt: option.iconAlt,\n      iconUrl: option.iconUrl,\n      iconSvg: option.iconSvg,\n      text: option.text,\n      isActive: isActive,\n      tabIndex: tabIndex,\n      ref: function ref(node) {\n        if (node) {\n          segmentByIdRef.current[option.id] = node;\n        } else {\n          delete segmentByIdRef.current[option.id];\n        }\n      },\n      onClick: function onClick() {\n        if (selectedId !== option.id) {\n          fireNonCancelableEvent(onChange, {\n            selectedId: option.id\n          });\n        }\n      },\n      onKeyDown: function onKeyDown(event) {\n        return moveHighlight(event, enabledSegmentIndex);\n      }\n    });\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}