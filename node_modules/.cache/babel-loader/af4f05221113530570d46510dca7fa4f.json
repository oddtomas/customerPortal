{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport Dropdown from '../internal/components/dropdown';\nimport ItemsList from './items-list';\nimport { useButtonDropdown } from './utils/use-button-dropdown';\nimport OptionsList from '../internal/components/options-list';\nimport { InternalButton } from '../button/internal';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport InternalBox from '../box/internal';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nvar InternalButtonDropdown = React.forwardRef(function (_a, ref) {\n  var items = _a.items,\n      _b = _a.variant,\n      variant = _b === void 0 ? 'normal' : _b,\n      _c = _a.loading,\n      loading = _c === void 0 ? false : _c,\n      _d = _a.disabled,\n      disabled = _d === void 0 ? false : _d,\n      _e = _a.expandableGroups,\n      expandableGroups = _e === void 0 ? false : _e,\n      children = _a.children,\n      onItemClick = _a.onItemClick,\n      onItemFollow = _a.onItemFollow,\n      customTriggerBuilder = _a.customTriggerBuilder,\n      expandToViewport = _a.expandToViewport,\n      ariaLabel = _a.ariaLabel,\n      title = _a.title,\n      description = _a.description,\n      preferCenter = _a.preferCenter,\n      __internalRootRef = _a.__internalRootRef,\n      props = __rest(_a, [\"items\", \"variant\", \"loading\", \"disabled\", \"expandableGroups\", \"children\", \"onItemClick\", \"onItemFollow\", \"customTriggerBuilder\", \"expandToViewport\", \"ariaLabel\", \"title\", \"description\", \"preferCenter\", \"__internalRootRef\"]);\n\n  var isInRestrictedView = useMobile();\n  var usingMouse = useRef(true);\n  var dropdownId = useUniqueId('dropdown');\n\n  for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n    var item = items_1[_i];\n    checkSafeUrl('ButtonDropdown', item.href);\n  }\n\n  var _f = useButtonDropdown({\n    items: items,\n    onItemClick: onItemClick,\n    onItemFollow: onItemFollow,\n    hasExpandableGroups: expandableGroups,\n    isInRestrictedView: isInRestrictedView,\n    usingMouse: usingMouse\n  }),\n      isOpen = _f.isOpen,\n      targetItem = _f.targetItem,\n      isHighlighted = _f.isHighlighted,\n      isExpanded = _f.isExpanded,\n      highlightItem = _f.highlightItem,\n      onKeyDown = _f.onKeyDown,\n      onKeyUp = _f.onKeyUp,\n      onItemActivate = _f.onItemActivate,\n      onGroupToggle = _f.onGroupToggle,\n      toggleDropdown = _f.toggleDropdown;\n\n  var handleMouseEvent = function handleMouseEvent() {\n    usingMouse.current = true;\n  };\n\n  var baseProps = getBaseProps(props);\n  var dropdownRef = useRef(null);\n  useForwardFocus(ref, dropdownRef);\n\n  var clickHandler = function clickHandler() {\n    if (!usingMouse.current) {\n      return;\n    }\n\n    if (!loading && !disabled) {\n      toggleDropdown();\n\n      if (dropdownRef.current) {\n        dropdownRef.current.focus();\n      }\n    }\n  };\n\n  var canBeOpened = !loading && !disabled;\n  var wasOpen = usePrevious(isOpen);\n  useEffect(function () {\n    if (!isOpen && dropdownRef.current && wasOpen) {\n      dropdownRef.current.focus();\n    }\n  }, [isOpen, wasOpen]);\n  var triggerVariant = variant === 'navigation' ? undefined : variant;\n  var iconProps = variant === 'icon' ? {\n    iconName: 'ellipsis'\n  } : {\n    iconName: 'caret-down-filled',\n    iconAlign: 'right',\n    __iconClass: canBeOpened && isOpen ? styles['rotate-up'] : styles['rotate-down']\n  };\n  var trigger = customTriggerBuilder ? customTriggerBuilder(clickHandler, dropdownRef, disabled, isOpen) : React.createElement(InternalButton, __assign({\n    ref: dropdownRef\n  }, iconProps, {\n    variant: triggerVariant,\n    loading: loading,\n    disabled: disabled,\n    onClick: function onClick(event) {\n      event.preventDefault();\n      clickHandler();\n    },\n    ariaLabel: ariaLabel,\n    \"aria-haspopup\": true,\n    ariaExpanded: canBeOpened && isOpen,\n    formAction: \"none\"\n  }), children);\n  var hasHeader = title || description;\n  var headerId = useUniqueId('awsui-button-dropdown__header');\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onMouseDown: handleMouseEvent,\n    className: clsx(styles['button-dropdown'], styles[\"variant-\".concat(variant)], baseProps.className),\n    \"aria-owns\": expandToViewport && isOpen ? dropdownId : undefined,\n    ref: __internalRootRef\n  }), React.createElement(Dropdown, {\n    open: canBeOpened && isOpen,\n    stretchWidth: false,\n    stretchTriggerHeight: variant === 'navigation',\n    expandToViewport: expandToViewport,\n    preferCenter: preferCenter,\n    onDropdownClose: function onDropdownClose() {\n      toggleDropdown();\n    },\n    trigger: trigger,\n    dropdownId: dropdownId\n  }, hasHeader && React.createElement(\"div\", {\n    className: styles.header,\n    id: headerId\n  }, title && React.createElement(InternalBox, {\n    fontSize: \"heading-s\",\n    fontWeight: \"bold\"\n  }, React.createElement(\"span\", {\n    className: styles.title\n  }, title)), description && React.createElement(InternalBox, {\n    fontSize: \"body-s\"\n  }, React.createElement(\"span\", {\n    className: styles.description\n  }, description))), React.createElement(OptionsList, {\n    open: canBeOpened && isOpen,\n    position: \"static\",\n    role: \"menu\",\n    decreaseTopMargin: true,\n    ariaLabelledby: hasHeader ? headerId : undefined\n  }, React.createElement(ItemsList, {\n    items: items,\n    onItemActivate: onItemActivate,\n    onGroupToggle: onGroupToggle,\n    hasExpandableGroups: expandableGroups,\n    targetItem: targetItem,\n    isHighlighted: isHighlighted,\n    isExpanded: isExpanded,\n    highlightItem: highlightItem,\n    expandToViewport: expandToViewport,\n    variant: variant\n  }))));\n});\nexport default InternalButtonDropdown;","map":null,"metadata":{},"sourceType":"module"}