{"ast":null,"code":"import { __assign, __rest, __spreadArray } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { isGroup } from '../internal/components/option/utils/filter-options';\nimport DropdownFooter from '../internal/components/dropdown-footer/index.js';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport Dropdown from '../internal/components/dropdown';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\nimport { useSelect } from '../select/utils/use-select';\nimport { useNativeSearch } from '../select/utils/use-native-search';\nimport { useLoadItems } from '../select/utils/use-load-items';\nimport { useAnnouncement } from '../select/utils/use-announcement';\nimport { findOptionIndex } from '../select/utils/connect-options';\nimport PlainList from '../select/parts/plain-list';\nimport VirtualList from '../select/parts/virtual-list';\nimport { checkOptionValueField } from '../select/utils/check-option-value-field.js';\nimport Filter from '../select/parts/filter';\nimport Trigger from '../select/parts/trigger';\nimport TokenGroup from '../token-group/index.js';\nimport styles from './styles.css.js';\nvar InternalMultiselect = React.forwardRef(function (_a, externalRef) {\n  var _b;\n\n  var _c = _a.options,\n      options = _c === void 0 ? [] : _c,\n      _d = _a.filteringType,\n      filteringType = _d === void 0 ? 'none' : _d,\n      filteringPlaceholder = _a.filteringPlaceholder,\n      filteringAriaLabel = _a.filteringAriaLabel,\n      ariaRequired = _a.ariaRequired,\n      placeholder = _a.placeholder,\n      disabled = _a.disabled,\n      ariaLabel = _a.ariaLabel,\n      _e = _a.statusType,\n      statusType = _e === void 0 ? 'finished' : _e,\n      empty = _a.empty,\n      loadingText = _a.loadingText,\n      finishedText = _a.finishedText,\n      errorText = _a.errorText,\n      recoveryText = _a.recoveryText,\n      noMatch = _a.noMatch,\n      selectedAriaLabel = _a.selectedAriaLabel,\n      renderHighlightedAriaLive = _a.renderHighlightedAriaLive,\n      _f = _a.selectedOptions,\n      selectedOptions = _f === void 0 ? [] : _f,\n      deselectAriaLabel = _a.deselectAriaLabel,\n      _g = _a.keepOpen,\n      keepOpen = _g === void 0 ? true : _g,\n      tokenLimit = _a.tokenLimit,\n      i18nStrings = _a.i18nStrings,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      onLoadItems = _a.onLoadItems,\n      onChange = _a.onChange,\n      virtualScroll = _a.virtualScroll,\n      _h = _a.hideTokens,\n      hideTokens = _h === void 0 ? false : _h,\n      expandToViewport = _a.expandToViewport,\n      _j = _a.__internalRootRef,\n      __internalRootRef = _j === void 0 ? null : _j,\n      restProps = __rest(_a, [\"options\", \"filteringType\", \"filteringPlaceholder\", \"filteringAriaLabel\", \"ariaRequired\", \"placeholder\", \"disabled\", \"ariaLabel\", \"statusType\", \"empty\", \"loadingText\", \"finishedText\", \"errorText\", \"recoveryText\", \"noMatch\", \"selectedAriaLabel\", \"renderHighlightedAriaLive\", \"selectedOptions\", \"deselectAriaLabel\", \"keepOpen\", \"tokenLimit\", \"i18nStrings\", \"onBlur\", \"onFocus\", \"onLoadItems\", \"onChange\", \"virtualScroll\", \"hideTokens\", \"expandToViewport\", \"__internalRootRef\"]);\n\n  checkOptionValueField('Multiselect', 'options', options);\n  var baseProps = getBaseProps(restProps);\n  var formFieldContext = useFormFieldContext(restProps);\n\n  var _k = useLoadItems({\n    onLoadItems: onLoadItems,\n    options: options,\n    statusType: statusType\n  }),\n      handleLoadMore = _k.handleLoadMore,\n      handleRecoveryClick = _k.handleRecoveryClick,\n      fireLoadItems = _k.fireLoadItems;\n\n  var useInteractiveGroups = true;\n\n  var _l = useState(''),\n      filteringValue = _l[0],\n      setFilteringValue = _l[1];\n\n  var _m = prepareOptions(options, filteringType, filteringValue),\n      filteredOptions = _m.filteredOptions,\n      parentMap = _m.parentMap;\n\n  var updateSelectedOption = useCallback(function (option) {\n    var filtered = filteredOptions.filter(function (item) {\n      return item.type !== 'parent';\n    }).map(function (item) {\n      return item.option;\n    }); // switch between selection and deselection behavior, ignores disabled options to prevent\n    // getting stuck on one behavior when an option is disabled and its state cannot be changed\n\n    var isAllChildrenSelected = function isAllChildrenSelected(optionsArray) {\n      return optionsArray.every(function (item) {\n        return findOptionIndex(selectedOptions, item) > -1 || item.disabled;\n      });\n    };\n\n    var intersection = function intersection(visibleOptions, options) {\n      return visibleOptions.filter(function (item) {\n        return findOptionIndex(options, item) > -1 && !item.disabled;\n      });\n    };\n\n    var union = function union(visibleOptions, options) {\n      return visibleOptions.filter(function (item) {\n        return findOptionIndex(options, item) === -1;\n      }).concat(options);\n    };\n\n    var select = function select(options, selectedOptions) {\n      return union(selectedOptions, options);\n    };\n\n    var unselect = function unselect(options, selectedOptions) {\n      return selectedOptions.filter(function (option) {\n        return findOptionIndex(options, option) === -1;\n      });\n    };\n\n    var newSelectedOptions = __spreadArray([], selectedOptions, true);\n\n    if (isGroup(option)) {\n      var visibleOptions = intersection(__spreadArray([], option.options, true), filtered);\n      newSelectedOptions = isAllChildrenSelected(visibleOptions) ? unselect(visibleOptions, newSelectedOptions) : select(visibleOptions, newSelectedOptions);\n    } else {\n      newSelectedOptions = isAllChildrenSelected([option]) ? unselect([option], newSelectedOptions) : select([option], newSelectedOptions);\n    }\n\n    fireNonCancelableEvent(onChange, {\n      selectedOptions: newSelectedOptions\n    });\n  }, [onChange, selectedOptions, filteredOptions]);\n  var rootRef = useRef(null);\n  var selfControlId = useUniqueId('trigger');\n  var controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;\n  var scrollToIndex = useRef(null);\n\n  var _o = useSelect({\n    selectedOptions: selectedOptions,\n    updateSelectedOption: updateSelectedOption,\n    options: filteredOptions,\n    filteringType: filteringType,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    externalRef: externalRef,\n    keepOpen: keepOpen,\n    fireLoadItems: fireLoadItems,\n    setFilteringValue: setFilteringValue,\n    useInteractiveGroups: useInteractiveGroups\n  }),\n      isOpen = _o.isOpen,\n      highlightedOption = _o.highlightedOption,\n      highlightedIndex = _o.highlightedIndex,\n      getTriggerProps = _o.getTriggerProps,\n      getFilterProps = _o.getFilterProps,\n      getMenuProps = _o.getMenuProps,\n      getOptionProps = _o.getOptionProps,\n      isKeyboard = _o.isKeyboard,\n      highlightOption = _o.highlightOption,\n      announceSelected = _o.announceSelected;\n\n  var handleNativeSearch = useNativeSearch({\n    isEnabled: filteringType === 'none' && isOpen,\n    options: filteredOptions,\n    highlightOption: highlightOption,\n    highlightedOption: highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option,\n    isKeyboard: isKeyboard,\n    useInteractiveGroups: useInteractiveGroups\n  });\n  var isEmpty = !options || options.length === 0;\n  var isNoMatch = filteredOptions && filteredOptions.length === 0;\n  var dropdownStatus = useDropdownStatus({\n    statusType: statusType,\n    empty: empty,\n    loadingText: loadingText,\n    finishedText: finishedText,\n    errorText: errorText,\n    recoveryText: recoveryText,\n    isEmpty: isEmpty,\n    isNoMatch: isNoMatch,\n    noMatch: noMatch,\n    onRecoveryClick: handleRecoveryClick\n  });\n  var filter = React.createElement(Filter, __assign({\n    filteringType: filteringType,\n    placeholder: filteringPlaceholder,\n    ariaLabel: filteringAriaLabel,\n    ariaRequired: ariaRequired,\n    value: filteringValue\n  }, getFilterProps()));\n  var trigger = React.createElement(Trigger, __assign({\n    placeholder: placeholder,\n    disabled: disabled,\n    ariaLabel: ariaLabel,\n    triggerProps: getTriggerProps(disabled),\n    selectedOption: null,\n    isOpen: isOpen\n  }, formFieldContext, {\n    controlId: controlId\n  }));\n\n  var menuProps = __assign(__assign({}, getMenuProps()), {\n    onLoadMore: handleLoadMore,\n    ariaLabelledby: controlId\n  });\n\n  var announcement = useAnnouncement({\n    announceSelected: announceSelected,\n    highlightedOption: highlightedOption,\n    getParent: function getParent(option) {\n      var _a;\n\n      return (_a = parentMap.get(option)) === null || _a === void 0 ? void 0 : _a.option;\n    },\n    selectedAriaLabel: selectedAriaLabel,\n    renderHighlightedAriaLive: renderHighlightedAriaLive\n  });\n  var tokens = selectedOptions.map(function (option) {\n    return {\n      label: option.label,\n      disabled: disabled || option.disabled,\n      labelTag: option.labelTag,\n      description: option.description,\n      iconAlt: option.iconAlt,\n      iconName: option.iconName,\n      iconUrl: option.iconUrl,\n      iconSvg: option.iconSvg,\n      tags: option.tags,\n      dismissLabel: deselectAriaLabel ? deselectAriaLabel(option) : undefined\n    };\n  });\n  useEffect(function () {\n    var _a;\n\n    (_a = scrollToIndex.current) === null || _a === void 0 ? void 0 : _a.call(scrollToIndex, highlightedIndex);\n  }, [highlightedIndex]);\n  var ListComponent = virtualScroll ? VirtualList : PlainList;\n\n  var handleMouseDown = function handleMouseDown(event) {\n    var target = event.target;\n\n    if (target !== document.activeElement) {\n      // prevent currently focused element from losing it\n      event.preventDefault();\n    }\n  };\n\n  var showTokens = !hideTokens && tokens.length > 0;\n\n  var handleTokenDismiss = function handleTokenDismiss(_a) {\n    var detail = _a.detail;\n    var optionToDeselect = selectedOptions[detail.itemIndex];\n    updateSelectedOption(optionToDeselect);\n    var targetRef = getTriggerProps().ref;\n\n    if (targetRef.current) {\n      targetRef.current.focus();\n    }\n  };\n\n  var tokenGroupI18nStrings = {\n    limitShowFewer: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowFewer,\n    limitShowMore: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowMore\n  };\n  var mergedRef = useMergeRefs(rootRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(styles.root, baseProps.className),\n    onKeyPress: handleNativeSearch\n  }), React.createElement(Dropdown, {\n    open: isOpen,\n    trigger: trigger,\n    header: filter,\n    onMouseDown: handleMouseDown,\n    footer: dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: dropdownStatus.content\n    }) : null,\n    expandToViewport: expandToViewport\n  }, React.createElement(ListComponent, {\n    listBottom: !dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: dropdownStatus.content\n    }) : null,\n    menuProps: menuProps,\n    getOptionProps: getOptionProps,\n    filteredOptions: filteredOptions,\n    filteringValue: filteringValue,\n    isKeyboard: isKeyboard.current,\n    ref: scrollToIndex,\n    hasDropdownStatus: dropdownStatus.content !== null,\n    checkboxes: true,\n    useInteractiveGroups: useInteractiveGroups,\n    screenReaderContent: announcement\n  })), showTokens && React.createElement(TokenGroup, {\n    limit: tokenLimit,\n    items: tokens,\n    onDismiss: handleTokenDismiss,\n    i18nStrings: tokenGroupI18nStrings\n  }));\n});\nexport default InternalMultiselect;","map":null,"metadata":{},"sourceType":"module"}