{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport flattenChildren from 'react-keyed-flatten-children';\nexport default function InternalSpaceBetween(_a) {\n  var _b = _a.direction,\n      direction = _b === void 0 ? 'vertical' : _b,\n      size = _a.size,\n      children = _a.children,\n      __internalRootRef = _a.__internalRootRef,\n      props = __rest(_a, [\"direction\", \"size\", \"children\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(props);\n  /*\n   Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n   */\n\n  var flattenedChildren = flattenChildren(children);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, styles[direction], styles[\"\".concat(direction, \"-\").concat(size)]),\n    ref: __internalRootRef\n  }), flattenedChildren.map(function (child) {\n    // If this react child is a primitive value, the key will be undefined\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var key = child.key;\n    return React.createElement(\"div\", {\n      key: key,\n      className: clsx(styles.child, styles[\"child-\".concat(direction, \"-\").concat(size)])\n    }, child);\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}