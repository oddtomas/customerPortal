{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireCancelableEvent, isPlainLeftClick } from '../internal/events';\nimport VisualContext from '../internal/components/visual-context';\nimport Portal from '../internal/components/portal';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\nimport { useTopNavigation } from './use-top-navigation.js';\nimport Utility from './parts/utility';\nimport OverflowMenu from './parts/overflow-menu';\nimport { ButtonTrigger } from '../internal/components/menu-dropdown';\nimport styles from './styles.css.js';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nexport default function InternalTopNavigation(_a) {\n  var __internalRootRef = _a.__internalRootRef,\n      identity = _a.identity,\n      i18nStrings = _a.i18nStrings,\n      utilities = _a.utilities,\n      search = _a.search,\n      restProps = __rest(_a, [\"__internalRootRef\", \"identity\", \"i18nStrings\", \"utilities\", \"search\"]);\n\n  checkSafeUrl('TopNavigation', identity.href);\n  var baseProps = getBaseProps(restProps);\n\n  var _b = useTopNavigation({\n    identity: identity,\n    search: search,\n    utilities: utilities\n  }),\n      mainRef = _b.mainRef,\n      virtualRef = _b.virtualRef,\n      breakpoint = _b.breakpoint,\n      responsiveState = _b.responsiveState,\n      isSearchExpanded = _b.isSearchExpanded,\n      onSearchUtilityClick = _b.onSearchUtilityClick;\n\n  var _c = useState(false),\n      overflowMenuOpen = _c[0],\n      setOverflowMenuOpen = _c[1];\n\n  var overflowMenuTriggerRef = useRef(null);\n  var isNarrowViewport = breakpoint === 'default';\n  var isMediumViewport = breakpoint === 'xxs';\n  var isLargeViewport = breakpoint === 's';\n\n  var onIdentityClick = function onIdentityClick(event) {\n    if (isPlainLeftClick(event)) {\n      fireCancelableEvent(identity.onFollow, {}, event);\n    }\n  };\n\n  var toggleOverflowMenu = function toggleOverflowMenu() {\n    setOverflowMenuOpen(function (overflowMenuOpen) {\n      return !overflowMenuOpen;\n    });\n  };\n\n  var focusVisible = useFocusVisible();\n  var menuTriggerVisible = !isSearchExpanded && responsiveState.hideUtilities;\n  useEffect(function () {\n    setOverflowMenuOpen(false);\n  }, [menuTriggerVisible]);\n  useEffectOnUpdate(function () {\n    var _a;\n\n    if (!overflowMenuOpen) {\n      (_a = overflowMenuTriggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [overflowMenuOpen]); // Render the top nav twice; once as the top nav that users can see, and another\n  // \"virtual\" top nav used just for calculations. The virtual top nav doesn't react to\n  // layout changes and renders two sets of utilities: one with labels and one without.\n\n  var content = function content(isVirtual) {\n    var _a, _b, _c, _d;\n\n    var _e, _f;\n\n    var Wrapper = isVirtual ? 'div' : 'header';\n    var showIdentity = isVirtual || !isSearchExpanded;\n    var showTitle = isVirtual || !responsiveState.hideTitle;\n    var showSearchSlot = search && (isVirtual || !responsiveState.hideSearch || isSearchExpanded);\n    var showSearchUtility = isVirtual || search && responsiveState.hideSearch;\n    var showUtilities = isVirtual || !isSearchExpanded;\n    var showMenuTrigger = isVirtual || menuTriggerVisible;\n    return React.createElement(Wrapper, {\n      ref: isVirtual ? virtualRef : mainRef,\n      \"aria-hidden\": isVirtual ? true : undefined,\n      // Wrapper is an alias for \"div\" or \"header\".\n      // eslint-disable-next-line react/forbid-component-props\n      className: clsx(styles['top-navigation'], (_a = {}, _a[styles.virtual] = isVirtual, _a[styles.hidden] = isVirtual, _a[styles.narrow] = isNarrowViewport, _a[styles.medium] = isMediumViewport, _a))\n    }, React.createElement(\"div\", {\n      className: styles['padding-box']\n    }, showIdentity && React.createElement(\"div\", {\n      className: clsx(styles.identity, !identity.logo && styles['no-logo'])\n    }, React.createElement(\"a\", __assign({}, focusVisible, {\n      className: styles['identity-link'],\n      href: identity.href,\n      onClick: onIdentityClick\n    }), identity.logo && React.createElement(\"img\", {\n      role: \"img\",\n      src: (_e = identity.logo) === null || _e === void 0 ? void 0 : _e.src,\n      alt: (_f = identity.logo) === null || _f === void 0 ? void 0 : _f.alt,\n      className: clsx(styles.logo, (_b = {}, _b[styles.narrow] = isNarrowViewport, _b))\n    }), showTitle && React.createElement(\"span\", {\n      className: styles.title\n    }, identity.title))), React.createElement(\"div\", {\n      className: styles.inputs\n    }, showSearchSlot && React.createElement(\"div\", {\n      className: clsx(styles.search, !isVirtual && isSearchExpanded && styles['search-expanded'])\n    }, search)), React.createElement(\"div\", {\n      className: styles.utilities\n    }, showSearchUtility && React.createElement(\"div\", {\n      className: clsx(styles['utility-wrapper'], styles['utility-type-button'], styles['utility-type-button-link'], (_c = {}, _c[styles.narrow] = isNarrowViewport, _c[styles.medium] = isMediumViewport, _c)),\n      \"data-utility-special\": \"search\"\n    }, React.createElement(Utility, {\n      hideText: true,\n      definition: {\n        type: 'button',\n        iconName: isSearchExpanded ? 'close' : 'search',\n        ariaLabel: isSearchExpanded ? i18nStrings.searchDismissIconAriaLabel : i18nStrings.searchIconAriaLabel,\n        onClick: onSearchUtilityClick\n      }\n    })), showUtilities && utilities.filter(function (_utility, i) {\n      return isVirtual || !responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i) === -1;\n    }).map(function (utility, i) {\n      var _a;\n\n      var _b;\n\n      var hideText = !!responsiveState.hideUtilityText;\n      var isLast = (isVirtual || !showMenuTrigger) && i === utilities.length - 1;\n      var offsetRight = isLast && isLargeViewport ? 'xxl' : isLast ? 'l' : undefined;\n      return React.createElement(\"div\", {\n        key: i,\n        className: clsx(styles['utility-wrapper'], styles[\"utility-type-\".concat(utility.type)], utility.type === 'button' && styles[\"utility-type-button-\".concat((_b = utility.variant) !== null && _b !== void 0 ? _b : 'link')], (_a = {}, _a[styles.narrow] = isNarrowViewport, _a[styles.medium] = isMediumViewport, _a)),\n        \"data-utility-index\": i,\n        \"data-utility-hide\": \"\".concat(hideText)\n      }, React.createElement(Utility, {\n        hideText: hideText,\n        definition: utility,\n        offsetRight: offsetRight\n      }));\n    }), isVirtual && utilities.map(function (utility, i) {\n      var _a;\n\n      var _b;\n\n      var hideText = !responsiveState.hideUtilityText;\n      var isLast = !showMenuTrigger && i === utilities.length - 1;\n      var offsetRight = isLast && isLargeViewport ? 'xxl' : isLast ? 'l' : undefined;\n      return React.createElement(\"div\", {\n        key: i,\n        className: clsx(styles['utility-wrapper'], styles[\"utility-type-\".concat(utility.type)], utility.type === 'button' && styles[\"utility-type-button-\".concat((_b = utility.variant) !== null && _b !== void 0 ? _b : 'link')], (_a = {}, _a[styles.narrow] = isNarrowViewport, _a[styles.medium] = isMediumViewport, _a)),\n        \"data-utility-index\": i,\n        \"data-utility-hide\": \"\".concat(hideText)\n      }, React.createElement(Utility, {\n        hideText: hideText,\n        definition: utility,\n        offsetRight: offsetRight\n      }));\n    }), showMenuTrigger && React.createElement(\"div\", {\n      className: clsx(styles['utility-wrapper'], styles['utility-type-menu-dropdown'], (_d = {}, _d[styles.narrow] = isNarrowViewport, _d[styles.medium] = isMediumViewport, _d)),\n      \"data-utility-special\": \"menu-trigger\"\n    }, React.createElement(ButtonTrigger, {\n      expanded: overflowMenuOpen,\n      onClick: toggleOverflowMenu,\n      offsetRight: \"l\",\n      ref: !isVirtual ? overflowMenuTriggerRef : undefined\n    }, i18nStrings.overflowMenuTriggerText)))));\n  };\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    ref: __internalRootRef\n  }), React.createElement(VisualContext, {\n    contextName: \"top-navigation\"\n  }, content(false), React.createElement(Portal, null, content(true)), menuTriggerVisible && overflowMenuOpen && React.createElement(\"div\", {\n    className: styles['overflow-menu-drawer']\n  }, React.createElement(OverflowMenu, {\n    headerText: i18nStrings.overflowMenuTitleText,\n    dismissIconAriaLabel: i18nStrings.overflowMenuDismissIconAriaLabel,\n    backIconAriaLabel: i18nStrings.overflowMenuBackIconAriaLabel,\n    items: utilities.filter(function (utility, i) {\n      return (!responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i) !== -1) && !utility.disableUtilityCollapse;\n    }),\n    onClose: toggleOverflowMenu\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}