{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useImperativeHandle, useRef } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { InternalButton } from '../button/internal';\nimport { AdditionalInfo } from './additional-info';\nimport { Row } from './row';\nimport styles from './styles.css.js';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport InternalBox from '../box/internal';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar InternalAttributeEditor = React.forwardRef(function (_a, ref) {\n  var additionalInfo = _a.additionalInfo,\n      disableAddButton = _a.disableAddButton,\n      definition = _a.definition,\n      items = _a.items,\n      _b = _a.isItemRemovable,\n      isItemRemovable = _b === void 0 ? function () {\n    return true;\n  } : _b,\n      empty = _a.empty,\n      addButtonText = _a.addButtonText,\n      removeButtonText = _a.removeButtonText,\n      onAddButtonClick = _a.onAddButtonClick,\n      onRemoveButtonClick = _a.onRemoveButtonClick,\n      _c = _a.__internalRootRef,\n      __internalRootRef = _c === void 0 ? null : _c,\n      props = __rest(_a, [\"additionalInfo\", \"disableAddButton\", \"definition\", \"items\", \"isItemRemovable\", \"empty\", \"addButtonText\", \"removeButtonText\", \"onAddButtonClick\", \"onRemoveButtonClick\", \"__internalRootRef\"]);\n\n  var _d = useContainerBreakpoints(['default', 'xxs', 'xs']),\n      breakpoint = _d[0],\n      breakpointRef = _d[1];\n\n  var removeButtonRefs = useRef([]);\n  var baseProps = getBaseProps(props);\n  var isEmpty = items && items.length === 0;\n  useImperativeHandle(ref, function () {\n    return {\n      focusRemoveButton: function focusRemoveButton(rowIndex) {\n        var _a;\n\n        (_a = removeButtonRefs.current[rowIndex]) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n    };\n  });\n  var mergedRef = useMergeRefs(breakpointRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(baseProps.className, styles.root)\n  }), React.createElement(InternalBox, {\n    margin: {\n      bottom: 'l'\n    }\n  }, isEmpty && React.createElement(\"div\", {\n    className: styles.empty\n  }, empty), items.map(function (item, index) {\n    return React.createElement(Row, {\n      key: index,\n      index: index,\n      breakpoint: breakpoint,\n      item: item,\n      definition: definition,\n      removable: isItemRemovable(item),\n      removeButtonText: removeButtonText,\n      removeButtonRefs: removeButtonRefs.current,\n      onRemoveButtonClick: onRemoveButtonClick\n    });\n  })), React.createElement(InternalButton, {\n    className: styles['add-button'],\n    disabled: disableAddButton,\n    onClick: onAddButtonClick,\n    formAction: \"none\"\n  }, addButtonText), additionalInfo && React.createElement(AdditionalInfo, null, additionalInfo));\n});\nexport default InternalAttributeEditor;","map":null,"metadata":{},"sourceType":"module"}