{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useMemo } from 'react';\nimport { arc } from 'd3-shape';\nimport { dimensionsBySize, refreshDimensionsBySize } from './utils';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\nexport default function Segments(_a) {\n  var pieData = _a.pieData,\n      highlightedSegment = _a.highlightedSegment,\n      size = _a.size,\n      variant = _a.variant,\n      containerRef = _a.containerRef,\n      focusedSegmentRef = _a.focusedSegmentRef,\n      popoverTrackRef = _a.popoverTrackRef,\n      segmentAriaRoleDescription = _a.segmentAriaRoleDescription,\n      _onClick = _a.onClick,\n      _onMouseOver = _a.onMouseOver,\n      onMouseOut = _a.onMouseOut;\n  var isRefresh = useVisualRefresh(containerRef);\n\n  var _b = useMemo(function () {\n    var dimensions = isRefresh ? refreshDimensionsBySize[size] : dimensionsBySize[size];\n    var radius = dimensions.outerRadius;\n    var innerRadius = variant === 'pie' ? 0 : dimensions.innerRadius;\n    var cornerRadius = dimensions.cornerRadius || 0;\n    var arcFactory = arc().innerRadius(innerRadius).outerRadius(radius).cornerRadius(cornerRadius);\n    var highlightedArcFactory = arc().innerRadius(radius + 4).outerRadius(radius + 6);\n    return {\n      arcFactory: arcFactory,\n      highlightedArcFactory: highlightedArcFactory\n    };\n  }, [size, variant, isRefresh]),\n      arcFactory = _b.arcFactory,\n      highlightedArcFactory = _b.highlightedArcFactory;\n\n  var centroid = useMemo(function () {\n    for (var _i = 0, pieData_1 = pieData; _i < pieData_1.length; _i++) {\n      var datum = pieData_1[_i];\n\n      if (datum.data.datum === highlightedSegment) {\n        var _a = arcFactory.centroid(datum),\n            centroidLeft = _a[0],\n            centroidTop = _a[1];\n\n        return {\n          cx: centroidLeft,\n          cy: centroidTop\n        };\n      }\n    }\n\n    return null;\n  }, [highlightedSegment, pieData, arcFactory]);\n  return React.createElement(\"g\", {\n    onMouseLeave: function onMouseLeave() {\n      return onMouseOut();\n    }\n  }, pieData.map(function (datum) {\n    var _a;\n\n    var isHighlighted = highlightedSegment === datum.data.datum;\n    var isDimmed = highlightedSegment !== null && !isHighlighted;\n    var arcPath = arcFactory(datum) || undefined;\n    var highlightedPath = highlightedArcFactory(datum) || undefined;\n    return React.createElement(\"g\", {\n      key: datum.data.index,\n      onClick: function onClick() {\n        return _onClick(datum.data);\n      },\n      onMouseOver: function onMouseOver() {\n        return _onMouseOver(datum.data);\n      },\n      className: clsx(styles.segment, (_a = {}, _a[styles['segment--highlighted']] = isHighlighted, _a[styles['segment--dimmed']] = isDimmed, _a)),\n      ref: isHighlighted ? focusedSegmentRef : undefined,\n      \"aria-label\": \"\".concat(datum.data.datum.title, \" (\").concat(datum.data.datum.value, \")\"),\n      role: \"button\",\n      \"aria-roledescription\": segmentAriaRoleDescription\n    }, React.createElement(\"path\", {\n      d: arcPath,\n      fill: datum.data.color,\n      className: styles.segment__path,\n      \"aria-hidden\": \"true\"\n    }), React.createElement(\"path\", {\n      d: highlightedPath,\n      fill: datum.data.color,\n      className: clsx(styles.segment__path, styles.segment__highlight),\n      \"aria-hidden\": \"true\"\n    }));\n  }), React.createElement(\"circle\", __assign({}, centroid, {\n    ref: popoverTrackRef,\n    r: \"1\",\n    opacity: \"0\",\n    \"aria-hidden\": \"true\"\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}