{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport LineSeries from './line-series';\nimport BarSeries from './bar-series';\nimport styles from './styles.css.js';\nimport { calculateOffsetMaps } from './utils';\nexport default function DataSeries(_a) {\n  var axis = _a.axis,\n      plotHeight = _a.plotHeight,\n      plotWidth = _a.plotWidth,\n      highlightedGroupIndex = _a.highlightedGroupIndex,\n      highlightedSeries = _a.highlightedSeries,\n      stackedBars = _a.stackedBars,\n      isGroupNavigation = _a.isGroupNavigation,\n      visibleSeries = _a.visibleSeries,\n      xScale = _a.xScale,\n      yScale = _a.yScale;\n  var chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n  var stackedBarOffsetMaps = useMemo(function () {\n    if (!stackedBars) {\n      return [];\n    }\n\n    var barData = [];\n    visibleSeries.forEach(function (_a) {\n      var series = _a.series;\n\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      }\n    });\n    return calculateOffsetMaps(barData);\n  }, [visibleSeries, stackedBars]);\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: plotWidth,\n    height: plotHeight\n  }))), React.createElement(\"g\", {\n    \"aria-hidden\": isGroupNavigation ? true : undefined,\n    role: \"group\"\n  }, visibleSeries.map(function (_a, index) {\n    var _b;\n\n    var series = _a.series,\n        color = _a.color;\n    var isHighlighted = series === highlightedSeries;\n    var isDimmed = !!highlightedSeries && !isHighlighted;\n\n    switch (series.type) {\n      case 'line':\n      case 'threshold':\n        {\n          return React.createElement(\"g\", {\n            key: index,\n            role: \"group\",\n            \"aria-label\": series.title,\n            className: clsx(styles.series, styles[\"series--\".concat(series.type)], (_b = {}, _b[styles['series--highlighted']] = isHighlighted, _b[styles['series--dimmed']] = isDimmed, _b))\n          }, React.createElement(LineSeries, {\n            axis: axis,\n            series: series,\n            color: color,\n            xScale: xScale,\n            yScale: yScale,\n            chartAreaClipPath: chartAreaClipPath\n          }));\n        }\n\n      case 'bar':\n        return React.createElement(BarSeries, {\n          key: index,\n          axis: axis,\n          series: series,\n          color: color,\n          totalSeriesCount: visibleSeries.filter(function (s) {\n            return s.series.type === 'bar';\n          }).length,\n          seriesIndex: index,\n          xScale: xScale,\n          yScale: yScale,\n          plotSize: axis === 'y' ? plotWidth : plotHeight,\n          highlighted: isHighlighted,\n          dimmed: isDimmed,\n          chartAreaClipPath: chartAreaClipPath,\n          stackedBarOffsets: stackedBarOffsetMaps[index],\n          highlightedGroupIndex: highlightedGroupIndex\n        });\n    }\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}