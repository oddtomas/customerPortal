{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport styles from '../../../styles.css.js';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { getDateLabel } from '../../utils/intl';\nimport clsx from 'clsx';\n\nvar GridDay = function GridDay(_a) {\n  var _b;\n\n  var locale = _a.locale,\n      baseDate = _a.baseDate,\n      date = _a.date,\n      selectedDate = _a.selectedDate,\n      focusedDate = _a.focusedDate,\n      isDateEnabled = _a.isDateEnabled,\n      todayAriaLabel = _a.todayAriaLabel,\n      onSelectDate = _a.onSelectDate,\n      isDateInLastWeek = _a.isDateInLastWeek;\n  var labels = [getDateLabel(locale, date)];\n  var isFocusable = !!focusedDate && isSameDay(date, focusedDate);\n  var isSelected = !!selectedDate && isSameDay(date, selectedDate);\n  var isEnabled = !isDateEnabled || isDateEnabled(date);\n  var isDateOnSameDay = isSameDay(date, new Date());\n  var computedAttributes = {};\n  var classNames = clsx(styles['calendar-day'], (_b = {}, _b[styles['calendar-day-in-last-week']] = isDateInLastWeek, _b[styles['calendar-day-current-month']] = isSameMonth(date, baseDate), _b[styles['calendar-day-enabled']] = isEnabled, _b[styles['calendar-day-selected']] = isSelected, _b[styles['calendar-day-today']] = isDateOnSameDay, _b[styles['calendar-day-focusable']] = isFocusable && isEnabled, _b));\n\n  if (isSelected) {\n    computedAttributes['aria-current'] = 'date';\n  }\n\n  if (isDateOnSameDay) {\n    labels.push(todayAriaLabel);\n  }\n\n  if (isEnabled) {\n    computedAttributes.onClick = function () {\n      return onSelectDate(date);\n    };\n\n    computedAttributes.tabIndex = -1;\n  } else {\n    computedAttributes['aria-disabled'] = true;\n  }\n\n  if (isFocusable && isEnabled) {\n    computedAttributes.tabIndex = 0;\n  }\n\n  return React.createElement(\"div\", __assign({\n    className: classNames,\n    \"aria-label\": labels.join('. '),\n    role: \"button\"\n  }, computedAttributes), React.createElement(\"span\", {\n    className: styles['day-inner']\n  }, date.getDate()));\n};\n\nexport default GridDay;","map":null,"metadata":{},"sourceType":"module"}