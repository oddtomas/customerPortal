{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport InternalIcon from '../icon/internal';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireCancelableEvent, isPlainLeftClick } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { KeyCode } from '../internal/keycode';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nvar InternalLink = React.forwardRef(function (_a, ref) {\n  var _b = _a.variant,\n      variant = _b === void 0 ? 'secondary' : _b,\n      _c = _a.fontSize,\n      fontSize = _c === void 0 ? 'body-m' : _c,\n      _d = _a.color,\n      color = _d === void 0 ? 'normal' : _d,\n      _e = _a.external,\n      external = _e === void 0 ? false : _e,\n      target = _a.target,\n      href = _a.href,\n      rel = _a.rel,\n      ariaLabel = _a.ariaLabel,\n      externalIconAriaLabel = _a.externalIconAriaLabel,\n      onFollow = _a.onFollow,\n      children = _a.children,\n      _f = _a.__internalRootRef,\n      __internalRootRef = _f === void 0 ? null : _f,\n      props = __rest(_a, [\"variant\", \"fontSize\", \"color\", \"external\", \"target\", \"href\", \"rel\", \"ariaLabel\", \"externalIconAriaLabel\", \"onFollow\", \"children\", \"__internalRootRef\"]);\n\n  checkSafeUrl('Link', href);\n  var isButton = !href;\n  var specialStyles = ['top-navigation', 'link', 'recovery'];\n  var hasSpecialStyle = specialStyles.indexOf(variant) > -1;\n  var focusVisible = useFocusVisible();\n  var baseProps = getBaseProps(props);\n  var anchorTarget = target !== null && target !== void 0 ? target : external ? '_blank' : undefined;\n  var anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === '_blank' ? 'noopener noreferrer' : undefined;\n\n  var fireFollowEvent = function fireFollowEvent(event) {\n    fireCancelableEvent(onFollow, {\n      href: href,\n      external: external,\n      target: anchorTarget\n    }, event);\n  };\n\n  var handleLinkClick = function handleLinkClick(event) {\n    if (isPlainLeftClick(event)) {\n      fireFollowEvent(event);\n    }\n  };\n\n  var handleButtonClick = function handleButtonClick(event) {\n    fireFollowEvent(event);\n  };\n\n  var handleButtonKeyDown = function handleButtonKeyDown(event) {\n    // Prevent the page from scrolling down when spacebar is pressed.\n    if (event.keyCode === KeyCode.space) {\n      event.preventDefault();\n    }\n  };\n\n  var handleButtonKeyUp = function handleButtonKeyUp(event) {\n    if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {\n      fireFollowEvent(event);\n    }\n  };\n\n  var linkRef = useRef(null);\n  var isVisualRefresh = useVisualRefresh(linkRef);\n  useForwardFocus(ref, linkRef); // Visual refresh should only add styles to buttons that don't already have unique styles (e.g. primary/secondary variants)\n\n  var applyButtonStyles = isButton && isVisualRefresh && !hasSpecialStyle;\n\n  var sharedProps = __assign(__assign(__assign({}, focusVisible), baseProps), {\n    // https://github.com/microsoft/TypeScript/issues/36659\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: useMergeRefs(linkRef, __internalRootRef),\n    className: clsx(styles.link, baseProps.className, applyButtonStyles ? styles.button : null, styles[getVariantStyle(variant)], styles[getFontSizeStyle(variant, fontSize)], styles[getColorStyle(variant, color)]),\n    'aria-label': ariaLabel\n  });\n\n  var content = React.createElement(React.Fragment, null, children, external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n    className: styles.icon,\n    \"aria-label\": externalIconAriaLabel,\n    role: externalIconAriaLabel ? 'img' : undefined\n  }, React.createElement(InternalIcon, {\n    name: \"external\",\n    size: \"inherit\"\n  }))));\n\n  if (isButton) {\n    return React.createElement(\"a\", __assign({}, sharedProps, {\n      role: \"button\",\n      tabIndex: 0,\n      onKeyDown: handleButtonKeyDown,\n      onKeyUp: handleButtonKeyUp,\n      onClick: handleButtonClick\n    }), content);\n  }\n\n  return (// we dynamically set proper rel in the code above\n    // eslint-disable-next-line react/jsx-no-target-blank\n    React.createElement(\"a\", __assign({}, sharedProps, {\n      target: anchorTarget,\n      rel: anchorRel,\n      href: href,\n      onClick: handleLinkClick\n    }), content)\n  );\n});\n\nfunction getVariantStyle(variant) {\n  return \"variant-\".concat(variant.replace(/^awsui-/, ''));\n}\n\nfunction getFontSizeStyle(variant, fontSize) {\n  switch (variant) {\n    case 'info':\n      return 'font-size-body-s';\n\n    case 'awsui-value-large':\n      return 'font-size-display-l';\n\n    default:\n      return \"font-size-\".concat(fontSize);\n  }\n}\n\nfunction getColorStyle(variant, color) {\n  return \"color-\".concat(variant === 'info' ? 'normal' : color);\n}\n\nexport default InternalLink;","map":null,"metadata":{},"sourceType":"module"}