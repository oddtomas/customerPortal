{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport InternalIcon from '../icon/internal';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport styles from './styles.css.js';\nimport { getPaginationState, range } from './utils';\nvar defaultAriaLabels = {\n  nextPageLabel: '',\n  previousPageLabel: '',\n  pageLabel: function pageLabel(pageNumber) {\n    return \"\".concat(pageNumber);\n  }\n};\n\nfunction PageButton(_a) {\n  var className = _a.className,\n      ariaLabel = _a.ariaLabel,\n      disabled = _a.disabled,\n      pageIndex = _a.pageIndex,\n      _b = _a.isCurrent,\n      isCurrent = _b === void 0 ? false : _b,\n      children = _a.children,\n      onClick = _a.onClick;\n  var focusVisible = useFocusVisible();\n\n  function handleClick(event) {\n    event.preventDefault();\n    onClick(pageIndex);\n  }\n\n  return React.createElement(\"li\", {\n    className: styles['page-item']\n  }, React.createElement(\"button\", __assign({}, focusVisible, {\n    className: clsx(className, styles.button, disabled && styles['button-disabled'], isCurrent && styles['button-current']),\n    type: \"button\",\n    \"aria-label\": ariaLabel,\n    tabIndex: disabled ? -1 : 0,\n    disabled: disabled,\n    onClick: handleClick,\n    \"aria-current\": isCurrent\n  }), children));\n}\n\nfunction PageNumber(_a) {\n  var pageIndex = _a.pageIndex,\n      rest = __rest(_a, [\"pageIndex\"]);\n\n  return React.createElement(PageButton, __assign({\n    className: styles['page-number'],\n    pageIndex: pageIndex\n  }, rest), pageIndex);\n}\n\nexport default function InternalPagination(_a) {\n  var _b, _c, _d;\n\n  var openEnd = _a.openEnd,\n      currentPageIndex = _a.currentPageIndex,\n      ariaLabels = _a.ariaLabels,\n      pagesCount = _a.pagesCount,\n      disabled = _a.disabled,\n      onChange = _a.onChange,\n      onNextPageClick = _a.onNextPageClick,\n      onPreviousPageClick = _a.onPreviousPageClick,\n      _e = _a.__internalRootRef,\n      __internalRootRef = _e === void 0 ? null : _e,\n      rest = __rest(_a, [\"openEnd\", \"currentPageIndex\", \"ariaLabels\", \"pagesCount\", \"disabled\", \"onChange\", \"onNextPageClick\", \"onPreviousPageClick\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(rest);\n  var pageNumberLabelFn = (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.pageLabel) !== null && _b !== void 0 ? _b : defaultAriaLabels.pageLabel;\n\n  var _f = getPaginationState(currentPageIndex, pagesCount, openEnd),\n      leftDots = _f.leftDots,\n      leftIndex = _f.leftIndex,\n      rightIndex = _f.rightIndex,\n      rightDots = _f.rightDots;\n\n  function handlePrevPageClick(requestedPageIndex) {\n    handlePageClick(requestedPageIndex);\n    fireNonCancelableEvent(onPreviousPageClick, {\n      requestedPageAvailable: true,\n      requestedPageIndex: requestedPageIndex\n    });\n  }\n\n  function handleNextPageClick(requestedPageIndex) {\n    handlePageClick(requestedPageIndex);\n    fireNonCancelableEvent(onNextPageClick, {\n      requestedPageAvailable: currentPageIndex < pagesCount,\n      requestedPageIndex: requestedPageIndex\n    });\n  }\n\n  function handlePageClick(requestedPageIndex) {\n    fireNonCancelableEvent(onChange, {\n      currentPageIndex: requestedPageIndex\n    });\n  }\n\n  return React.createElement(\"ul\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, disabled && styles['root-disabled']),\n    ref: __internalRootRef\n  }), React.createElement(PageButton, {\n    className: styles.arrow,\n    pageIndex: currentPageIndex - 1,\n    ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.previousPageLabel) !== null && _c !== void 0 ? _c : defaultAriaLabels.nextPageLabel,\n    disabled: disabled || currentPageIndex === 1,\n    onClick: handlePrevPageClick\n  }, React.createElement(InternalIcon, {\n    name: \"angle-left\",\n    variant: disabled ? 'disabled' : 'normal'\n  })), React.createElement(PageNumber, {\n    pageIndex: 1,\n    isCurrent: currentPageIndex === 1,\n    disabled: disabled,\n    ariaLabel: pageNumberLabelFn(1),\n    onClick: handlePageClick\n  }), leftDots && React.createElement(\"li\", {\n    className: styles.dots\n  }, \"...\"), range(leftIndex, rightIndex).map(function (pageIndex) {\n    return React.createElement(PageNumber, {\n      key: pageIndex,\n      isCurrent: currentPageIndex === pageIndex,\n      pageIndex: pageIndex,\n      disabled: disabled,\n      ariaLabel: pageNumberLabelFn(pageIndex),\n      onClick: handlePageClick\n    });\n  }), rightDots && React.createElement(\"li\", {\n    className: styles.dots\n  }, \"...\"), !openEnd && pagesCount > 1 && React.createElement(PageNumber, {\n    isCurrent: currentPageIndex === pagesCount,\n    pageIndex: pagesCount,\n    disabled: disabled,\n    ariaLabel: pageNumberLabelFn(pagesCount),\n    onClick: handlePageClick\n  }), React.createElement(PageButton, {\n    className: styles.arrow,\n    pageIndex: currentPageIndex + 1,\n    ariaLabel: (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.nextPageLabel) !== null && _d !== void 0 ? _d : defaultAriaLabels.nextPageLabel,\n    disabled: disabled || !openEnd && (pagesCount === 0 || currentPageIndex === pagesCount),\n    onClick: handleNextPageClick\n  }, React.createElement(InternalIcon, {\n    name: \"angle-right\",\n    variant: disabled ? 'disabled' : 'normal'\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}