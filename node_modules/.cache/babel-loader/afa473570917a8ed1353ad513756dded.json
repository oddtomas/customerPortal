{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport RadioButton from '../radio-group/radio-button';\nimport styles from './styles.css.js';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar COLUMN_TRIGGERS = ['default', 'xxs', 'xs'];\nexport default function InternalTiles(_a) {\n  var value = _a.value,\n      items = _a.items,\n      ariaLabel = _a.ariaLabel,\n      ariaRequired = _a.ariaRequired,\n      columns = _a.columns,\n      onChange = _a.onChange,\n      _b = _a.__internalRootRef,\n      __internalRootRef = _b === void 0 ? null : _b,\n      rest = __rest(_a, [\"value\", \"items\", \"ariaLabel\", \"ariaRequired\", \"columns\", \"onChange\", \"__internalRootRef\"]);\n\n  var getColumns = function getColumns() {\n    if (columns) {\n      return columns;\n    }\n\n    var nItems = items ? items.length : 0;\n    var columnsLookup = {\n      0: 1,\n      1: 1,\n      2: 2,\n      4: 2,\n      8: 2\n    };\n    return columnsLookup[nItems] || 3;\n  };\n\n  var _c = useFormFieldContext(rest),\n      ariaDescribedby = _c.ariaDescribedby,\n      ariaLabelledby = _c.ariaLabelledby;\n\n  var baseProps = getBaseProps(rest);\n  var generatedName = useUniqueId('awsui-tiles-');\n  var nColumns = getColumns();\n\n  var _d = useContainerBreakpoints(COLUMN_TRIGGERS),\n      breakpoint = _d[0],\n      ref = _d[1];\n\n  var mergedRef = useMergeRefs(ref, __internalRootRef);\n  return React.createElement(\"div\", __assign({\n    role: \"radiogroup\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-required\": ariaRequired\n  }, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef\n  }), React.createElement(\"div\", {\n    className: clsx(styles.columns, styles[\"column-\".concat(nColumns)])\n  }, items && items.map(function (item) {\n    var _a, _b, _c, _d, _e;\n\n    var controlId = item.controlId || \"\".concat(generatedName, \"-value-\").concat(item.value);\n    return React.createElement(\"label\", {\n      className: clsx(styles['tile-container'], (_a = {}, _a[styles['has-metadata']] = item.description || item.image, _a), (_b = {}, _b[styles.selected] = item.value === value, _b), (_c = {}, _c[styles.disabled] = !!item.disabled, _c), styles[\"breakpoint-\".concat(breakpoint)]),\n      key: item.value,\n      \"data-value\": item.value,\n      htmlFor: controlId,\n      id: \"\".concat(controlId, \"-wrapper\")\n    }, React.createElement(\"div\", {\n      className: clsx(styles.control, (_d = {}, _d[styles['no-image']] = !item.image, _d))\n    }, React.createElement(RadioButton, {\n      checked: item.value === value,\n      name: generatedName,\n      withoutLabel: true,\n      value: item.value,\n      label: item.label,\n      description: item.description,\n      disabled: item.disabled,\n      onChange: onChange,\n      controlId: controlId\n    })), item.image && React.createElement(\"div\", {\n      className: clsx(styles.image, (_e = {}, _e[styles.disabled] = !!item.disabled, _e))\n    }, item.image));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}