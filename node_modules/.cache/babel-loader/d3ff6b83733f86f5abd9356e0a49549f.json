{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport InternalLink from '../../link/internal';\nimport InternalIcon from '../../icon/internal';\nimport MenuDropdown from '../../internal/components/menu-dropdown';\nimport styles from '../styles.css.js';\nimport { checkSafeUrl } from '../../internal/utils/check-safe-url';\nexport default function Utility(_a) {\n  var _b;\n\n  var hideText = _a.hideText,\n      definition = _a.definition,\n      offsetRight = _a.offsetRight;\n  var hasIcon = !!definition.iconName || !!definition.iconUrl || !!definition.iconAlt || !!definition.iconSvg;\n  var shouldHideText = hideText && !definition.disableTextCollapse && hasIcon;\n  var ariaLabel = (_b = definition.ariaLabel) !== null && _b !== void 0 ? _b : definition.text;\n\n  if (definition.type === 'button') {\n    checkSafeUrl('TopNavigation', definition.href);\n\n    if (definition.variant === 'primary-button') {\n      return React.createElement(\"span\", {\n        className: styles[\"offset-right-\".concat(offsetRight)]\n      }, React.createElement(InternalButton, {\n        variant: \"primary\",\n        href: definition.href,\n        target: definition.external ? '_blank' : undefined,\n        onClick: definition.onClick,\n        ariaLabel: ariaLabel,\n        iconName: definition.iconName,\n        iconUrl: definition.iconUrl,\n        iconAlt: definition.iconAlt,\n        iconSvg: definition.iconSvg\n      }, shouldHideText ? null : React.createElement(React.Fragment, null, definition.text, definition.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n        className: clsx(styles['utility-button-external-icon'], styles[\"offset-right-\".concat(offsetRight)]),\n        \"aria-label\": definition.externalIconAriaLabel,\n        role: definition.externalIconAriaLabel ? 'img' : undefined\n      }, React.createElement(InternalIcon, {\n        name: \"external\"\n      }))))));\n    } else {\n      // Link\n      return React.createElement(\"span\", {\n        className: styles[\"offset-right-\".concat(offsetRight)]\n      }, React.createElement(InternalLink, {\n        variant: \"top-navigation\",\n        href: definition.href,\n        target: definition.external ? '_blank' : undefined,\n        onFollow: definition.onClick,\n        ariaLabel: ariaLabel\n      }, hasIcon && React.createElement(InternalIcon, {\n        name: definition.iconName,\n        url: definition.iconUrl,\n        alt: definition.iconAlt,\n        svg: definition.iconSvg,\n        badge: definition.badge\n      }), !shouldHideText && definition.text && React.createElement(\"span\", {\n        className: hasIcon ? styles['utility-link-icon'] : undefined\n      }, definition.text), definition.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n        role: definition.externalIconAriaLabel ? 'img' : undefined,\n        \"aria-label\": definition.externalIconAriaLabel\n      }, React.createElement(InternalIcon, {\n        name: \"external\",\n        size: \"normal\"\n      })))));\n    }\n  } else if (definition.type === 'menu-dropdown') {\n    var title = definition.title || definition.text;\n    var shouldShowTitle = shouldHideText || !definition.text;\n    checkSafeUrlRecursively(definition.items);\n    return React.createElement(MenuDropdown, __assign({}, definition, {\n      title: shouldShowTitle ? title : '',\n      ariaLabel: ariaLabel,\n      offsetRight: offsetRight\n    }), !shouldHideText && definition.text);\n  }\n\n  return null;\n}\n\nfunction checkSafeUrlRecursively(itemOrGroup) {\n  for (var _i = 0, itemOrGroup_1 = itemOrGroup; _i < itemOrGroup_1.length; _i++) {\n    var item = itemOrGroup_1[_i];\n    checkSafeUrl('TopNavigation', item.href);\n\n    if ('items' in item) {\n      checkSafeUrlRecursively(item.items);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}