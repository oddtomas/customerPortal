{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { Transition } from '../../internal/components/transition';\nimport { findUpUntil } from '../../internal/utils/dom';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The Navigation component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the show navigation form that contains the trigger for the drawer in large viewports;\n * the navigation, or drawer, that contains the hide navigation form and the children\n * passed through the API;\n */\n\nexport default function Navigation() {\n  var _a = useContext(AppLayoutContext),\n      ariaLabels = _a.ariaLabels,\n      handleNavigationClick = _a.handleNavigationClick,\n      isMobile = _a.isMobile,\n      isNavigationOpen = _a.isNavigationOpen,\n      navigation = _a.navigation,\n      navigationHide = _a.navigationHide,\n      navigationWidth = _a.navigationWidth,\n      isToolsOpen = _a.isToolsOpen,\n      isAnyPanelOpen = _a.isAnyPanelOpen,\n      toolsHide = _a.toolsHide;\n\n  var focusRefs = useFocusControl(isNavigationOpen);\n\n  if (navigationHide) {\n    return null;\n  } // Close the Navigation drawer on mobile when a user clicks a link inside.\n\n\n  var onNavigationClick = function onNavigationClick(event) {\n    var hasLink = findUpUntil(event.target, function (node) {\n      return node.tagName === 'A' && !!node.href;\n    });\n\n    if (hasLink && isMobile) {\n      handleNavigationClick(false);\n    }\n  };\n\n  var isUnfocusable = isMobile && isAnyPanelOpen && isToolsOpen && !toolsHide;\n  return React.createElement(Transition, {\n    \"in\": isNavigationOpen\n  }, function (state, transitionEventsRef) {\n    var _a, _b, _c, _d;\n\n    var _e, _f, _g;\n\n    return React.createElement(\"div\", {\n      className: clsx(styles['navigation-container'], (_a = {}, _a[testutilStyles['drawer-closed']] = !isNavigationOpen, _a[styles.unfocusable] = isUnfocusable, _a)),\n      // Overwrite the default nav width (depends on breakpoints) only when the `navigationWidth` property is set.\n      style: __assign({}, navigationWidth && (_b = {}, _b[customCssProps.navigationWidth] = \"\".concat(navigationWidth, \"px\"), _b))\n    }, !isMobile && React.createElement(\"nav\", {\n      \"aria-hidden\": isMobile || isNavigationOpen ? true : false,\n      \"aria-label\": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _e !== void 0 ? _e : undefined,\n      className: clsx(styles['show-navigation'], (_c = {}, _c[styles.animating] = state === 'exiting', _c[styles['is-navigation-open']] = isNavigationOpen, _c)),\n      ref: state === 'exiting' ? transitionEventsRef : undefined\n    }, React.createElement(TriggerButton, {\n      ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle,\n      iconName: \"menu\",\n      className: testutilStyles['navigation-toggle'],\n      onClick: function onClick() {\n        return handleNavigationClick(true);\n      },\n      ref: focusRefs.toggle\n    })), React.createElement(\"nav\", {\n      \"aria-label\": (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _f !== void 0 ? _f : undefined,\n      className: clsx(styles.navigation, (_d = {}, _d[styles.animating] = state === 'entering', _d[styles['is-navigation-open']] = isNavigationOpen, _d), testutilStyles.navigation),\n      ref: state !== 'exiting' ? transitionEventsRef : undefined,\n      \"aria-hidden\": !isNavigationOpen,\n      onClick: function onClick(event) {\n        onNavigationClick && onNavigationClick(event);\n      }\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, React.createElement(\"div\", {\n      className: clsx(styles['hide-navigation'])\n    }, React.createElement(InternalButton, {\n      ariaLabel: (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _g !== void 0 ? _g : undefined,\n      iconName: isMobile ? 'close' : 'angle-left',\n      onClick: function onClick() {\n        return handleNavigationClick(false);\n      },\n      variant: \"icon\",\n      formAction: \"none\",\n      className: testutilStyles['navigation-close'],\n      ref: focusRefs.close\n    })), navigation)));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}