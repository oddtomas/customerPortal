{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../../hooks/focus-visible';\nimport { useUniqueId } from '../../hooks/use-unique-id';\n\nfunction joinString(values) {\n  return values.filter(function (value) {\n    return !!value;\n  }).join(' ');\n}\n\nexport default function AbstractSwitch(_a) {\n  var _b, _c;\n\n  var controlId = _a.controlId,\n      controlClassName = _a.controlClassName,\n      disabled = _a.disabled,\n      nativeControl = _a.nativeControl,\n      styledControl = _a.styledControl,\n      label = _a.label,\n      description = _a.description,\n      descriptionBottomPadding = _a.descriptionBottomPadding,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescribedby = _a.ariaDescribedby,\n      withoutLabel = _a.withoutLabel,\n      __internalRootRef = _a.__internalRootRef,\n      rest = __rest(_a, [\"controlId\", \"controlClassName\", \"disabled\", \"nativeControl\", \"styledControl\", \"label\", \"description\", \"descriptionBottomPadding\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescribedby\", \"withoutLabel\", \"__internalRootRef\"]);\n\n  var uniqueId = useUniqueId();\n  var id = controlId || uniqueId;\n  var focusVisible = useFocusVisible();\n  var wrapperId = \"\".concat(id, \"-wrapper\");\n  var labelId = \"\".concat(id, \"-label\");\n  var descriptionId = \"\".concat(id, \"-description\");\n  var WrapperElement = withoutLabel ? 'div' : 'label';\n  var wrapperAttributes = {};\n\n  if (!withoutLabel) {\n    wrapperAttributes.id = wrapperId;\n    wrapperAttributes.htmlFor = id;\n  }\n\n  var ariaLabelledByIds = [];\n\n  if (label) {\n    ariaLabelledByIds.push(labelId);\n  }\n\n  if (ariaLabelledby) {\n    ariaLabelledByIds.push(ariaLabelledby);\n  }\n\n  var ariaDescriptons = [];\n\n  if (ariaDescribedby) {\n    ariaDescriptons.push(ariaDescribedby);\n  }\n\n  if (description) {\n    ariaDescriptons.push(descriptionId);\n  }\n\n  return React.createElement(\"div\", __assign({}, rest, {\n    className: clsx(styles.wrapper, rest.className),\n    ref: __internalRootRef\n  }), React.createElement(WrapperElement, __assign({}, wrapperAttributes, {\n    className: styles['label-wrapper'],\n    \"aria-disabled\": disabled ? 'true' : undefined\n  }), React.createElement(\"div\", {\n    className: clsx(styles.control, controlClassName)\n  }, styledControl, nativeControl(__assign(__assign({}, focusVisible), {\n    id: id,\n    disabled: disabled,\n    'aria-describedby': ariaDescriptons.length ? joinString(ariaDescriptons) : undefined,\n    'aria-labelledby': ariaLabelledByIds.length ? joinString(ariaLabelledByIds) : undefined,\n    'aria-label': ariaLabel\n  })), React.createElement(\"div\", {\n    className: styles.outline\n  })), React.createElement(\"div\", {\n    className: clsx(styles.content, !label && !description && styles['empty-content'])\n  }, label && React.createElement(\"div\", {\n    id: labelId,\n    className: clsx(styles.label, (_b = {}, _b[styles['label-disabled']] = disabled, _b))\n  }, label), description && React.createElement(\"div\", {\n    id: descriptionId,\n    className: clsx(styles.description, (_c = {}, _c[styles['description-disabled']] = disabled, _c[styles['description-bottom-padding']] = descriptionBottomPadding, _c))\n  }, description))));\n}","map":null,"metadata":{},"sourceType":"module"}