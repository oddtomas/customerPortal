{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { usePrevious } from '../../internal/hooks/use-previous';\n\nvar AsyncStore =\n/** @class */\nfunction () {\n  function AsyncStore(state) {\n    this._listeners = [];\n    this._state = state;\n  }\n\n  AsyncStore.prototype.get = function () {\n    return this._state;\n  };\n\n  AsyncStore.prototype.set = function (cb) {\n    var _this = this;\n\n    var prevState = this._state;\n    var newState = cb(prevState);\n    this._state = newState;\n    unstable_batchedUpdates(function () {\n      for (var _i = 0, _a = _this._listeners; _i < _a.length; _i++) {\n        var _b = _a[_i],\n            selector = _b[0],\n            listener = _b[1];\n\n        if (selector(prevState) !== selector(newState)) {\n          listener(newState, prevState);\n        }\n      }\n    });\n  };\n\n  AsyncStore.prototype.subscribe = function (selector, listener) {\n    var _this = this;\n\n    this._listeners.push([selector, listener]);\n\n    return function () {\n      return _this.unsubscribe(listener);\n    };\n  };\n\n  AsyncStore.prototype.unsubscribe = function (listener) {\n    for (var index = 0; index < this._listeners.length; index++) {\n      var _a = this._listeners[index],\n          storedListener = _a[1];\n\n      if (storedListener === listener) {\n        this._listeners.splice(index, 1);\n\n        break;\n      }\n    }\n  };\n\n  return AsyncStore;\n}();\n\nexport default AsyncStore;\nexport function useReaction(store, selector, effect) {\n  useLayoutEffect(function () {\n    var unsubscribe = store.subscribe(selector, function (newState, prevState) {\n      return effect(selector(newState), selector(prevState));\n    });\n    return unsubscribe;\n  }, // ignoring selector and effect as they are expected to stay constant\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [store]);\n}\nexport function useSelector(store, selector) {\n  var _a = useState(selector(store.get())),\n      state = _a[0],\n      setState = _a[1];\n\n  useReaction(store, selector, function (newState) {\n    setState(newState);\n  }); // When store changes we need the state to be updated synchronously to avoid inconsistencies.\n\n  var prevStore = usePrevious(store);\n\n  if (prevStore !== null && prevStore !== store) {\n    return selector(store.get());\n  }\n\n  return state;\n}","map":null,"metadata":{},"sourceType":"module"}