{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { nodeContains } from '../../internal/utils/dom';\nimport styles from '../styles.css.js';\nvar MAX_HOVER_MARGIN = 6;\nexport function useMouseHover(_a) {\n  var plotRef = _a.plotRef,\n      scaledSeries = _a.scaledSeries,\n      barGroups = _a.barGroups,\n      highlightSeries = _a.highlightSeries,\n      highlightPoint = _a.highlightPoint,\n      highlightGroup = _a.highlightGroup,\n      clearHighlightedSeries = _a.clearHighlightedSeries,\n      isGroupNavigation = _a.isGroupNavigation,\n      isHandlersDisabled = _a.isHandlersDisabled;\n\n  var _b = useState(null),\n      verticalMarkerLeft = _b[0],\n      setVerticalMarkerLeft = _b[1];\n\n  var onSeriesMouseMove = function onSeriesMouseMove(event) {\n    var svgRect = event.target.getBoundingClientRect();\n    var offsetX = event.clientX - svgRect.left;\n    var offsetY = event.clientY - svgRect.top;\n    var closestX = scaledSeries.map(function (v) {\n      return v.x;\n    }).reduce(function (prev, curr) {\n      return Math.abs(curr - offsetX) < Math.abs(prev - offsetX) ? curr : prev;\n    }, -Infinity);\n    var closestY = scaledSeries.filter(function (v) {\n      return v.x === closestX || v.series.type === 'threshold';\n    }).map(function (v) {\n      return v.y;\n    }).reduce(function (prev, curr) {\n      return Math.abs(curr - offsetY) < Math.abs(prev - offsetY) ? curr : prev;\n    }, -Infinity);\n\n    if (isFinite(closestX)) {\n      setVerticalMarkerLeft(closestX);\n\n      if (isFinite(closestY) && Math.abs(offsetX - closestX) < MAX_HOVER_MARGIN && Math.abs(offsetY - closestY) < MAX_HOVER_MARGIN) {\n        var _a = scaledSeries.filter(function (s) {\n          return (s.x === closestX || s.series.type === 'threshold') && s.y === closestY;\n        })[0],\n            color = _a.color,\n            datum = _a.datum,\n            series = _a.series;\n        highlightSeries(series);\n        highlightPoint({\n          x: closestX,\n          y: closestY,\n          color: color,\n          datum: datum,\n          series: series\n        });\n      } else {\n        highlightSeries(null);\n        highlightPoint(null);\n      }\n    }\n  };\n\n  var onGroupMouseMove = function onGroupMouseMove(event) {\n    var svgRect = event.target.getBoundingClientRect();\n    var offsetX = event.clientX - svgRect.left;\n    var offsetY = event.clientY - svgRect.top; // If hovering over some group - highlight it.\n\n    for (var groupIndex = 0; groupIndex < barGroups.length; groupIndex++) {\n      var _a = barGroups[groupIndex].position,\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height;\n\n      if (x <= offsetX && offsetX <= x + width && y <= offsetY && offsetY <= y + height) {\n        highlightGroup(groupIndex);\n        return;\n      }\n    } // Otherwise - clear the highlight.\n\n\n    clearHighlightedSeries();\n  };\n\n  var onSVGMouseMove = function onSVGMouseMove(event) {\n    if (event.target === plotRef.current.svg && !isHandlersDisabled) {\n      if (isGroupNavigation) {\n        onGroupMouseMove(event);\n      } else if (scaledSeries.length > 0) {\n        onSeriesMouseMove(event);\n      }\n    }\n  };\n\n  var onSVGMouseOut = function onSVGMouseOut(event) {\n    if (isHandlersDisabled) {\n      return;\n    }\n\n    if (!nodeContains(plotRef.current.svg, event.relatedTarget) || // `classList` is not supported on IE11 for SVG elements\n    (event.relatedTarget && event.relatedTarget.getAttribute('class') || '').split(' ').indexOf(styles.series) > -1) {\n      setVerticalMarkerLeft(null);\n      clearHighlightedSeries();\n    }\n  };\n\n  return {\n    verticalMarkerLeft: verticalMarkerLeft,\n    onSVGMouseMove: onSVGMouseMove,\n    onSVGMouseOut: onSVGMouseOut\n  };\n}","map":null,"metadata":{},"sourceType":"module"}