{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport FocusLock from 'react-focus-lock';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { KeyCode } from '../internal/keycode';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { InternalButton } from '../button/internal';\nimport InternalHeader from '../header/internal';\nimport Portal from '../internal/components/portal';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { disableBodyScrolling, enableBodyScrolling } from './body-scroll';\nimport styles from './styles.css.js';\nexport default function InternalModal(_a) {\n  var _b, _c;\n\n  var size = _a.size,\n      visible = _a.visible,\n      closeAriaLabel = _a.closeAriaLabel,\n      header = _a.header,\n      children = _a.children,\n      footer = _a.footer,\n      disableContentPaddings = _a.disableContentPaddings,\n      onDismiss = _a.onDismiss,\n      modalRoot = _a.modalRoot,\n      _d = _a.__internalRootRef,\n      __internalRootRef = _d === void 0 ? null : _d,\n      rest = __rest(_a, [\"size\", \"visible\", \"closeAriaLabel\", \"header\", \"children\", \"footer\", \"disableContentPaddings\", \"onDismiss\", \"modalRoot\", \"__internalRootRef\"]);\n\n  var instanceUniqueId = useUniqueId();\n  var headerId = \"\".concat(rest.id || instanceUniqueId, \"-header\");\n  var focusLockRef = useRef(null);\n  var lastMouseDownElementRef = useRef(null);\n  var initiallyFocusedElementRef = useRef(null);\n\n  var _e = useContainerBreakpoints(['xs']),\n      breakpoint = _e[0],\n      breakpointsRef = _e[1];\n\n  var refObject = useRef(null);\n  var mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);\n  var isRefresh = useVisualRefresh(useRef(modalRoot !== null && modalRoot !== void 0 ? modalRoot : document.body));\n  var baseProps = getBaseProps(rest); // enable body scroll and restore focus if unmounting while visible\n\n  useEffect(function () {\n    return function () {\n      enableBodyScrolling();\n    };\n  }, []); // enable / disable body scroll\n\n  useEffect(function () {\n    if (visible) {\n      disableBodyScrolling();\n    } else {\n      enableBodyScrolling();\n    }\n  }, [visible]); // Because we hide the element with styles (and not actually detach it from DOM), we need to scroll to top\n\n  useEffect(function () {\n    if (visible && refObject.current) {\n      refObject.current.scrollTop = 0;\n    }\n  }, [refObject, visible]); // Handle focus restore\n\n  var onActivation = function onActivation() {\n    initiallyFocusedElementRef.current = document.activeElement;\n  };\n\n  var onDeactivation = function onDeactivation() {\n    var _a;\n\n    (_a = initiallyFocusedElementRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    initiallyFocusedElementRef.current = null;\n  };\n\n  var dismiss = function dismiss(reason) {\n    return fireNonCancelableEvent(onDismiss, {\n      reason: reason\n    });\n  };\n\n  var onOverlayMouseDown = function onOverlayMouseDown(event) {\n    lastMouseDownElementRef.current = event.target;\n  };\n\n  var onOverlayClick = function onOverlayClick(event) {\n    var overlay = refObject.current;\n    var lastClicked = lastMouseDownElementRef.current;\n\n    if (event.target === overlay && lastClicked === overlay) {\n      dismiss('overlay');\n    }\n  };\n\n  var onCloseButtonClick = function onCloseButtonClick() {\n    return dismiss('closeButton');\n  };\n\n  var escKeyHandler = function escKeyHandler(event) {\n    if (event.keyCode === KeyCode.escape) {\n      dismiss('keyboard');\n    }\n  };\n\n  return React.createElement(Portal, {\n    container: modalRoot\n  }, React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, (_b = {}, _b[styles.hidden] = !visible, _b), baseProps.className, isRefresh && styles.refresh),\n    role: \"dialog\",\n    \"aria-modal\": true,\n    \"aria-labelledby\": headerId,\n    onMouseDown: onOverlayMouseDown,\n    onClick: onOverlayClick,\n    ref: mergedRef\n  }), React.createElement(FocusLock, {\n    disabled: !visible,\n    autoFocus: true,\n    className: styles['focus-lock'],\n    ref: focusLockRef,\n    onActivation: onActivation,\n    onDeactivation: onDeactivation\n  }, React.createElement(\"div\", {\n    className: clsx(styles.dialog, styles[size], styles[\"breakpoint-\".concat(breakpoint)], isRefresh && styles.refresh),\n    onKeyDown: escKeyHandler,\n    tabIndex: -1\n  }, React.createElement(\"div\", {\n    className: styles.container\n  }, React.createElement(\"div\", {\n    className: styles.header\n  }, React.createElement(InternalHeader, {\n    variant: \"h2\",\n    __disableActionsWrapping: true,\n    actions: React.createElement(InternalButton, {\n      ariaLabel: closeAriaLabel,\n      className: styles['dismiss-control'],\n      variant: \"modal-dismiss\",\n      iconName: \"close\",\n      formAction: \"none\",\n      onClick: onCloseButtonClick\n    })\n  }, React.createElement(\"span\", {\n    id: headerId,\n    className: styles['header--text']\n  }, header))), React.createElement(\"div\", {\n    className: clsx(styles.content, (_c = {}, _c[styles['no-paddings']] = disableContentPaddings, _c))\n  }, children), footer && React.createElement(\"div\", {\n    className: styles.footer\n  }, footer))))));\n}","map":null,"metadata":{},"sourceType":"module"}