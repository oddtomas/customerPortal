{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as React from 'react';\nimport { isDevelopment } from '../../is-development';\nimport { warnOnce } from '../../logging';\n/**\n * This hook allows you to make a component that can be used both in controlled mode and uncontrolled mode.\n * Pass in your component's props, and then implement your component as if it was only controlled.\n * When calling onChange callbacks (or the equivalent for your property), you need to call both the callback returned by this function\n * as well as the callback provided in your component's props.\n *\n * A component determines its mode (either controlled or uncontrolled) on the first render and keeps it for its lifetime. The mode cannot\n * be switched later.\n *\n *\n * Example usage:\n * ```jsx\n * const [checked, setChecked] = useControllable(\n *     props,\n *     props.defaultEnabled ?? false,\n *     {\n *        componentName: 'MyCheckboxComponent',\n *        controlledProp: 'enabled',\n *        changeHandler: 'onCheckedStatusChange'\n *     }\n * )\n *\n * return\n *  <input\n *   type=\"checkbox\"\n *   checked={checked}\n *   onChange={event => {\n *    setChecked(event.target.checked);\n *    fireNonCancelableEvent(props.onCheckedStatusChange, { checked: event.target.checked })\n *   }} />\n * ```\n *\n * @param controlledValue value for the controlled mode\n * @param handler update handler for controlled mode\n * @param defaultValue initial value for uncontrolled mode\n * @param description property metadata\n */\n\nexport function useControllable(controlledValue, handler, defaultValue, _a) {\n  var componentName = _a.componentName,\n      changeHandler = _a.changeHandler,\n      controlledProp = _a.controlledProp; // The decision whether a component is controlled or uncontrolled is made on its first render and cannot be changed afterwards.\n\n  var isControlled = React.useState(controlledValue !== undefined)[0];\n\n  if (isDevelopment) {\n    // Print a warning if the component switches between controlled and uncontrolled mode.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (isControlled && handler === undefined) {\n        warnOnce(componentName, \"You provided a `\".concat(controlledProp, \"` prop without an `\").concat(changeHandler, \"` handler. This will render a non-interactive component.\"));\n      }\n    }, [handler, isControlled, componentName, changeHandler, controlledProp]); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n    React.useEffect(function () {\n      var isControlledNow = controlledValue !== undefined;\n\n      if (isControlled !== isControlledNow) {\n        var initialMode = isControlled ? 'controlled' : 'uncontrolled';\n        var modeNow = isControlledNow ? 'controlled' : 'uncontrolled';\n        warnOnce(componentName, \"A component tried to change \".concat(initialMode, \" '\").concat(controlledProp, \"' property to be \").concat(modeNow, \". \") + \"This is not supported. Properties should not switch from \".concat(initialMode, \" to \").concat(modeNow, \" (or vice versa). \") + \"Decide between using a controlled or uncontrolled mode for the lifetime of the component. \" + \"More info: https://fb.me/react-controlled-components\");\n      }\n    }, [isControlled, controlledProp, componentName, controlledValue]);\n  } // This is the value that is used if the component is uncontrolled.\n\n\n  var _b = React.useState(defaultValue),\n      valueState = _b[0],\n      setValue = _b[1];\n\n  var _c = React.useState(false),\n      valueHasBeenSet = _c[0],\n      setValueHasBeenSet = _c[1]; // We track changes to the defaultValue\n\n\n  var currentUncontrolledValue = valueHasBeenSet ? valueState : defaultValue;\n  var setUncontrolledValue = React.useCallback(function (newValue) {\n    setValue(newValue);\n    setValueHasBeenSet(true);\n  }, [setValue, setValueHasBeenSet]);\n\n  if (isControlled) {\n    return [controlledValue, defaultCallback];\n  } else {\n    return [currentUncontrolledValue, setUncontrolledValue];\n  }\n}\n\nfunction defaultCallback() {\n  return void 0;\n}","map":null,"metadata":{},"sourceType":"module"}