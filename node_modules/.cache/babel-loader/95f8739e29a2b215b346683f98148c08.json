{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport OptionComponent from '../internal/components/option';\nimport SelectableItem from '../internal/components/selectable-item';\nimport { getBaseProps } from '../internal/base-component';\nimport { getTestOptionIndexes } from '../internal/components/options-list/utils/test-indexes';\nimport styles from './styles.css.js';\n\nvar AutosuggestOption = function AutosuggestOption(_a, ref) {\n  var _b = _a.nativeAttributes,\n      nativeAttributes = _b === void 0 ? {} : _b,\n      highlightText = _a.highlightText,\n      option = _a.option,\n      highlighted = _a.highlighted,\n      enteredTextLabel = _a.enteredTextLabel,\n      virtualPosition = _a.virtualPosition,\n      padBottom = _a.padBottom,\n      screenReaderContent = _a.screenReaderContent,\n      ariaSetsize = _a.ariaSetsize,\n      ariaPosinset = _a.ariaPosinset,\n      rest = __rest(_a, [\"nativeAttributes\", \"highlightText\", \"option\", \"highlighted\", \"enteredTextLabel\", \"virtualPosition\", \"padBottom\", \"screenReaderContent\", \"ariaSetsize\", \"ariaPosinset\"]);\n\n  var baseProps = getBaseProps(rest);\n  var useEntered = 'type' in option && option.type === 'use-entered';\n  var isParent = 'type' in option && option.type === 'parent';\n  var isChild = 'type' in option && option.type === 'child';\n\n  var _c = getTestOptionIndexes(option) || {},\n      throughIndex = _c.throughIndex,\n      inGroupIndex = _c.inGroupIndex,\n      groupIndex = _c.groupIndex;\n\n  var optionContent;\n\n  if (useEntered) {\n    optionContent = enteredTextLabel(option.value || '');\n  } else if (isParent) {\n    optionContent = option.label;\n  } else {\n    var a11yProperties = {};\n\n    if (nativeAttributes['aria-label']) {\n      a11yProperties['aria-label'] = nativeAttributes['aria-label'];\n    }\n\n    optionContent = React.createElement(\"div\", __assign({}, a11yProperties), React.createElement(OptionComponent, {\n      option: option,\n      highlightText: highlightText\n    }));\n  }\n\n  return React.createElement(SelectableItem, __assign({}, baseProps, {\n    className: styles.option,\n    ariaSelected: highlighted || undefined,\n    highlighted: highlighted,\n    disabled: option.disabled,\n    hasBackground: useEntered,\n    isParent: isParent,\n    isChild: isChild,\n    virtualPosition: virtualPosition,\n    \"data-test-index\": throughIndex,\n    \"data-in-group-index\": inGroupIndex,\n    \"data-group-index\": groupIndex,\n    ref: ref,\n    padBottom: padBottom,\n    screenReaderContent: screenReaderContent,\n    ariaSetsize: ariaSetsize,\n    ariaPosinset: ariaPosinset\n  }), optionContent);\n};\n\nexport default React.memo(React.forwardRef(AutosuggestOption));","map":null,"metadata":{},"sourceType":"module"}