{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { TabButton } from './tab-button';\nimport { InternalButton } from '../button/internal';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\n\nfunction InternalStatusBar(_a) {\n  var _b, _c;\n\n  var languageLabel = _a.languageLabel,\n      cursorPosition = _a.cursorPosition,\n      paneStatus = _a.paneStatus,\n      onErrorPaneToggle = _a.onErrorPaneToggle,\n      onWarningPaneToggle = _a.onWarningPaneToggle,\n      onTabFocus = _a.onTabFocus,\n      onTabBlur = _a.onTabBlur,\n      errorsTabRef = _a.errorsTabRef,\n      warningsTabRef = _a.warningsTabRef,\n      isTabFocused = _a.isTabFocused,\n      paneId = _a.paneId,\n      onPreferencesOpen = _a.onPreferencesOpen,\n      i18nStrings = _a.i18nStrings,\n      errorCount = _a.errorCount,\n      warningCount = _a.warningCount,\n      leftBarRef = _a.leftBarRef,\n      isVirtual = _a.isVirtual,\n      minifyCounters = _a.minifyCounters,\n      isRefresh = _a.isRefresh;\n  var errorText = \"\".concat(i18nStrings.errorsTab, \": \").concat(errorCount);\n  var warningText = \"\".concat(i18nStrings.warningsTab, \": \").concat(warningCount); // Virtual status bar is inaccessible for screen readers and keyboard interactions.\n\n  return React.createElement(\"div\", {\n    className: clsx(styles['status-bar'], (_b = {}, _b[styles['status-bar-with-hidden-pane']] = paneStatus === 'hidden', _b[styles['status-bar-virtual']] = isVirtual, _b)),\n    \"aria-hidden\": isVirtual\n  }, React.createElement(\"div\", {\n    className: clsx(styles['status-bar__left'], (_c = {}, _c[styles['status-bar__left-virtual']] = isVirtual, _c)),\n    ref: leftBarRef\n  }, React.createElement(\"span\", {\n    className: styles['status-bar__language-mode']\n  }, languageLabel), React.createElement(\"span\", {\n    className: styles['status-bar__cursor-position']\n  }, cursorPosition), React.createElement(\"div\", {\n    role: \"tablist\"\n  }, React.createElement(TabButton, {\n    text: minifyCounters ? \" \".concat(errorCount) : errorText,\n    className: styles['tab-button--errors'],\n    iconName: \"status-negative\",\n    disabled: errorCount === 0 || isVirtual,\n    active: paneStatus === 'error',\n    onClick: onErrorPaneToggle,\n    onFocus: onTabFocus,\n    onBlur: onTabBlur,\n    ref: errorsTabRef,\n    ariaLabel: errorText,\n    paneId: paneId,\n    isRefresh: isRefresh\n  }), React.createElement(\"span\", {\n    className: styles['tab-button--divider']\n  }), React.createElement(TabButton, {\n    text: minifyCounters ? \" \".concat(warningCount) : warningText,\n    className: styles['tab-button--warnings'],\n    iconName: \"status-warning\",\n    disabled: warningCount === 0 || isVirtual,\n    active: paneStatus === 'warning',\n    onClick: onWarningPaneToggle,\n    onFocus: onTabFocus,\n    onBlur: onTabBlur,\n    ref: warningsTabRef,\n    tabIndex: paneStatus === 'error' && isTabFocused ? -1 : undefined,\n    ariaHidden: paneStatus === 'error' && isTabFocused ? true : undefined,\n    ariaLabel: warningText,\n    paneId: paneId,\n    isRefresh: isRefresh\n  }))), React.createElement(\"div\", {\n    className: styles['status-bar__right']\n  }, React.createElement(\"div\", {\n    className: styles['status-bar__cog-button']\n  }, React.createElement(InternalButton, {\n    disabled: isVirtual,\n    formAction: \"none\",\n    variant: \"icon\",\n    iconName: \"settings\",\n    iconAlt: \"Settings\",\n    ariaLabel: i18nStrings.preferencesButtonAriaLabel,\n    onClick: onPreferencesOpen,\n    __nativeAttributes: {\n      tabIndex: paneStatus !== 'hidden' && isTabFocused ? -1 : undefined,\n      'aria-hidden': paneStatus !== 'hidden' && isTabFocused ? true : undefined\n    }\n  }))));\n}\n\nexport var StatusBar = function StatusBar(props) {\n  // create a virtual status bar, in order to calculate the width with full tab button text\n  // and decide if tab button text needs to be reduced\n  var _a = useContainerQuery(function (rect) {\n    return rect.width;\n  }),\n      realWidth = _a[0],\n      statusLeftBarRef = _a[1];\n\n  var _b = useContainerQuery(function (rect) {\n    return rect.width;\n  }),\n      virtualWidth = _b[0],\n      virtualStatusLeftBarRef = _b[1];\n\n  var minifyCounters = virtualWidth !== null && realWidth !== null && virtualWidth > realWidth;\n  return React.createElement(React.Fragment, null, React.createElement(InternalStatusBar, __assign({\n    isVirtual: false\n  }, props, {\n    leftBarRef: statusLeftBarRef,\n    minifyCounters: minifyCounters\n  })), React.createElement(InternalStatusBar, __assign({\n    isVirtual: true\n  }, props, {\n    leftBarRef: virtualStatusLeftBarRef,\n    minifyCounters: false\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}