{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport styles from './styles.css.js';\nimport { normalizeLocale } from '../date-picker/calendar/utils/locales';\nimport { getWeekStartByLocale } from 'weekstart';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { KeyCode } from '../internal/keycode';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport InternalBox from '../box/internal';\nimport { DateRangePickerDropdown } from './dropdown';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport Dropdown from '../internal/components/dropdown';\nimport { useFocusTracker } from '../internal/hooks/use-focus-tracker';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport ButtonTrigger from '../internal/components/button-trigger';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport InternalIcon from '../icon/internal';\nimport { getBrowserTimezoneOffset, shiftTimeOffset, formatOffset, setTimeOffset } from './time-offset';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { fireNonCancelableEvent } from '../internal/events/index.js';\nimport { isDevelopment } from '../internal/is-development.js';\nimport { warnOnce } from '../internal/logging.js';\nimport { usePrevious } from '../internal/hooks/use-previous/index.js';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\n\nfunction formatDateRange(range, placeholder, formatRelativeRange, timeOffset) {\n  if (!range) {\n    return React.createElement(\"span\", {\n      className: styles['label-text'],\n      \"aria-disabled\": true\n    }, placeholder);\n  }\n\n  if (range.type === 'relative') {\n    return React.createElement(InternalBox, {\n      fontWeight: \"normal\",\n      display: \"inline\",\n      color: \"inherit\"\n    }, formatRelativeRange(range));\n  }\n\n  if (range.type === 'absolute') {\n    var formattedOffset = isDateOnly(range) ? '' : formatOffset(timeOffset);\n    return React.createElement(InternalBox, {\n      fontWeight: \"normal\",\n      display: \"inline\",\n      color: \"inherit\"\n    }, React.createElement(\"span\", {\n      className: styles['preferred-wordbreak']\n    }, range.startDate, formattedOffset, \" \\u2014\"), ' ', React.createElement(\"span\", {\n      className: styles['preferred-wordbreak']\n    }, range.endDate, formattedOffset));\n  }\n}\n\nfunction isDateOnly(value) {\n  if (!value || value.type !== 'absolute') {\n    return false;\n  }\n\n  var dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  return dateRegex.test(value.startDate) && dateRegex.test(value.endDate);\n}\n\nfunction formatValue(value, _a) {\n  var timeOffset = _a.timeOffset,\n      dateOnly = _a.dateOnly;\n\n  if (!value || value.type === 'relative') {\n    return value;\n  }\n\n  if (dateOnly) {\n    return {\n      type: 'absolute',\n      startDate: value.startDate.split('T')[0],\n      endDate: value.endDate.split('T')[0]\n    };\n  }\n\n  return setTimeOffset(value, timeOffset);\n}\n\nvar DateRangePicker = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var _c, _d;\n\n  var _e = _a.locale,\n      locale = _e === void 0 ? '' : _e,\n      startOfWeek = _a.startOfWeek,\n      _f = _a.isDateEnabled,\n      isDateEnabled = _f === void 0 ? function () {\n    return true;\n  } : _f,\n      value = _a.value,\n      placeholder = _a.placeholder,\n      _g = _a.readOnly,\n      readOnly = _g === void 0 ? false : _g,\n      _h = _a.disabled,\n      disabled = _h === void 0 ? false : _h,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      _j = _a.relativeOptions,\n      relativeOptions = _j === void 0 ? [] : _j,\n      i18nStrings = _a.i18nStrings,\n      _k = _a.isValidRange,\n      isValidRange = _k === void 0 ? function () {\n    return {\n      valid: true\n    };\n  } : _k,\n      _l = _a.showClearButton,\n      showClearButton = _l === void 0 ? true : _l,\n      _m = _a.dateOnly,\n      dateOnly = _m === void 0 ? false : _m,\n      _o = _a.timeOffset,\n      timeOffset = _o === void 0 ? getBrowserTimezoneOffset() : _o,\n      _p = _a.timeInputFormat,\n      timeInputFormat = _p === void 0 ? 'hh:mm:ss' : _p,\n      _q = _a.expandToViewport,\n      expandToViewport = _q === void 0 ? false : _q,\n      _r = _a.rangeSelectorMode,\n      rangeSelectorMode = _r === void 0 ? 'default' : _r,\n      rest = __rest(_a, [\"locale\", \"startOfWeek\", \"isDateEnabled\", \"value\", \"placeholder\", \"readOnly\", \"disabled\", \"onChange\", \"onBlur\", \"onFocus\", \"relativeOptions\", \"i18nStrings\", \"isValidRange\", \"showClearButton\", \"dateOnly\", \"timeOffset\", \"timeInputFormat\", \"expandToViewport\", \"rangeSelectorMode\"]);\n\n  var __internalRootRef = useBaseComponent('DateRangePicker').__internalRootRef;\n\n  checkControlled('DateRangePicker', 'value', value, 'onChange', onChange);\n  value = isDateOnly(value) ? value : shiftTimeOffset(value, timeOffset);\n  var baseProps = getBaseProps(rest);\n\n  var _s = useFormFieldContext(__assign({\n    ariaLabelledby: (_c = rest.ariaLabelledby) !== null && _c !== void 0 ? _c : i18nStrings.ariaLabelledby,\n    ariaDescribedby: (_d = rest.ariaDescribedby) !== null && _d !== void 0 ? _d : i18nStrings.ariaDescribedby\n  }, rest)),\n      invalid = _s.invalid,\n      controlId = _s.controlId,\n      ariaDescribedby = _s.ariaDescribedby,\n      ariaLabelledby = _s.ariaLabelledby;\n\n  var isSingleGrid = useMobile();\n  var triggerRef = useRef(null);\n  useForwardFocus(ref, triggerRef);\n  var rootRef = useRef(null);\n  var dropdownId = useUniqueId('date-range-picker-dropdown');\n  useFocusTracker({\n    rootRef: rootRef,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    viewportId: expandToViewport ? dropdownId : ''\n  });\n\n  var _t = useState(false),\n      isDropDownOpen = _t[0],\n      setIsDropDownOpen = _t[1];\n\n  var normalizedLocale = normalizeLocale('DateRangePicker', locale !== null && locale !== void 0 ? locale : '');\n  var normalizedStartOfWeek = typeof startOfWeek === 'number' ? startOfWeek % 7 : getWeekStartByLocale(normalizedLocale);\n\n  var closeDropdown = function closeDropdown(focusTrigger) {\n    var _a;\n\n    if (focusTrigger === void 0) {\n      focusTrigger = false;\n    }\n\n    setIsDropDownOpen(false);\n\n    if (focusTrigger) {\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  };\n\n  var onWrapperKeyDownHandler = function onWrapperKeyDownHandler(event) {\n    if (event.keyCode === KeyCode.escape) {\n      closeDropdown(true);\n    }\n  };\n\n  var onClear = function onClear() {\n    fireNonCancelableEvent(onChange, {\n      value: null\n    });\n  };\n\n  var onApply = function onApply(newValue) {\n    var validationResult = isValidRange(newValue);\n\n    if ((validationResult === null || validationResult === void 0 ? void 0 : validationResult.valid) === false) {\n      return validationResult;\n    }\n\n    if (isDevelopment) {\n      if ((newValue === null || newValue === void 0 ? void 0 : newValue.type) === 'absolute') {\n        var startDateWithoutTime = newValue.startDate.split('T')[0];\n        var endDateWithoutTime = newValue.endDate.split('T')[0];\n\n        if (!startDateWithoutTime || !endDateWithoutTime) {\n          warnOnce('DateRangePicker', 'You have provided an `isValidRange` prop that did not catch a missing start or end date.');\n        }\n      }\n    }\n\n    fireNonCancelableEvent(onChange, {\n      value: formatValue(newValue, {\n        dateOnly: dateOnly,\n        timeOffset: timeOffset\n      })\n    });\n    return validationResult || {\n      valid: true\n    };\n  };\n\n  var prevDateOnly = usePrevious(dateOnly);\n  useEffect(function () {\n    if (prevDateOnly !== undefined && prevDateOnly !== dateOnly) {\n      warnOnce('DateRangePicker', \"The provided `dateOnly` flag has been changed from \\\"\".concat(prevDateOnly, \"\\\" to \\\"\").concat(dateOnly, \"\\\" which can lead to unexpected value format. Consider using separate components.\"));\n    }\n  }, [prevDateOnly, dateOnly]);\n\n  if (value && value.type !== 'absolute' && value.type !== 'relative') {\n    warnOnce('DateRangePicker', 'You provided an invalid value. Reverting back to default.');\n    value = null;\n  }\n\n  if ((value === null || value === void 0 ? void 0 : value.type) === 'absolute' && rangeSelectorMode === 'relative-only' || (value === null || value === void 0 ? void 0 : value.type) === 'relative' && rangeSelectorMode === 'absolute-only') {\n    warnOnce('DateRangePicker', 'The provided value does not correspond to the current range selector mode. Reverting back to default.');\n    value = null;\n  }\n\n  var trigger = React.createElement(\"div\", {\n    className: styles['trigger-wrapper']\n  }, React.createElement(ButtonTrigger, {\n    ref: triggerRef,\n    id: controlId,\n    invalid: invalid,\n    ariaLabel: i18nStrings.ariaLabel,\n    ariaDescribedby: ariaDescribedby,\n    ariaLabelledby: ariaLabelledby,\n    className: clsx(styles.label, (_b = {}, _b[styles['label-enabled']] = !readOnly && !disabled, _b)),\n    hideCaret: true,\n    onClick: function onClick() {\n      if (!readOnly && !disabled) {\n        setIsDropDownOpen(true);\n      }\n    },\n    disabled: disabled,\n    readOnly: readOnly,\n    ariaHasPopup: \"true\"\n  }, React.createElement(\"span\", {\n    className: styles['trigger-flexbox']\n  }, React.createElement(\"span\", {\n    className: styles['icon-wrapper']\n  }, React.createElement(InternalIcon, {\n    name: \"calendar\",\n    variant: disabled || readOnly ? 'disabled' : 'normal'\n  })), formatDateRange(value, placeholder !== null && placeholder !== void 0 ? placeholder : '', i18nStrings.formatRelativeRange, timeOffset))));\n  var mergedRef = useMergeRefs(rootRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(baseProps.className, styles.root),\n    onKeyDown: onWrapperKeyDownHandler\n  }), React.createElement(Dropdown, {\n    stretchWidth: true,\n    stretchHeight: true,\n    open: isDropDownOpen,\n    onDropdownClose: function onDropdownClose() {\n      return closeDropdown();\n    },\n    trigger: trigger,\n    stretchToTriggerWidth: false,\n    expandToViewport: expandToViewport,\n    dropdownId: dropdownId\n  }, isDropDownOpen && React.createElement(DateRangePickerDropdown, {\n    startOfWeek: normalizedStartOfWeek,\n    locale: normalizedLocale,\n    isSingleGrid: isSingleGrid,\n    onDropdownClose: function onDropdownClose() {\n      return closeDropdown(true);\n    },\n    value: value,\n    showClearButton: showClearButton,\n    isDateEnabled: isDateEnabled,\n    i18nStrings: i18nStrings,\n    onClear: onClear,\n    onApply: onApply,\n    relativeOptions: relativeOptions,\n    isValidRange: isValidRange,\n    dateOnly: dateOnly,\n    timeInputFormat: timeInputFormat,\n    rangeSelectorMode: rangeSelectorMode,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescribedby: ariaDescribedby\n  })));\n});\napplyDisplayName(DateRangePicker, 'DateRangePicker');\nexport default DateRangePicker;","map":null,"metadata":{},"sourceType":"module"}