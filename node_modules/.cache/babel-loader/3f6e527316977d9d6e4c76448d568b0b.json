{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nexport default function InternalBox(_a) {\n  var _b = _a.variant,\n      variant = _b === void 0 ? 'div' : _b,\n      tagOverride = _a.tagOverride,\n      _c = _a.margin,\n      margin = _c === void 0 ? {} : _c,\n      _d = _a.padding,\n      padding = _d === void 0 ? {} : _d,\n      display = _a.display,\n      textAlign = _a.textAlign,\n      float = _a.float,\n      fontSize = _a.fontSize,\n      fontWeight = _a.fontWeight,\n      color = _a.color,\n      children = _a.children,\n      _e = _a.__internalRootRef,\n      __internalRootRef = _e === void 0 ? null : _e,\n      props = __rest(_a, [\"variant\", \"tagOverride\", \"margin\", \"padding\", \"display\", \"textAlign\", \"float\", \"fontSize\", \"fontWeight\", \"color\", \"children\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(props);\n  var marginsClassNamesSuffices = getClassNamesSuffixes(margin);\n  var paddingsClassNamesSuffices = getClassNamesSuffixes(padding); // This can be any arbitrary string if passed into tagOverride.\n  // We appease the compiler with an incorrect type.\n\n  var Tag = getTag(variant, tagOverride);\n  var className = clsx(baseProps.className, styles.root, styles.box, styles[\"\".concat(variant.replace(/^awsui-/, ''), \"-variant\")], marginsClassNamesSuffices.map(function (suffix) {\n    return styles[\"m-\".concat(suffix)];\n  }), paddingsClassNamesSuffices.map(function (suffix) {\n    return styles[\"p-\".concat(suffix)];\n  }), styles[\"d-\".concat(display)], styles[\"f-\".concat(float)], styles[\"color-\".concat(color || 'default')], styles[\"font-size-\".concat(fontSize || 'default')], styles[\"font-weight-\".concat(fontWeight || 'default')], styles[\"t-\".concat(textAlign)]);\n  return React.createElement(Tag, __assign({}, baseProps, {\n    className: className,\n    ref: __internalRootRef\n  }), children);\n}\n\nvar getClassNamesSuffixes = function getClassNamesSuffixes(value) {\n  if (typeof value === 'string') {\n    return [value];\n  }\n\n  var sides = ['top', 'right', 'bottom', 'left', 'horizontal', 'vertical'];\n  return sides.filter(function (side) {\n    return !!value[side];\n  }).map(function (side) {\n    return \"\".concat(side, \"-\").concat(value[side]);\n  });\n};\n\nvar getTag = function getTag(variant, tagOverride) {\n  if (tagOverride) {\n    return tagOverride;\n  }\n\n  if (variant === 'awsui-value-large') {\n    return 'span';\n  }\n\n  if (variant === 'awsui-key-label') {\n    return 'div';\n  }\n\n  return variant;\n};","map":null,"metadata":{},"sourceType":"module"}