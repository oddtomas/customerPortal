{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { AppLayoutButton, CloseButton, togglesConfig } from './toggles';\nimport styles from './styles.css.js'; // This matches the design token awsui.$border-divider-section-width in Visual Refresh\n\nvar BORDER_WIDTH = 2; // We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\n\nexport function Drawer(_a) {\n  var _b;\n\n  var contentClassName = _a.contentClassName,\n      toggleClassName = _a.toggleClassName,\n      closeClassName = _a.closeClassName,\n      width = _a.width,\n      type = _a.type,\n      toggleRefs = _a.toggleRefs,\n      topOffset = _a.topOffset,\n      bottomOffset = _a.bottomOffset,\n      ariaLabels = _a.ariaLabels,\n      children = _a.children,\n      isOpen = _a.isOpen,\n      isHidden = _a.isHidden,\n      isMobile = _a.isMobile,\n      hasDividerWithSplitPanel = _a.hasDividerWithSplitPanel,\n      onToggle = _a.onToggle,\n      _onClick = _a.onClick,\n      _c = _a.extendRight,\n      extendRight = _c === void 0 ? 0 : _c;\n  var _d = togglesConfig[type],\n      TagName = _d.TagName,\n      iconName = _d.iconName,\n      getLabels = _d.getLabels;\n\n  var _e = getLabels(ariaLabels),\n      mainLabel = _e.mainLabel,\n      closeLabel = _e.closeLabel,\n      openLabel = _e.openLabel;\n\n  var hasDividerWithButtonBar = isOpen && extendRight !== 0;\n  var drawerContentWidthOpen = isMobile ? undefined : width;\n  var drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n  var drawerWidth = hasDividerWithButtonBar && drawerContentWidth ? drawerContentWidth + BORDER_WIDTH : drawerContentWidth;\n  var closeIconName = 'close';\n  var regularOpenButton = React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    className: styles.toggle,\n    \"aria-hidden\": isOpen\n  }, React.createElement(AppLayoutButton, {\n    ref: toggleRefs.toggle,\n    className: toggleClassName,\n    iconName: iconName,\n    ariaLabel: openLabel,\n    onClick: function onClick() {\n      return onToggle(true);\n    },\n    ariaExpanded: false\n  }));\n  return React.createElement(\"div\", {\n    className: clsx(styles.drawer, (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b[styles['drawer-hidden']] = isHidden, _b[styles['drawer-mobile']] = isMobile, _b[styles['has-divider-with-splitpanel']] = hasDividerWithSplitPanel, _b[styles['opaque-background']] = hasDividerWithButtonBar, _b)),\n    style: {\n      width: drawerWidth,\n      marginRight: isOpen ? -1 * extendRight : 0,\n      paddingRight: isOpen ? extendRight : 0\n    },\n    onClick: function onClick(event) {\n      if (_onClick) {\n        _onClick(event);\n      }\n\n      if (!isOpen) {\n        // to prevent calling onToggle from the drawer when it's called from the toggle button\n        if (event.target.tagName !== 'BUTTON') {\n          onToggle(true);\n        }\n      }\n    }\n  }, React.createElement(\"div\", {\n    style: {\n      width: drawerContentWidth,\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    className: clsx(styles['drawer-content'], contentClassName)\n  }, !isMobile && regularOpenButton, React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    \"aria-hidden\": !isOpen\n  }, React.createElement(CloseButton, {\n    ref: toggleRefs.close,\n    className: closeClassName,\n    ariaLabel: closeLabel,\n    onClick: function onClick() {\n      return onToggle(false);\n    },\n    iconName: closeIconName\n  }), children)));\n}","map":null,"metadata":{},"sourceType":"module"}