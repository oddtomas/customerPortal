{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Calendar from './calendar';\nimport { InternalButton } from '../button/internal';\nimport TabTrap from '../internal/components/tab-trap';\nimport InternalBox from '../box/internal';\nimport SpaceBetween from '../space-between/index.js';\nimport styles from './styles.css.js';\nimport RelativeRangePicker from './relative-range';\nimport ModeSwitcher from './mode-switcher';\nimport clsx from 'clsx';\nimport InternalAlert from '../alert/internal';\nimport LiveRegion from '../internal/components/live-region';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nvar VALID_RANGE = {\n  valid: true\n};\n/**\n * This function fills in a start and end time if they are missing.\n */\n\nfunction fillMissingTime(value) {\n  if (!value) {\n    return value;\n  }\n\n  var _a = value.startDate.split('T'),\n      startDate = _a[0],\n      startTime = _a[1];\n\n  var _b = value.endDate.split('T'),\n      endDate = _b[0],\n      endTime = _b[1];\n\n  return __assign(__assign({}, value), {\n    startDate: startTime ? value.startDate : \"\".concat(startDate, \"T00:00:00\"),\n    endDate: endTime ? value.endDate : \"\".concat(endDate, \"T23:59:59\")\n  });\n}\n\nfunction getDefaultMode(value, relativeOptions, rangeSelectorMode) {\n  if (value && value.type) {\n    return value.type;\n  }\n\n  if (rangeSelectorMode === 'relative-only') {\n    return 'relative';\n  }\n\n  if (rangeSelectorMode === 'absolute-only') {\n    return 'absolute';\n  }\n\n  return relativeOptions.length > 0 ? 'relative' : 'absolute';\n}\n\nexport function DateRangePickerDropdown(_a) {\n  var _b, _c;\n\n  var _d = _a.locale,\n      locale = _d === void 0 ? '' : _d,\n      startOfWeek = _a.startOfWeek,\n      isDateEnabled = _a.isDateEnabled,\n      isValidRange = _a.isValidRange,\n      value = _a.value,\n      clearValue = _a.onClear,\n      applyValue = _a.onApply,\n      onDropdownClose = _a.onDropdownClose,\n      relativeOptions = _a.relativeOptions,\n      showClearButton = _a.showClearButton,\n      isSingleGrid = _a.isSingleGrid,\n      i18nStrings = _a.i18nStrings,\n      dateOnly = _a.dateOnly,\n      timeInputFormat = _a.timeInputFormat,\n      rangeSelectorMode = _a.rangeSelectorMode,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescribedby = _a.ariaDescribedby;\n  var focusVisible = useFocusVisible();\n  var scrollableContainerRef = useRef(null);\n  var applyButtonRef = useRef(null);\n\n  var _e = useState(getDefaultMode(value, relativeOptions, rangeSelectorMode)),\n      rangeSelectionMode = _e[0],\n      setRangeSelectionMode = _e[1];\n\n  var _f = useState((value === null || value === void 0 ? void 0 : value.type) === 'absolute' ? value : null),\n      selectedAbsoluteRange = _f[0],\n      setSelectedAbsoluteRange = _f[1];\n\n  var _g = useState((value === null || value === void 0 ? void 0 : value.type) === 'relative' ? value : null),\n      selectedRelativeRange = _g[0],\n      setSelectedRelativeRange = _g[1];\n\n  var _h = useState(false),\n      applyClicked = _h[0],\n      setApplyClicked = _h[1];\n\n  var _j = useState(VALID_RANGE),\n      validationResult = _j[0],\n      setValidationResult = _j[1];\n\n  var closeDropdown = function closeDropdown() {\n    setApplyClicked(false);\n    onDropdownClose();\n  };\n\n  var onClear = function onClear() {\n    closeDropdown();\n    clearValue();\n  };\n\n  var onApply = function onApply() {\n    var newValue = rangeSelectionMode === 'relative' ? selectedRelativeRange : fillMissingTime(selectedAbsoluteRange);\n    var newValidationResult = applyValue(newValue);\n\n    if (newValidationResult.valid === false) {\n      setApplyClicked(true);\n      setValidationResult(newValidationResult);\n    } else {\n      setApplyClicked(false);\n      closeDropdown();\n    }\n  };\n\n  useEffect(function () {\n    if (applyClicked) {\n      var visibleRange = rangeSelectionMode === 'relative' ? selectedRelativeRange : fillMissingTime(selectedAbsoluteRange);\n      var newValidationResult = isValidRange(visibleRange);\n      setValidationResult(newValidationResult || VALID_RANGE);\n    }\n  }, [applyClicked, isValidRange, rangeSelectionMode, selectedRelativeRange, selectedAbsoluteRange]);\n  var focusRefs = {\n    \"default\": useRef(null),\n    'absolute-only': useRef(null),\n    'relative-only': useRef(null)\n  };\n  useEffect(function () {\n    var _a;\n\n    return (_a = scrollableContainerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [scrollableContainerRef]);\n  return React.createElement(React.Fragment, null, React.createElement(TabTrap, {\n    focusNextCallback: function focusNextCallback() {\n      var _a;\n\n      return (_a = applyButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }), React.createElement(\"div\", __assign({}, focusVisible, {\n    ref: scrollableContainerRef,\n    className: styles.dropdown,\n    tabIndex: 0,\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    \"aria-label\": i18nStrings.ariaLabel,\n    \"aria-labelledby\": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : i18nStrings.ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby !== null && ariaDescribedby !== void 0 ? ariaDescribedby : i18nStrings.ariaDescribedby\n  }), React.createElement(\"div\", {\n    className: clsx(styles['dropdown-content'], (_b = {}, _b[styles['one-grid']] = isSingleGrid, _b))\n  }, React.createElement(SpaceBetween, {\n    size: \"l\"\n  }, React.createElement(InternalBox, {\n    padding: {\n      top: 'm',\n      horizontal: 'l'\n    }\n  }, React.createElement(SpaceBetween, {\n    direction: \"vertical\",\n    size: \"s\"\n  }, rangeSelectorMode === 'default' && React.createElement(ModeSwitcher, {\n    ref: focusRefs[\"default\"],\n    mode: rangeSelectionMode,\n    onChange: function onChange(mode) {\n      setRangeSelectionMode(mode);\n      setApplyClicked(false);\n      setValidationResult(VALID_RANGE);\n    },\n    i18nStrings: i18nStrings\n  }), rangeSelectionMode === 'absolute' && React.createElement(Calendar, {\n    ref: focusRefs['absolute-only'],\n    isSingleGrid: isSingleGrid,\n    initialEndDate: selectedAbsoluteRange === null || selectedAbsoluteRange === void 0 ? void 0 : selectedAbsoluteRange.endDate,\n    initialStartDate: selectedAbsoluteRange === null || selectedAbsoluteRange === void 0 ? void 0 : selectedAbsoluteRange.startDate,\n    locale: locale,\n    startOfWeek: startOfWeek,\n    isDateEnabled: isDateEnabled,\n    i18nStrings: i18nStrings,\n    onSelectDateRange: setSelectedAbsoluteRange,\n    dateOnly: dateOnly,\n    timeInputFormat: timeInputFormat\n  }), rangeSelectionMode === 'relative' && React.createElement(RelativeRangePicker, {\n    ref: focusRefs['relative-only'],\n    isSingleGrid: isSingleGrid,\n    options: relativeOptions,\n    dateOnly: dateOnly,\n    initialSelection: selectedRelativeRange,\n    onChange: function onChange(range) {\n      return setSelectedRelativeRange(range);\n    },\n    i18nStrings: i18nStrings\n  })), React.createElement(InternalBox, {\n    className: styles['validation-section'],\n    margin: !validationResult.valid ? {\n      top: 's'\n    } : undefined\n  }, !validationResult.valid && React.createElement(React.Fragment, null, React.createElement(InternalAlert, {\n    type: \"error\"\n  }, React.createElement(\"span\", {\n    className: styles['validation-error']\n  }, validationResult.errorMessage)), React.createElement(LiveRegion, null, validationResult.errorMessage)))), React.createElement(\"div\", {\n    className: clsx(styles.footer, (_c = {}, _c[styles['one-grid']] = isSingleGrid, _c[styles['has-clear-button']] = showClearButton, _c))\n  }, showClearButton && React.createElement(\"div\", {\n    className: styles['footer-button-wrapper']\n  }, React.createElement(InternalButton, {\n    onClick: onClear,\n    className: styles['clear-button'],\n    variant: \"link\",\n    formAction: \"none\"\n  }, i18nStrings.clearButtonLabel)), React.createElement(\"div\", {\n    className: styles['footer-button-wrapper']\n  }, React.createElement(SpaceBetween, {\n    size: \"xs\",\n    direction: \"horizontal\"\n  }, React.createElement(InternalButton, {\n    onClick: closeDropdown,\n    className: styles['cancel-button'],\n    variant: \"link\",\n    formAction: \"none\"\n  }, i18nStrings.cancelButtonLabel), React.createElement(InternalButton, {\n    onClick: onApply,\n    className: styles['apply-button'],\n    ref: applyButtonRef,\n    formAction: \"none\"\n  }, i18nStrings.applyButtonLabel))))), React.createElement(TabTrap, {\n    focusNextCallback: function focusNextCallback() {\n      var _a;\n\n      return (_a = scrollableContainerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}