{"ast":null,"code":"import { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { fireCancelableEvent, isPlainLeftClick } from '../../internal/events';\nimport { KeyCode } from '../../internal/keycode';\nimport { getItemTarget, isItemGroup, isLinkItem } from './utils';\nimport useHighlightedMenu from './use-highlighted-menu';\nexport function useButtonDropdown(_a) {\n  var items = _a.items,\n      onItemClick = _a.onItemClick,\n      onItemFollow = _a.onItemFollow,\n      hasExpandableGroups = _a.hasExpandableGroups,\n      _b = _a.isInRestrictedView,\n      isInRestrictedView = _b === void 0 ? false : _b,\n      usingMouse = _a.usingMouse;\n\n  var _c = useHighlightedMenu({\n    items: items,\n    hasExpandableGroups: hasExpandableGroups,\n    isInRestrictedView: isInRestrictedView\n  }),\n      targetItem = _c.targetItem,\n      isHighlighted = _c.isHighlighted,\n      isExpanded = _c.isExpanded,\n      highlightItem = _c.highlightItem,\n      moveHighlight = _c.moveHighlight,\n      expandGroup = _c.expandGroup,\n      collapseGroup = _c.collapseGroup,\n      reset = _c.reset;\n\n  var _d = useOpenState({\n    onClose: reset\n  }),\n      isOpen = _d.isOpen,\n      closeDropdown = _d.closeDropdown,\n      toggleDropdown = _d.toggleDropdown;\n\n  var onGroupToggle = function onGroupToggle(item) {\n    return !isExpanded(item) ? expandGroup(item) : collapseGroup();\n  };\n\n  var onItemActivate = function onItemActivate(item, event) {\n    var details = {\n      id: item.id || 'undefined',\n      href: item.href,\n      external: item.external,\n      target: getItemTarget(item)\n    };\n\n    if (onItemFollow && item.href && isPlainLeftClick(event)) {\n      fireCancelableEvent(onItemFollow, details, event);\n    }\n\n    if (onItemClick) {\n      fireCancelableEvent(onItemClick, details, event);\n    }\n\n    closeDropdown();\n  };\n\n  var doVerticalNavigation = function doVerticalNavigation(direction) {\n    if (isOpen) {\n      moveHighlight(direction);\n    }\n  };\n\n  var openAndSelectFirst = function openAndSelectFirst(event) {\n    toggleDropdown();\n    moveHighlight(1);\n    event.preventDefault();\n  };\n\n  var actOnParentDropdown = function actOnParentDropdown(event) {\n    // if there is no highlighted item we act on the trigger by opening or closing dropdown\n    if (!targetItem) {\n      if (isOpen && !isInRestrictedView) {\n        toggleDropdown();\n      } else {\n        openAndSelectFirst(event);\n      }\n    } else {\n      if (isItemGroup(targetItem)) {\n        onGroupToggle(targetItem, event);\n      } else {\n        onItemActivate(targetItem, event);\n      }\n    }\n  };\n\n  var activate = function activate(event, isEnter) {\n    usingMouse.current = false; // if item is a link we rely on default behavior of an anchor, no need to prevent\n\n    if (targetItem && isLinkItem(targetItem) && isEnter) {\n      return;\n    }\n\n    event.preventDefault();\n    actOnParentDropdown(event);\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    switch (event.keyCode) {\n      case KeyCode.down:\n        {\n          doVerticalNavigation(1);\n          event.preventDefault();\n          break;\n        }\n\n      case KeyCode.up:\n        {\n          doVerticalNavigation(-1);\n          event.preventDefault();\n          break;\n        }\n\n      case KeyCode.space:\n        {\n          // Prevent scrolling the list of items and highlighting the trigger\n          usingMouse.current = false;\n          event.preventDefault();\n          break;\n        }\n\n      case KeyCode.enter:\n        {\n          if (!(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {\n            activate(event, true);\n          }\n\n          break;\n        }\n\n      case KeyCode.left:\n      case KeyCode.right:\n        {\n          if (targetItem && !targetItem.disabled && isItemGroup(targetItem) && !isExpanded(targetItem)) {\n            expandGroup();\n          } else if (hasExpandableGroups) {\n            collapseGroup();\n          }\n\n          event.preventDefault();\n          break;\n        }\n\n      case KeyCode.escape:\n        {\n          closeDropdown();\n          event.preventDefault();\n          break;\n        }\n\n      case KeyCode.tab:\n        {\n          closeDropdown();\n          break;\n        }\n    }\n  };\n\n  var onKeyUp = function onKeyUp(event) {\n    // We need to handle activating items with Space separately because there is a bug\n    // in Firefox where changing the focus during a Space keydown event it will trigger\n    // unexpected click events on the new element: https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n    if (event.keyCode === KeyCode.space && !(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {\n      activate(event);\n    }\n  };\n\n  return {\n    isOpen: isOpen,\n    targetItem: targetItem,\n    isHighlighted: isHighlighted,\n    isExpanded: isExpanded,\n    highlightItem: highlightItem,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onItemActivate: onItemActivate,\n    onGroupToggle: onGroupToggle,\n    toggleDropdown: toggleDropdown\n  };\n}","map":null,"metadata":{},"sourceType":"module"}