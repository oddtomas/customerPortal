{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { warnOnce } from '../internal/logging';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport WizardForm from './wizard-form';\nimport WizardNavigation from './wizard-navigation';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\nvar scrollToTop = function scrollToTop(ref) {\n  var _a;\n\n  var overflowRegex = /(auto|scroll)/;\n  var parent = (_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.parentElement;\n\n  while (parent && !overflowRegex.test(getComputedStyle(parent).overflow)) {\n    parent = parent.parentElement;\n  }\n\n  if (parent) {\n    parent.scrollTop = 0;\n  } else {\n    window.scrollTo(window.pageXOffset, 0);\n  }\n};\n\nexport default function Wizard(_a) {\n  var steps = _a.steps,\n      controlledActiveStepIndex = _a.activeStepIndex,\n      i18nStrings = _a.i18nStrings,\n      _b = _a.isLoadingNextStep,\n      isLoadingNextStep = _b === void 0 ? false : _b,\n      _c = _a.allowSkipTo,\n      allowSkipTo = _c === void 0 ? false : _c,\n      secondaryActions = _a.secondaryActions,\n      onCancel = _a.onCancel,\n      onSubmit = _a.onSubmit,\n      onNavigate = _a.onNavigate,\n      rest = __rest(_a, [\"steps\", \"activeStepIndex\", \"i18nStrings\", \"isLoadingNextStep\", \"allowSkipTo\", \"secondaryActions\", \"onCancel\", \"onSubmit\", \"onNavigate\"]);\n\n  var __internalRootRef = useBaseComponent('Wizard').__internalRootRef;\n\n  var baseProps = getBaseProps(rest);\n\n  var _d = useContainerBreakpoints(['xs']),\n      breakpoint = _d[0],\n      breakpointsRef = _d[1];\n\n  var refObject = useRef(null);\n  var ref = useMergeRefs(breakpointsRef, refObject, __internalRootRef);\n  var smallContainer = breakpoint === 'default';\n\n  var _e = useControllable(controlledActiveStepIndex, onNavigate, 0, {\n    componentName: 'Wizard',\n    controlledProp: 'activeStepIndex',\n    changeHandler: 'onNavigate'\n  }),\n      activeStepIndex = _e[0],\n      setActiveStepIndex = _e[1];\n\n  var actualActiveStepIndex = activeStepIndex ? Math.min(activeStepIndex, steps.length - 1) : 0;\n  var farthestStepIndex = useRef(actualActiveStepIndex);\n  farthestStepIndex.current = Math.max(farthestStepIndex.current, actualActiveStepIndex);\n  var internalRef = useRef(null);\n  useEffect(function () {\n    scrollToTop(internalRef);\n  }, [actualActiveStepIndex]);\n  var isVisualRefresh = useVisualRefresh(refObject);\n  var isLastStep = actualActiveStepIndex >= steps.length - 1;\n\n  var navigationEvent = function navigationEvent(requestedStepIndex, reason) {\n    setActiveStepIndex(requestedStepIndex);\n    fireNonCancelableEvent(onNavigate, {\n      requestedStepIndex: requestedStepIndex,\n      reason: reason\n    });\n  };\n\n  var onStepClick = function onStepClick(stepIndex) {\n    return navigationEvent(stepIndex, 'step');\n  };\n\n  var onSkipToClick = function onSkipToClick(stepIndex) {\n    return navigationEvent(stepIndex, 'skip');\n  };\n\n  var onCancelClick = function onCancelClick() {\n    return fireNonCancelableEvent(onCancel);\n  };\n\n  var onPreviousClick = function onPreviousClick() {\n    return navigationEvent(actualActiveStepIndex - 1, 'previous');\n  };\n\n  var onPrimaryClick = isLastStep ? function () {\n    return fireNonCancelableEvent(onSubmit);\n  } : function () {\n    return navigationEvent(actualActiveStepIndex + 1, 'next');\n  };\n\n  if (activeStepIndex && activeStepIndex >= steps.length) {\n    warnOnce('Wizard', \"You have set `activeStepIndex` to \".concat(activeStepIndex, \" but you have provided only \").concat(steps.length, \" steps. Its value is ignored and the component uses \").concat(steps.length - 1, \" instead.\"));\n  }\n\n  if (allowSkipTo && !i18nStrings.skipToButtonLabel) {\n    warnOnce('Wizard', \"You have set `allowSkipTo` but you have not provided `i18nStrings.skipToButtonLabel`. The skip-to button will not be rendered.\");\n  }\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: ref\n  }), React.createElement(\"div\", {\n    className: clsx(styles.wizard, isVisualRefresh && styles.refresh, smallContainer && styles['small-container']),\n    ref: internalRef\n  }, React.createElement(WizardNavigation, {\n    activeStepIndex: actualActiveStepIndex,\n    farthestStepIndex: farthestStepIndex.current,\n    allowSkipTo: allowSkipTo,\n    hidden: smallContainer,\n    i18nStrings: i18nStrings,\n    isVisualRefresh: isVisualRefresh,\n    isLoadingNextStep: isLoadingNextStep,\n    onStepClick: onStepClick,\n    onSkipToClick: onSkipToClick,\n    steps: steps\n  }), React.createElement(\"div\", {\n    className: clsx(styles.form, isVisualRefresh && styles.refresh, smallContainer && styles['small-container'])\n  }, isVisualRefresh && React.createElement(\"div\", {\n    className: clsx(styles.background, 'awsui-context-content-header')\n  }), React.createElement(WizardForm, {\n    steps: steps,\n    isVisualRefresh: isVisualRefresh,\n    showCollapsedSteps: smallContainer,\n    i18nStrings: i18nStrings,\n    activeStepIndex: actualActiveStepIndex,\n    isPrimaryLoading: isLoadingNextStep,\n    allowSkipTo: allowSkipTo,\n    secondaryActions: secondaryActions,\n    onCancelClick: onCancelClick,\n    onPreviousClick: onPreviousClick,\n    onSkipToClick: onSkipToClick,\n    onPrimaryClick: onPrimaryClick\n  }))));\n}\napplyDisplayName(Wizard, 'Wizard');","map":null,"metadata":{},"sourceType":"module"}