{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../../base-component';\n\nvar SelectableItem = function SelectableItem(_a, ref) {\n  var _b;\n\n  var content = _a.children,\n      ariaSelected = _a.ariaSelected,\n      ariaChecked = _a.ariaChecked,\n      selected = _a.selected,\n      highlighted = _a.highlighted,\n      disabled = _a.disabled,\n      hasBackground = _a.hasBackground,\n      isParent = _a.isParent,\n      isChild = _a.isChild,\n      isKeyboard = _a.isKeyboard,\n      virtualPosition = _a.virtualPosition,\n      padBottom = _a.padBottom,\n      isNextSelected = _a.isNextSelected,\n      useInteractiveGroups = _a.useInteractiveGroups,\n      screenReaderContent = _a.screenReaderContent,\n      ariaPosinset = _a.ariaPosinset,\n      ariaSetsize = _a.ariaSetsize,\n      restProps = __rest(_a, [\"children\", \"ariaSelected\", \"ariaChecked\", \"selected\", \"highlighted\", \"disabled\", \"hasBackground\", \"isParent\", \"isChild\", \"isKeyboard\", \"virtualPosition\", \"padBottom\", \"isNextSelected\", \"useInteractiveGroups\", \"screenReaderContent\", \"ariaPosinset\", \"ariaSetsize\"]);\n\n  var _c = getBaseProps(restProps),\n      className = _c.className,\n      rest = __rest(_c, [\"className\"]);\n\n  var classNames = clsx(className, styles['selectable-item'], (_b = {}, _b[styles.selected] = selected, _b[styles.highlighted] = highlighted, _b[styles['has-background']] = hasBackground, _b[styles.parent] = isParent, _b[styles.child] = isChild, _b[styles['is-keyboard']] = isKeyboard, _b[styles.disabled] = disabled, _b[styles.virtual] = virtualPosition !== undefined, _b[styles['pad-bottom']] = padBottom, _b[styles['next-item-selected']] = isNextSelected, _b[styles.interactiveGroups] = useInteractiveGroups, _b));\n  var contentRef = useRef(null);\n  var screenReaderContentRef = useRef(null);\n  useLayoutEffect(function () {\n    // the state of aria-hidden and announcement is not set back because NVDA+Firefox would announce\n    // the item which lost highlight\n    // set aria-hidden true when there is announcement content, so that screen reader still announce\n    // meaningful content when navigate with screen reader cursor\n    // imperatively update to avoid announcement made multiple times when content updates\n    if (highlighted && screenReaderContent) {\n      if (contentRef.current) {\n        contentRef.current.setAttribute('aria-hidden', 'true');\n      }\n\n      if (screenReaderContentRef.current) {\n        screenReaderContentRef.current.textContent = screenReaderContent;\n      }\n    }\n  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);\n  var style = virtualPosition !== undefined ? {\n    transform: \"translateY(\".concat(virtualPosition, \"px)\")\n  } : undefined;\n  var a11yProperties = {\n    'aria-disabled': disabled\n  };\n\n  if (isParent && !useInteractiveGroups) {\n    a11yProperties['aria-hidden'] = true;\n  }\n\n  if (ariaSelected) {\n    a11yProperties['aria-selected'] = ariaSelected;\n  } // Safari+VO needs aria-checked for multi-selection. Otherwise it only announces selected option even though another option is highlighted.\n\n\n  if (ariaChecked) {\n    a11yProperties['aria-checked'] = ariaChecked;\n  }\n\n  if (ariaPosinset && ariaSetsize) {\n    a11yProperties['aria-posinset'] = ariaPosinset;\n    a11yProperties['aria-setsize'] = ariaSetsize;\n  }\n\n  return React.createElement(\"li\", __assign({\n    role: \"option\",\n    className: classNames,\n    style: style\n  }, a11yProperties, rest), React.createElement(\"div\", {\n    className: styles['option-content'],\n    ref: contentRef\n  }, content), React.createElement(\"div\", {\n    className: styles['measure-strut'],\n    ref: ref\n  }), React.createElement(\"div\", {\n    className: styles['screenreader-content'],\n    ref: screenReaderContentRef\n  }));\n};\n\nexport default React.forwardRef(SelectableItem);","map":null,"metadata":{},"sourceType":"module"}