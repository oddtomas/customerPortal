{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { useRef } from 'react';\nimport { processItems, processSelectedItems, itemsAreEqual } from './operations/index.js';\nimport { createSyncProps } from './utils.js';\nimport { useCollectionState } from './use-collection-state.js';\nexport function useCollection(allItems, options) {\n  var collectionRef = useRef(null);\n\n  var _a = useCollectionState(options, collectionRef),\n      state = _a[0],\n      actions = _a[1];\n\n  var _b = processItems(allItems, state, options),\n      items = _b.items,\n      pagesCount = _b.pagesCount,\n      filteredItemsCount = _b.filteredItemsCount,\n      actualPageIndex = _b.actualPageIndex;\n\n  if (options.selection && !options.selection.keepSelection) {\n    var newSelectedItems = processSelectedItems(items, state.selectedItems, options.selection.trackBy);\n\n    if (!itemsAreEqual(newSelectedItems, state.selectedItems, options.selection.trackBy)) {\n      // This is a recommended pattern for how to handle the state, dependent on the incoming props\n      // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n      actions.setSelectedItems(newSelectedItems);\n    }\n  }\n\n  return __assign({\n    items: items,\n    filteredItemsCount: filteredItemsCount,\n    actions: actions\n  }, createSyncProps(options, state, actions, collectionRef, {\n    actualPageIndex: actualPageIndex,\n    pagesCount: pagesCount,\n    allItems: allItems\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}