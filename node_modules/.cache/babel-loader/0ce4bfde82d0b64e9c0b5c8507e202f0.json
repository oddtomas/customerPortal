{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { getOverflowParents } from '../../internal/utils/scrollable-containers';\nimport { findUpUntil } from '../../internal/utils/dom';\nimport tableStyles from '../styles.css.js';\nimport styles from './styles.css.js';\nvar AUTO_GROW_START_TIME = 10;\nvar AUTO_GROW_INTERVAL = 10;\nvar AUTO_GROW_INCREMENT = 5;\nexport function Resizer(_a) {\n  var onDragMove = _a.onDragMove,\n      onFinish = _a.onFinish;\n\n  var _b = useState(false),\n      isDragging = _b[0],\n      setIsDragging = _b[1];\n\n  var _c = useState(),\n      headerCell = _c[0],\n      setHeaderCell = _c[1];\n\n  var autoGrowTimeout = useRef();\n  var onFinishStable = useStableEventHandler(onFinish);\n  var onDragStable = useStableEventHandler(onDragMove);\n  useEffect(function () {\n    if (!isDragging || !headerCell) {\n      return;\n    }\n\n    var rootElement = findUpUntil(headerCell, function (element) {\n      return element.className.indexOf(tableStyles.root) > -1;\n    });\n    var tableElement = rootElement.querySelector(\"table\"); // tracker is rendered inside table wrapper to align with its size\n\n    var tracker = rootElement.querySelector(\".\".concat(styles.tracker));\n    var scrollParent = getOverflowParents(headerCell)[0];\n\n    var _a = scrollParent.getBoundingClientRect(),\n        leftEdge = _a.left,\n        rightEdge = _a.right;\n\n    var updateTrackerPosition = function updateTrackerPosition(newOffset) {\n      var scrollParentLeft = tableElement.getBoundingClientRect().left;\n      tracker.style.top = headerCell.getBoundingClientRect().height + 'px'; // minus one pixel to offset the cell border\n\n      tracker.style.left = newOffset - scrollParentLeft - 1 + 'px';\n    };\n\n    var updateColumnWidth = function updateColumnWidth(newWidth) {\n      // callbacks must be the last calls in the handler, because they may cause an extra update\n      onDragStable(newWidth); // we read the element size again because the previous callback changes it\n\n      updateTrackerPosition(headerCell.getBoundingClientRect().right);\n    };\n\n    var resizeColumn = function resizeColumn(offset) {\n      if (offset > leftEdge) {\n        var cellLeft = headerCell.getBoundingClientRect().left;\n        var newWidth = offset - cellLeft; // callbacks must be the last calls in the handler, because they may cause an extra update\n\n        updateColumnWidth(newWidth);\n      }\n    };\n\n    var onAutoGrow = function onAutoGrow() {\n      var width = headerCell.getBoundingClientRect().width;\n      autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_INTERVAL); // callbacks must be the last calls in the handler, because they may cause an extra update\n\n      updateColumnWidth(width + AUTO_GROW_INCREMENT);\n      scrollParent.scrollLeft += AUTO_GROW_INCREMENT;\n    };\n\n    var onMouseMove = function onMouseMove(event) {\n      clearTimeout(autoGrowTimeout.current);\n      var offset = event.pageX;\n\n      if (offset > rightEdge) {\n        autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_START_TIME);\n      } else {\n        resizeColumn(offset);\n      }\n    };\n\n    var onMouseUp = function onMouseUp(event) {\n      resizeColumn(event.pageX);\n      setIsDragging(false);\n      onFinishStable();\n      clearTimeout(autoGrowTimeout.current);\n    };\n\n    updateTrackerPosition(headerCell.getBoundingClientRect().right);\n    document.body.classList.add(styles['resize-active']);\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n    return function () {\n      clearTimeout(autoGrowTimeout.current);\n      document.body.classList.remove(styles['resize-active']);\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n  }, [headerCell, isDragging, onDragStable, onFinishStable]);\n  return React.createElement(\"span\", {\n    className: clsx(styles.resizer, isDragging && styles['resizer-active']),\n    onMouseDown: function onMouseDown(event) {\n      if (event.button !== 0) {\n        return;\n      }\n\n      event.preventDefault();\n      var headerCell = findUpUntil(event.currentTarget, function (element) {\n        return element.tagName.toLowerCase() === 'th';\n      });\n      setIsDragging(true);\n      setHeaderCell(headerCell);\n    }\n  });\n}\nexport function ResizeTracker() {\n  return React.createElement(\"span\", {\n    className: styles.tracker\n  });\n}","map":null,"metadata":{},"sourceType":"module"}