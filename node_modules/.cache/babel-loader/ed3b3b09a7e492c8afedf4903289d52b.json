{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { getDaysInMonth, isAfter, isBefore, isLastDayOfMonth, isSameMonth, isToday as isTodayFn } from 'date-fns';\nimport { getDateLabel } from '../../../../date-picker/calendar/utils/intl';\nimport clsx from 'clsx';\nimport { KeyCode } from '../../../../internal/keycode.js';\nimport { formatDate } from '../../../../date-picker/calendar/utils/date.js';\nimport useFocusVisible from '../../../../internal/hooks/focus-visible';\n\nfunction propsAreEqual(prevProps, nextProps) {\n  return prevProps.locale === nextProps.locale && prevProps.baseDate.getTime() === nextProps.baseDate.getTime() && prevProps.date.getTime() === nextProps.date.getTime() && prevProps.isDateInFirstRow === nextProps.isDateInFirstRow && prevProps.isDateInFirstColumn === nextProps.isDateInFirstColumn && prevProps.isDateInLastColumn === nextProps.isDateInLastColumn && prevProps.isDateInSelectionStartWeek === nextProps.isDateInSelectionStartWeek && prevProps.isDateInSelectionEndWeek === nextProps.isDateInSelectionEndWeek && prevProps.isFocusedDate === nextProps.isFocusedDate && prevProps.isDateEnabled === nextProps.isDateEnabled && prevProps.todayAriaLabel === nextProps.todayAriaLabel && prevProps.onSelectDate === nextProps.onSelectDate && prevProps.onFocusDate === nextProps.onFocusDate && prevProps.isInRange === nextProps.isInRange && prevProps.isSelected === nextProps.isSelected && prevProps.isStartDate === nextProps.isStartDate && prevProps.isEndDate === nextProps.isEndDate && prevProps.onlyOneSelected === nextProps.onlyOneSelected && prevProps.isRangeStartDate === nextProps.isRangeStartDate && prevProps.isRangeEndDate === nextProps.isRangeEndDate;\n}\n\nvar GridDay = React.memo(React.forwardRef(function (_a, ref) {\n  var _b, _c, _d;\n\n  var locale = _a.locale,\n      baseDate = _a.baseDate,\n      date = _a.date,\n      isSelected = _a.isSelected,\n      isStartDate = _a.isStartDate,\n      isEndDate = _a.isEndDate,\n      onlyOneSelected = _a.onlyOneSelected,\n      isRangeStartDate = _a.isRangeStartDate,\n      isRangeEndDate = _a.isRangeEndDate,\n      isFocusedDate = _a.isFocusedDate,\n      isDateEnabled = _a.isDateEnabled,\n      todayAriaLabel = _a.todayAriaLabel,\n      onSelectDate = _a.onSelectDate,\n      onFocusDate = _a.onFocusDate,\n      isDateInFirstRow = _a.isDateInFirstRow,\n      isDateInFirstColumn = _a.isDateInFirstColumn,\n      isDateInLastColumn = _a.isDateInLastColumn,\n      isDateInSelectionStartWeek = _a.isDateInSelectionStartWeek,\n      isDateInSelectionEndWeek = _a.isDateInSelectionEndWeek,\n      isInRange = _a.isInRange;\n  var dayLabel = getDateLabel(locale, date);\n  var labels = [dayLabel];\n  var isEnabled = !isDateEnabled || isDateEnabled(date);\n  var isFocusable = isFocusedDate && isEnabled;\n  var isToday = isTodayFn(date);\n  var computedAttributes = {};\n  var focusVisible = useFocusVisible();\n  var baseClasses = (_b = {}, _b[styles['in-first-row']] = isDateInFirstRow, _b[styles['in-first-column']] = isDateInFirstColumn, _b);\n\n  if (!isSameMonth(date, baseDate)) {\n    var classNames_1 = clsx(styles.day, baseClasses, (_c = {}, _c[styles['in-previous-month']] = isBefore(date, baseDate), _c[styles['last-day-of-month']] = isLastDayOfMonth(date), _c[styles['in-next-month']] = isAfter(date, baseDate), _c));\n    return React.createElement(\"div\", {\n      className: classNames_1,\n      ref: ref\n    });\n  }\n\n  var classNames = clsx(styles.day, baseClasses, (_d = {}, _d[styles['in-current-month']] = isSameMonth(date, baseDate), _d[styles.enabled] = isEnabled, _d[styles.selected] = isSelected, _d[styles['start-date']] = isStartDate, _d[styles['end-date']] = isEndDate, _d[styles['range-start-date']] = isRangeStartDate, _d[styles['range-end-date']] = isRangeEndDate, _d[styles['no-range']] = isSelected && onlyOneSelected, _d[styles['in-range']] = isInRange, _d[styles['in-range-border-top']] = isDateInSelectionStartWeek || date.getDate() <= 7, _d[styles['in-range-border-bottom']] = isDateInSelectionEndWeek || date.getDate() > getDaysInMonth(date) - 7, _d[styles['in-range-border-left']] = isDateInFirstColumn || date.getDate() === 1 || isRangeStartDate, _d[styles['in-range-border-right']] = isDateInLastColumn || isLastDayOfMonth(date) || isRangeEndDate, _d[styles.today] = isToday, _d));\n  computedAttributes['aria-pressed'] = isSelected || isInRange;\n\n  if (isToday) {\n    labels.push(todayAriaLabel);\n    computedAttributes['aria-current'] = 'date';\n  }\n\n  if (isEnabled) {\n    computedAttributes.onClick = function () {\n      return onSelectDate(date);\n    };\n\n    computedAttributes.onFocus = function () {\n      return onFocusDate(date);\n    };\n\n    computedAttributes.tabIndex = -1;\n  }\n\n  if (isFocusable) {\n    computedAttributes.tabIndex = 0;\n  }\n\n  var onKeyDown = function onKeyDown(event) {\n    if (event.keyCode === KeyCode.space) {\n      event.preventDefault();\n      onSelectDate(date);\n    }\n  };\n\n  return React.createElement(\"div\", __assign({\n    className: classNames,\n    \"aria-label\": labels.join('. '),\n    \"data-date\": formatDate(date),\n    role: \"button\"\n  }, computedAttributes, {\n    ref: ref,\n    onKeyDown: onKeyDown\n  }, focusVisible), React.createElement(\"span\", {\n    className: styles['day-inner']\n  }, date.getDate()));\n}), propsAreEqual);\nexport default GridDay;","map":null,"metadata":{},"sourceType":"module"}