{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { addDays, addMonths, isSameMonth, startOfMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport useFocusVisible from '../../internal/hooks/focus-visible/index.js';\nimport CalendarHeader from './header';\nimport Grid from './grid';\nimport moveFocusHandler from './utils/move-focus-handler';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id/index.js';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs/index.js';\nvar Calendar = React.forwardRef(function (_a, ref) {\n  var locale = _a.locale,\n      startOfWeek = _a.startOfWeek,\n      displayedDate = _a.displayedDate,\n      _b = _a.focusedDate,\n      focusedDate = _b === void 0 ? null : _b,\n      todayAriaLabel = _a.todayAriaLabel,\n      calendarHasFocus = _a.calendarHasFocus,\n      selectedDate = _a.selectedDate,\n      isDateEnabled = _a.isDateEnabled,\n      onChangeMonth = _a.onChangeMonth,\n      onSelectDate = _a.onSelectDate,\n      onFocusDate = _a.onFocusDate,\n      previousMonthLabel = _a.previousMonthLabel,\n      nextMonthLabel = _a.nextMonthLabel;\n  var focusVisible = useFocusVisible();\n  var headerId = useUniqueId('calendar-dialog-title-');\n  var elementRef = useRef(null);\n  var calendarRef = useMergeRefs(elementRef, ref);\n  var gridWrapperRef = useRef(null);\n\n  var _c = useState(false),\n      gridHasFocus = _c[0],\n      setGridHasFocus = _c[1];\n\n  var selectFocusedDate = function selectFocusedDate(selected, baseDate) {\n    if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {\n      return selected;\n    }\n\n    var today = new Date();\n\n    if (isDateEnabled(today) && isSameMonth(today, baseDate)) {\n      return today;\n    }\n\n    if (isDateEnabled(baseDate)) {\n      return baseDate;\n    }\n\n    return null;\n  };\n\n  var getBaseDate = function getBaseDate(date) {\n    var startDate = startOfMonth(date);\n\n    if (isDateEnabled(startDate)) {\n      return startDate;\n    }\n\n    return moveFocusHandler(startDate, isDateEnabled, function (date) {\n      return addDays(date, 1);\n    });\n  };\n\n  var baseDate = getBaseDate(displayedDate);\n\n  var focusCurrentDate = function focusCurrentDate() {\n    var _a, _b;\n\n    return (_b = (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(\".\".concat(styles['calendar-day-focusable']))) === null || _b === void 0 ? void 0 : _b.focus();\n  };\n\n  var onHeaderChangeMonthHandler = function onHeaderChangeMonthHandler(isPrevious) {\n    return onChangeMonth(addMonths(baseDate, isPrevious ? -1 : 1));\n  };\n\n  useEffect(function () {\n    // focus current date if the focus is already inside the calendar grid\n    if (focusedDate instanceof Date && isSameMonth(focusedDate, baseDate) && gridHasFocus) {\n      focusCurrentDate();\n    }\n  }, [baseDate, focusedDate, gridHasFocus]);\n  useEffect(function () {\n    var _a, _b;\n\n    var calendarShouldHaveFocus = calendarHasFocus;\n    var calendarActuallyHasFocus = (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.contains(document.activeElement);\n\n    if (calendarShouldHaveFocus && !calendarActuallyHasFocus) {\n      (_b = elementRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n    } // When the baseDate or isDateEnabled changes, there might not be a focusable date in the grid anymore\n\n  }, [calendarHasFocus, baseDate, isDateEnabled]);\n\n  if (calendarHasFocus && !focusedDate) {\n    focusedDate = selectFocusedDate(selectedDate, baseDate);\n  }\n\n  var onGridBlur = function onGridBlur(event) {\n    var _a;\n\n    var newFocusTargetIsInGrid = event.relatedTarget && ((_a = gridWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget));\n\n    if (!newFocusTargetIsInGrid) {\n      setGridHasFocus(false);\n    }\n  };\n\n  var onGridFocus = function onGridFocus() {\n    if (!gridHasFocus) {\n      setGridHasFocus(true);\n    }\n  };\n\n  return React.createElement(\"div\", __assign({}, focusVisible, {\n    className: styles.calendar,\n    tabIndex: 0,\n    role: \"application\",\n    \"aria-describedby\": headerId,\n    ref: calendarRef\n  }), React.createElement(\"div\", {\n    className: styles['calendar-inner']\n  }, React.createElement(CalendarHeader, {\n    headerId: headerId,\n    baseDate: baseDate,\n    locale: locale,\n    onChangeMonth: onHeaderChangeMonthHandler,\n    previousMonthLabel: previousMonthLabel,\n    nextMonthLabel: nextMonthLabel,\n    calendarHasFocus: calendarHasFocus\n  }), React.createElement(\"div\", {\n    onBlur: onGridBlur,\n    onFocus: onGridFocus,\n    ref: gridWrapperRef\n  }, React.createElement(Grid, {\n    locale: locale,\n    baseDate: baseDate,\n    isDateEnabled: isDateEnabled,\n    focusedDate: focusedDate,\n    onSelectDate: onSelectDate,\n    onFocusDate: onFocusDate,\n    onChangeMonth: onChangeMonth,\n    startOfWeek: startOfWeek,\n    todayAriaLabel: todayAriaLabel,\n    selectedDate: selectedDate,\n    handleFocusMove: moveFocusHandler\n  }))));\n});\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}