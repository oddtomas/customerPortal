{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport { useEffect, useState } from 'react';\nimport styles from './styles.css.js';\nimport { getOverflowParentDimensions } from '../internal/utils/scrollable-containers';\nimport { browserScrollbarSize } from '../internal/utils/browser-scrollbar-size';\nimport { supportsStickyPosition, getContainingBlock } from '../internal/utils/dom';\n\nvar updatePosition = function updatePosition(tableEl, wrapperEl, scrollbarEl, scrollbarContentEl, hasContainingBlock, consideredFooterHeight) {\n  if (!tableEl || !scrollbarEl || !wrapperEl) {\n    return;\n  } // parent is either some container or document itself\n\n\n  var parent = getOverflowParentDimensions(wrapperEl)[0];\n  var parentBottom = parent.top + parent.height; // table bottom is visible when\n  // 1. table bottom reached end of the window\n  // 2. table bottom is not overlapped by footer\n\n  var _a = tableEl.getBoundingClientRect(),\n      tableTop = _a.top,\n      tableBottom = _a.bottom,\n      tableWidth = _a.width;\n\n  var wrapperWidth = wrapperEl.getBoundingClientRect().width; //scrollbar correction is needed for\n  // #1 when scrollbars are constantly visible,\n  // we want no visible break when switching between fake and real scrollbars\n  // #2 when scrollbars are visible only on scrolling and half transparent (on mac)\n  // we want to avoid any overlap between fake and real scrollbar\n  // using 15 px as a height of transparent scrollbar on mac\n\n  var scrollbarHeight = browserScrollbarSize().height;\n  var scrollBarCorrection = scrollbarHeight > 0 ? scrollbarHeight : -15 / 2;\n  var tableBottomIsVisible = parentBottom - consideredFooterHeight >= tableBottom + scrollBarCorrection;\n  var tableTopIsHidden = tableTop >= parentBottom - consideredFooterHeight - scrollBarCorrection;\n  var areaIsScrollable = tableWidth > wrapperWidth;\n\n  if (tableBottomIsVisible || tableTopIsHidden || !areaIsScrollable) {\n    scrollbarEl.classList.remove(styles['sticky-scrollbar-visible']);\n  } else {\n    // when scrollbar is not displayed scrollLeft property cannot be set by useScrollSync\n    // that's why syncing it separately\n    if (!scrollbarEl.classList.contains(styles['sticky-scrollbar-visible'])) {\n      requestAnimationFrame(function () {\n        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;\n      });\n    }\n\n    scrollbarEl.classList.add(styles['sticky-scrollbar-visible']);\n  }\n\n  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {\n    scrollbarEl.style.height = \"\".concat(scrollbarHeight, \"px\");\n    scrollbarContentEl.style.height = \"\".concat(scrollbarHeight, \"px\");\n  }\n\n  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {\n    var parent_1 = getOverflowParentDimensions(wrapperEl)[0];\n    var wrapperElRect = wrapperEl.getBoundingClientRect();\n    var tableElRect = tableEl.getBoundingClientRect();\n    scrollbarEl.style.width = \"\".concat(wrapperElRect.width, \"px\");\n    scrollbarContentEl.style.width = \"\".concat(tableElRect.width, \"px\"); // when using sticky scrollbars in containers\n    // we agreed to ignore dynamic bottom calculations for footer overlap\n\n    scrollbarEl.style.left = hasContainingBlock ? '0px' : \"\".concat(wrapperElRect.left, \"px\");\n    scrollbarEl.style.top = hasContainingBlock ? '0px' : \"\".concat(Math.min(parent_1.top + parent_1.height, window.innerHeight - consideredFooterHeight), \"px\");\n  }\n};\n\nexport function useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, footerHeight) {\n  // We don't take into account containing-block calculations because that would\n  // unnecessarily overcomplicate the position logic. For now, we assume that a\n  // containing block, if present, is below the app layout and above the overflow\n  // parent, which is a pretty safe assumption.\n  var _a = useState(false),\n      hasContainingBlock = _a[0],\n      setHasContainingBlock = _a[1];\n\n  var consideredFooterHeight = hasContainingBlock ? 0 : footerHeight;\n  useEffect(function () {\n    if (supportsStickyPosition()) {\n      var scrollHandler_1 = function scrollHandler_1() {\n        updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);\n      };\n\n      scrollHandler_1();\n      window.addEventListener('scroll', scrollHandler_1, true);\n      return function () {\n        window.removeEventListener('scroll', scrollHandler_1, true);\n      };\n    }\n  }, [scrollbarRef, tableRef, wrapperRef, consideredFooterHeight, scrollbarContentRef, hasContainingBlock]);\n  var wrapperEl = wrapperRef.current;\n  useEffect(function () {\n    if (wrapperEl && supportsStickyPosition()) {\n      setHasContainingBlock(!!getContainingBlock(wrapperEl));\n    }\n  }, [wrapperEl]);\n  useEffect(function () {\n    if (supportsStickyPosition() && tableRef.current) {\n      var observer_1 = new ResizeObserver(function (entries) {\n        if (scrollbarContentRef.current) {\n          scrollbarContentRef.current.style.width = \"\".concat(entries[0].borderBoxSize[0].inlineSize, \"px\");\n          updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);\n        }\n      });\n      observer_1.observe(tableRef.current);\n      return function () {\n        observer_1.disconnect();\n      };\n    }\n  }, [scrollbarContentRef, scrollbarRef, tableRef, wrapperRef, consideredFooterHeight, hasContainingBlock]);\n  useEffect(function () {\n    if (supportsStickyPosition()) {\n      var resizeHandler_1 = function resizeHandler_1() {\n        updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);\n      };\n\n      window.addEventListener('resize', resizeHandler_1);\n      return function () {\n        window.removeEventListener('resize', resizeHandler_1);\n      };\n    }\n  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, hasContainingBlock, consideredFooterHeight]);\n}","map":null,"metadata":{},"sourceType":"module"}