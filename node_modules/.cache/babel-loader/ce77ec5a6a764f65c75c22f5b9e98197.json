{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { ResizableBox } from 'react-resizable';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { getBaseProps } from '../internal/base-component';\nimport { KeyCode } from '../internal/keycode';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { Pane } from './pane';\nimport { useChangeEffect } from './listeners';\nimport { getDefaultConfig, getAceTheme, getLanguageLabel, DEFAULT_DARK_THEME, DEFAULT_LIGHT_THEME, getDefaultTheme } from './util';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { setupEditor } from './setup-editor';\nimport handler from './resize-handler';\nimport PreferencesModal from './preferences-modal';\nimport LoadingScreen from './loading-screen';\nimport ErrorScreen from './error-screen';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useCurrentMode } from '../internal/hooks/use-visual-mode';\nimport { StatusBar } from './status-bar';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useControllable } from '../internal/hooks/use-controllable';\nexport default function CodeEditor(props) {\n  var _a;\n\n  var __internalRootRef = useBaseComponent('CodeEditor').__internalRootRef;\n\n  var _b = useFormFieldContext(props),\n      controlId = _b.controlId,\n      ariaLabelledby = _b.ariaLabelledby,\n      ariaDescribedby = _b.ariaDescribedby;\n\n  var ace = props.ace,\n      value = props.value,\n      language = props.language,\n      i18nStrings = props.i18nStrings,\n      editorContentHeight = props.editorContentHeight,\n      onEditorContentResize = props.onEditorContentResize,\n      rest = __rest(props, [\"ace\", \"value\", \"language\", \"i18nStrings\", \"editorContentHeight\", \"onEditorContentResize\"]);\n\n  var _c = useControllable(editorContentHeight, onEditorContentResize, 480, {\n    componentName: 'code-editor',\n    changeHandler: 'onEditorContentResize',\n    controlledProp: 'editorContentHeight'\n  }),\n      _d = _c[0],\n      editorHeight = _d === void 0 ? 480 : _d,\n      setEditorHeight = _c[1];\n\n  var baseProps = getBaseProps(rest);\n\n  var _e = useState(),\n      editor = _e[0],\n      setEditor = _e[1];\n\n  var mode = useCurrentMode(__internalRootRef);\n  var defaultTheme = mode === 'dark' ? DEFAULT_DARK_THEME : DEFAULT_LIGHT_THEME;\n  var editorRef = useCallback(function (elem) {\n    if (!ace || !elem) {\n      return;\n    }\n\n    var config = getDefaultConfig();\n    setEditor(ace.edit(elem, __assign(__assign({}, config), {\n      theme: getAceTheme(getDefaultTheme(elem))\n    })));\n  }, [ace]); // loads as soon as ace lib is available\n\n  useEffect(function () {\n    if (!editor) {\n      return;\n    }\n\n    var textarea = editor.renderer.textarea;\n\n    if (!textarea) {\n      return;\n    }\n\n    var updateAttribute = function updateAttribute(attribute, value) {\n      return value ? textarea.setAttribute(attribute, value) : textarea.removeAttribute(attribute);\n    };\n\n    updateAttribute('id', controlId);\n    updateAttribute('aria-labelledby', ariaLabelledby);\n    updateAttribute('aria-describedby', ariaDescribedby);\n  }, [ariaDescribedby, ariaLabelledby, controlId, editor]);\n\n  var _f = useState('hidden'),\n      paneStatus = _f[0],\n      setPaneStatus = _f[1];\n\n  var _g = useState([]),\n      annotations = _g[0],\n      setAnnotations = _g[1];\n\n  var _h = useState(),\n      highlightedAnnotation = _h[0],\n      setHighlightedAnnotation = _h[1];\n\n  var _j = useState(''),\n      languageLabel = _j[0],\n      setLanguageLabel = _j[1];\n\n  var _k = useState({\n    row: 0,\n    column: 0\n  }),\n      cursorPosition = _k[0],\n      setCursorPosition = _k[1];\n\n  var _l = useState(false),\n      isTabFocused = _l[0],\n      setTabFocused = _l[1];\n\n  var errorsTabRef = useRef(null);\n  var warningsTabRef = useRef(null);\n\n  var _m = useContainerQuery(function (rect) {\n    return rect.width;\n  }),\n      codeEditorWidth = _m[0],\n      codeEditorMeasureRef = _m[1];\n\n  var refObject = useRef(null);\n  var mergedRef = useMergeRefs(codeEditorMeasureRef, refObject, __internalRootRef);\n  var isRefresh = useVisualRefresh(refObject);\n  useEffect(function () {\n    editor === null || editor === void 0 ? void 0 : editor.resize();\n  }, [editor, editorContentHeight, codeEditorWidth]);\n  var paneId = useUniqueId('code-editor-pane');\n  useEffect(function () {\n    if (!ace || !editor) {\n      return;\n    }\n\n    setupEditor(ace, editor, setAnnotations, setCursorPosition, setHighlightedAnnotation, setPaneStatus);\n    return function () {\n      editor === null || editor === void 0 ? void 0 : editor.destroy();\n    }; // TODO profile/monitor this\n  }, [ace, editor, __internalRootRef]);\n  useEffect(function () {\n    if (!editor) {\n      return;\n    }\n\n    if (value === editor.getValue()) {\n      return;\n    } // TODO maintain cursor position?\n\n\n    var pos = editor.session.selection.toJSON();\n    editor.setValue(value, -1);\n    editor.session.selection.fromJSON(pos);\n  }, [editor, value]);\n  useEffect(function () {\n    if (!editor) {\n      return;\n    }\n\n    editor.session.setMode(\"ace/mode/\".concat(language));\n    setLanguageLabel(getLanguageLabel(language));\n  }, [editor, language]);\n  useEffect(function () {\n    var _a, _b, _c, _d;\n\n    if (!editor) {\n      return;\n    }\n\n    var theme = (_b = (_a = props.preferences) === null || _a === void 0 ? void 0 : _a.theme) !== null && _b !== void 0 ? _b : defaultTheme;\n    editor.setTheme(getAceTheme(theme));\n    editor.session.setUseWrapMode((_d = (_c = props.preferences) === null || _c === void 0 ? void 0 : _c.wrapLines) !== null && _d !== void 0 ? _d : true);\n  }, [editor, defaultTheme, props.preferences]); // listeners\n\n  useChangeEffect(editor, props.onChange, props.onDelayedChange); // TODO implement other listeners\n  // Hide error panel when there are no errors to show.\n\n  useEffect(function () {\n    if (annotations.length === 0) {\n      setPaneStatus('hidden');\n    }\n\n    if (props.onValidate) {\n      fireNonCancelableEvent(props.onValidate, {\n        annotations: annotations\n      });\n    }\n  }, [annotations, props.onValidate]);\n  var errorCount = annotations.filter(function (a) {\n    return a.type === 'error';\n  }).length;\n  var warningCount = annotations.filter(function (a) {\n    return a.type === 'warning';\n  }).length;\n  var currentAnnotations = useMemo(function () {\n    return annotations.filter(function (a) {\n      return a.type === paneStatus;\n    });\n  }, [annotations, paneStatus]);\n  /*\n   * Callbacks\n   */\n\n  var onEditorKeydown = useCallback(function (e) {\n    if (editor && e.target === editor.container && e.keyCode === KeyCode.enter) {\n      e.stopPropagation();\n      e.preventDefault();\n      editor.focus();\n    }\n  }, [editor]);\n  var onTabFocus = useCallback(function () {\n    return setTabFocused(true);\n  }, []);\n  var onTabBlur = useCallback(function () {\n    return setTabFocused(false);\n  }, []);\n\n  var _onResize = useCallback(function () {\n    editor === null || editor === void 0 ? void 0 : editor.resize();\n  }, [editor]);\n\n  var onErrorPaneToggle = useCallback(function () {\n    setPaneStatus(paneStatus !== 'error' ? 'error' : 'hidden');\n  }, [paneStatus]);\n  var onWarningPaneToggle = useCallback(function () {\n    setPaneStatus(paneStatus !== 'warning' ? 'warning' : 'hidden');\n  }, [paneStatus]);\n  var onPaneClose = useCallback(function () {\n    if (paneStatus === 'error' && errorsTabRef.current) {\n      errorsTabRef.current.focus();\n    }\n\n    if (paneStatus === 'warning' && warningsTabRef.current) {\n      warningsTabRef.current.focus();\n    }\n\n    setPaneStatus('hidden');\n  }, [paneStatus]);\n\n  var onAnnotationClick = function onAnnotationClick(_a) {\n    var _b = _a.row,\n        row = _b === void 0 ? 0 : _b,\n        _c = _a.column,\n        column = _c === void 0 ? 0 : _c;\n\n    if (!editor) {\n      return;\n    }\n\n    editor.focus();\n    editor.gotoLine(row + 1, column, false);\n    setHighlightedAnnotation(undefined);\n  };\n\n  var onAnnotationClear = useCallback(function () {\n    setHighlightedAnnotation(undefined);\n  }, []);\n  /**\n   * Ignore focus lock if focused element is the pane tab button or within editor tree.\n   * This check is required:\n   * - When closing the pane with `ESC` key: The panel closes asynchronously and its focus lock\n   *   still exists when trying to focus the tab button in higher-order component.\n   * - When clicking or hittin `Enter` on an annotation: The panel remains open but focus lock\n   *   deactivates asynchronously.\n   */\n\n  var shouldHandleFocus = useCallback(function (activeElement) {\n    return activeElement !== errorsTabRef.current && activeElement !== warningsTabRef.current && !(editor === null || editor === void 0 ? void 0 : editor.container.contains(activeElement));\n  }, [editor]);\n\n  var _o = useState(false),\n      isPreferencesModalVisible = _o[0],\n      setPreferencesModalVisible = _o[1];\n\n  var onPreferencesOpen = function onPreferencesOpen() {\n    return setPreferencesModalVisible(true);\n  };\n\n  var onPreferencesConfirm = function onPreferencesConfirm(p) {\n    fireNonCancelableEvent(props.onPreferencesChange, p);\n    setPreferencesModalVisible(false);\n  };\n\n  var onPreferencesDismiss = function onPreferencesDismiss() {\n    return setPreferencesModalVisible(false);\n  };\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles['code-editor'], baseProps.className, (_a = {}, _a[styles['code-editor-refresh']] = isRefresh, _a)),\n    ref: mergedRef\n  }), props.loading && React.createElement(LoadingScreen, null, i18nStrings.loadingState), !ace && !props.loading && React.createElement(ErrorScreen, {\n    recoveryText: i18nStrings.errorStateRecovery,\n    onRecoveryClick: props.onRecoveryClick\n  }, i18nStrings.errorState), ace && !props.loading && React.createElement(React.Fragment, null, React.createElement(ResizableBox, {\n    className: styles['resizable-box'],\n    width: Infinity,\n    height: Math.max(editorHeight, 20),\n    minConstraints: [Infinity, 20],\n    axis: \"y\",\n    handle: handler,\n    onResize: function onResize(e, data) {\n      setEditorHeight(data.size.height);\n\n      _onResize();\n\n      fireNonCancelableEvent(onEditorContentResize, {\n        height: data.size.height\n      });\n    }\n  }, React.createElement(\"div\", {\n    ref: editorRef,\n    className: clsx(styles.editor, styles.ace),\n    onKeyDown: onEditorKeydown,\n    tabIndex: 0,\n    role: \"group\",\n    \"aria-label\": i18nStrings.editorGroupAriaLabel\n  })), React.createElement(\"div\", {\n    role: \"group\",\n    \"aria-label\": i18nStrings.statusBarGroupAriaLabel\n  }, React.createElement(StatusBar, {\n    languageLabel: languageLabel,\n    cursorPosition: i18nStrings.cursorPosition(cursorPosition.row + 1, cursorPosition.column + 1),\n    errorCount: errorCount,\n    warningCount: warningCount,\n    paneStatus: paneStatus,\n    onErrorPaneToggle: onErrorPaneToggle,\n    onWarningPaneToggle: onWarningPaneToggle,\n    onTabFocus: onTabFocus,\n    onTabBlur: onTabBlur,\n    errorsTabRef: errorsTabRef,\n    warningsTabRef: warningsTabRef,\n    i18nStrings: i18nStrings,\n    isTabFocused: isTabFocused,\n    paneId: paneId,\n    onPreferencesOpen: onPreferencesOpen,\n    isRefresh: isRefresh\n  }), React.createElement(Pane, {\n    id: paneId,\n    visible: paneStatus !== 'hidden',\n    annotations: currentAnnotations,\n    highlighted: highlightedAnnotation,\n    onAnnotationClick: onAnnotationClick,\n    onAnnotationClear: onAnnotationClear,\n    onClose: onPaneClose,\n    onAllowlist: shouldHandleFocus,\n    cursorPositionLabel: i18nStrings.cursorPosition,\n    closeButtonAriaLabel: i18nStrings.paneCloseButtonAriaLabel\n  })), isPreferencesModalVisible && React.createElement(PreferencesModal, {\n    onConfirm: onPreferencesConfirm,\n    onDismiss: onPreferencesDismiss,\n    preferences: props.preferences,\n    defaultTheme: defaultTheme,\n    i18nStrings: {\n      header: i18nStrings.preferencesModalHeader,\n      cancel: i18nStrings.preferencesModalCancel,\n      confirm: i18nStrings.preferencesModalConfirm,\n      wrapLines: i18nStrings.preferencesModalWrapLines,\n      theme: i18nStrings.preferencesModalTheme,\n      lightThemes: i18nStrings.preferencesModalLightThemes,\n      darkThemes: i18nStrings.preferencesModalDarkThemes\n    }\n  })));\n}\napplyDisplayName(CodeEditor, 'CodeEditor');","map":null,"metadata":{},"sourceType":"module"}