{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\n/**\n * The CSS class 'awsui-context-content-header' needs to be added to the root element so\n * that the design tokens used are overridden with the appropriate values.\n */\n\nexport default function AppBar() {\n  var _a, _b, _c, _d;\n\n  var _e, _f, _g;\n\n  var _h = useContext(AppLayoutContext),\n      ariaLabels = _h.ariaLabels,\n      breadcrumbs = _h.breadcrumbs,\n      contentHeader = _h.contentHeader,\n      contentType = _h.contentType,\n      dynamicOverlapHeight = _h.dynamicOverlapHeight,\n      handleNavigationClick = _h.handleNavigationClick,\n      handleToolsClick = _h.handleToolsClick,\n      hasNotificationsContent = _h.hasNotificationsContent,\n      isMobile = _h.isMobile,\n      navigationHide = _h.navigationHide,\n      isNavigationOpen = _h.isNavigationOpen,\n      isToolsOpen = _h.isToolsOpen,\n      toolsHide = _h.toolsHide,\n      isAnyPanelOpen = _h.isAnyPanelOpen;\n\n  var focusRefsNav = useFocusControl(isNavigationOpen);\n  var focusRefsTools = useFocusControl(isToolsOpen);\n\n  if (navigationHide && !breadcrumbs && toolsHide) {\n    return null;\n  }\n\n  return React.createElement(\"section\", {\n    \"aria-hidden\": !isMobile && !breadcrumbs ? true : undefined,\n    className: clsx(styles.appbar, (_a = {}, _a[styles['has-breadcrumbs']] = breadcrumbs, _a[styles.unfocusable] = isMobile && isAnyPanelOpen, _a[testutilStyles['mobile-bar']] = isMobile, _a), 'awsui-context-content-header')\n  }, !navigationHide && isMobile && React.createElement(\"nav\", {\n    className: clsx(styles['appbar-nav'], (_b = {}, _b[testutilStyles['drawer-closed']] = !isNavigationOpen, _b)),\n    \"aria-hidden\": isNavigationOpen\n  }, React.createElement(InternalButton, {\n    ariaLabel: (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _e !== void 0 ? _e : undefined,\n    ariaExpanded: isNavigationOpen,\n    iconName: \"menu\",\n    formAction: \"none\",\n    onClick: function onClick() {\n      return handleNavigationClick(true);\n    },\n    variant: \"icon\",\n    className: testutilStyles['navigation-toggle'],\n    ref: focusRefsNav.toggle,\n    disabled: isAnyPanelOpen\n  })), breadcrumbs && React.createElement(\"div\", {\n    className: clsx(styles.breadcrumbs, styles[\"content-type-\".concat(contentType)], testutilStyles.breadcrumbs, (_c = {}, _c[styles['has-dynamic-overlap-height']] = dynamicOverlapHeight > 0, _c[styles['has-header']] = contentHeader, _c[styles['has-notifications-content']] = hasNotificationsContent, _c))\n  }, breadcrumbs), !toolsHide && isMobile && React.createElement(\"aside\", {\n    className: clsx(styles['appbar-tools'], (_d = {}, _d[testutilStyles['drawer-closed']] = !isToolsOpen, _d)),\n    \"aria-hidden\": isToolsOpen,\n    \"aria-label\": (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _f !== void 0 ? _f : undefined\n  }, React.createElement(InternalButton, {\n    className: testutilStyles['tools-toggle'],\n    ariaExpanded: isToolsOpen,\n    disabled: isAnyPanelOpen,\n    ariaLabel: (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _g !== void 0 ? _g : undefined,\n    iconName: \"status-info\",\n    formAction: \"none\",\n    onClick: function onClick() {\n      return handleToolsClick(true);\n    },\n    variant: \"icon\",\n    ref: focusRefsTools.toggle\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}