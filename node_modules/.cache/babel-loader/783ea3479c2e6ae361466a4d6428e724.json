{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { fixupFalsyValues } from './operations/property-filter.js';\nexport function collectionReducer(state, action) {\n  var newState = __assign({}, state);\n\n  switch (action.type) {\n    case 'selection':\n      newState.selectedItems = action.selectedItems;\n      break;\n\n    case 'filtering':\n      newState.currentPageIndex = 1;\n      newState.filteringText = action.filteringText;\n      break;\n\n    case 'sorting':\n      newState.currentPageIndex = 1;\n      newState.sortingState = action.sortingState;\n      break;\n\n    case 'pagination':\n      newState.currentPageIndex = action.pageIndex;\n      break;\n\n    case 'property-filtering':\n      newState.currentPageIndex = 1;\n      newState.propertyFilteringQuery = action.query;\n      break;\n  }\n\n  return newState;\n}\nexport function createActions(_a) {\n  var dispatch = _a.dispatch,\n      collectionRef = _a.collectionRef;\n  return {\n    setFiltering: function setFiltering(filteringText) {\n      dispatch({\n        type: 'filtering',\n        filteringText: filteringText\n      });\n      collectionRef.current && collectionRef.current.scrollToTop();\n    },\n    setSorting: function setSorting(state) {\n      dispatch({\n        type: 'sorting',\n        sortingState: state\n      });\n      collectionRef.current && collectionRef.current.scrollToTop();\n    },\n    setCurrentPage: function setCurrentPage(pageIndex) {\n      dispatch({\n        type: 'pagination',\n        pageIndex: pageIndex\n      });\n      collectionRef.current && collectionRef.current.scrollToTop();\n    },\n    setSelectedItems: function setSelectedItems(selectedItems) {\n      dispatch({\n        type: 'selection',\n        selectedItems: selectedItems\n      });\n    },\n    setPropertyFiltering: function setPropertyFiltering(query) {\n      dispatch({\n        type: 'property-filtering',\n        query: query\n      });\n      collectionRef.current && collectionRef.current.scrollToTop();\n    }\n  };\n}\nexport function createSyncProps(options, _a, actions, collectionRef, _b) {\n  var _c;\n\n  var filteringText = _a.filteringText,\n      sortingState = _a.sortingState,\n      selectedItems = _a.selectedItems,\n      currentPageIndex = _a.currentPageIndex,\n      propertyFilteringQuery = _a.propertyFilteringQuery;\n  var pagesCount = _b.pagesCount,\n      actualPageIndex = _b.actualPageIndex,\n      allItems = _b.allItems;\n  var empty = options.filtering ? allItems.length ? options.filtering.noMatch : options.filtering.empty : null;\n  empty = options.propertyFiltering ? allItems.length ? options.propertyFiltering.noMatch : options.propertyFiltering.empty : empty;\n  var filteringOptions = options.propertyFiltering ? options.propertyFiltering.filteringProperties.reduce(function (acc, property) {\n    Object.keys(allItems.reduce(function (acc, item) {\n      acc['' + fixupFalsyValues(item[property.key])] = true;\n      return acc;\n    }, {})).forEach(function (value) {\n      if (value !== '') {\n        acc.push({\n          propertyKey: property.key,\n          value: value\n        });\n      }\n    });\n    return acc;\n  }, []) : [];\n  return {\n    collectionProps: __assign(__assign(__assign({\n      empty: empty\n    }, options.sorting ? {\n      onSortingChange: function onSortingChange(_a) {\n        var detail = _a.detail;\n        actions.setSorting(detail);\n      },\n      sortingColumn: sortingState === null || sortingState === void 0 ? void 0 : sortingState.sortingColumn,\n      sortingDescending: sortingState === null || sortingState === void 0 ? void 0 : sortingState.isDescending\n    } : {}), options.selection ? {\n      onSelectionChange: function onSelectionChange(_a) {\n        var selectedItems = _a.detail.selectedItems;\n        actions.setSelectedItems(selectedItems);\n      },\n      selectedItems: selectedItems,\n      trackBy: options.selection.trackBy\n    } : {}), {\n      ref: collectionRef\n    }),\n    filterProps: {\n      filteringText: filteringText,\n      onChange: function onChange(_a) {\n        var filteringText = _a.detail.filteringText;\n        actions.setFiltering(filteringText);\n      }\n    },\n    propertyFilterProps: {\n      query: propertyFilteringQuery,\n      onChange: function onChange(_a) {\n        var query = _a.detail;\n        actions.setPropertyFiltering(query);\n      },\n      filteringProperties: ((_c = options.propertyFiltering) === null || _c === void 0 ? void 0 : _c.filteringProperties) || [],\n      filteringOptions: filteringOptions\n    },\n    paginationProps: {\n      currentPageIndex: actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex,\n      // pagesCount is always calculated when options.pagination is present\n      pagesCount: pagesCount,\n      onChange: function onChange(_a) {\n        var currentPageIndex = _a.detail.currentPageIndex;\n        actions.setCurrentPage(currentPageIndex);\n      }\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}