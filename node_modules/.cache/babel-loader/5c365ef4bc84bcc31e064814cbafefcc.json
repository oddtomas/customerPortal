{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { getWeekStartByLocale } from 'weekstart';\nimport styles from './styles.css.js';\nimport Calendar from './calendar';\nimport { normalizeLocale } from './calendar/utils/locales';\nimport { getDateLabel } from './calendar/utils/intl';\nimport { displayToIso, formatDate, isoToDisplay, memoizedDate } from './calendar/utils/date';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport Dropdown from '../internal/components/dropdown';\nimport DateInput from '../internal/components/date-input';\nimport { getBaseProps } from '../internal/base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name.js';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { useFocusTracker } from '../internal/hooks/use-focus-tracker.js';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { InternalButton } from '../button/internal';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport TabTrap from '../internal/components/tab-trap';\nvar DatePicker = React.forwardRef(function (_a, ref) {\n  var _b = _a.locale,\n      locale = _b === void 0 ? '' : _b,\n      startOfWeek = _a.startOfWeek,\n      isDateEnabled = _a.isDateEnabled,\n      nextMonthAriaLabel = _a.nextMonthAriaLabel,\n      previousMonthAriaLabel = _a.previousMonthAriaLabel,\n      todayAriaLabel = _a.todayAriaLabel,\n      _c = _a.placeholder,\n      placeholder = _c === void 0 ? '' : _c,\n      _d = _a.value,\n      value = _d === void 0 ? '' : _d,\n      _e = _a.readOnly,\n      readOnly = _e === void 0 ? false : _e,\n      _f = _a.disabled,\n      disabled = _f === void 0 ? false : _f,\n      onBlur = _a.onBlur,\n      _g = _a.autoFocus,\n      autoFocus = _g === void 0 ? false : _g,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      name = _a.name,\n      ariaLabel = _a.ariaLabel,\n      ariaRequired = _a.ariaRequired,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescribedby = _a.ariaDescribedby,\n      controlId = _a.controlId,\n      invalid = _a.invalid,\n      openCalendarAriaLabel = _a.openCalendarAriaLabel,\n      expandToViewport = _a.expandToViewport,\n      rest = __rest(_a, [\"locale\", \"startOfWeek\", \"isDateEnabled\", \"nextMonthAriaLabel\", \"previousMonthAriaLabel\", \"todayAriaLabel\", \"placeholder\", \"value\", \"readOnly\", \"disabled\", \"onBlur\", \"autoFocus\", \"onChange\", \"onFocus\", \"name\", \"ariaLabel\", \"ariaRequired\", \"ariaLabelledby\", \"ariaDescribedby\", \"controlId\", \"invalid\", \"openCalendarAriaLabel\", \"expandToViewport\"]);\n\n  var __internalRootRef = useBaseComponent('DatePicker').__internalRootRef;\n\n  var baseProps = getBaseProps(rest);\n\n  var _h = useState(false),\n      isDropDownOpen = _h[0],\n      setIsDropDownOpen = _h[1];\n\n  var _j = useState(false),\n      calendarHasFocus = _j[0],\n      setCalendarHasFocus = _j[1];\n\n  var normalizedLocale = normalizeLocale('DatePicker', locale !== null && locale !== void 0 ? locale : '');\n  var normalizedStartOfWeek = typeof startOfWeek === 'number' ? startOfWeek : getWeekStartByLocale(normalizedLocale);\n  var defaultSelectedDate = value.length >= 10 ? value : null;\n\n  var _k = useState(defaultSelectedDate),\n      selectedDate = _k[0],\n      setSelectedDate = _k[1];\n\n  var defaultDisplayedDate = value.length >= 10 ? value : formatDate(new Date());\n\n  var _l = useState(defaultDisplayedDate),\n      displayedDate = _l[0],\n      setDisplayedDate = _l[1];\n\n  var _m = useState(null),\n      focusedDate = _m[0],\n      setFocusedDate = _m[1];\n\n  var internalInputRef = useRef(null);\n  var buttonRef = useRef(null);\n  var calendarRef = useRef(null);\n  useForwardFocus(ref, internalInputRef);\n  var rootRef = useRef(null);\n  var dropdownId = useUniqueId('calender');\n  var mergedRef = useMergeRefs(rootRef, __internalRootRef);\n  useFocusTracker({\n    rootRef: rootRef,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    viewportId: expandToViewport ? dropdownId : ''\n  });\n\n  var onChangeMonthHandler = function onChangeMonthHandler(newMonth) {\n    setDisplayedDate(formatDate(newMonth));\n    setFocusedDate(null);\n  };\n\n  var onSelectDateHandler = function onSelectDateHandler(_a) {\n    var _b;\n\n    var date = _a.date;\n    var formattedDate = formatDate(date);\n    (_b = buttonRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n    setIsDropDownOpen(false);\n    setSelectedDate(formattedDate);\n    setDisplayedDate(formattedDate);\n    setCalendarHasFocus(false);\n    setFocusedDate(null);\n    fireNonCancelableEvent(onChange, {\n      value: formattedDate\n    });\n  };\n\n  var onDateFocusHandler = function onDateFocusHandler(_a) {\n    var date = _a.date;\n\n    if (date) {\n      var value_1 = formatDate(date);\n      setFocusedDate(value_1);\n    }\n  };\n\n  var onDropdownCloseHandler = useCallback(function () {\n    setDisplayedDate(defaultDisplayedDate);\n    setCalendarHasFocus(false);\n    setIsDropDownOpen(false);\n  }, [defaultDisplayedDate]);\n\n  var onButtonClickHandler = function onButtonClickHandler() {\n    if (!isDropDownOpen) {\n      setIsDropDownOpen(true);\n      setCalendarHasFocus(true);\n    }\n  };\n\n  var onWrapperKeyDownHandler = function onWrapperKeyDownHandler(event) {\n    var _a;\n\n    if (event.keyCode === KeyCode.escape && isDropDownOpen) {\n      (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      setIsDropDownOpen(false);\n    }\n  };\n\n  var onInputChangeHandler = function onInputChangeHandler(event) {\n    var isoDateString = displayToIso(event.detail.value);\n    fireNonCancelableEvent(onChange, {\n      value: isoDateString\n    });\n  };\n\n  var onInputBlurHandler = function onInputBlurHandler() {\n    if (!calendarHasFocus) {\n      setDisplayedDate(defaultDisplayedDate);\n      setIsDropDownOpen(false);\n    }\n  };\n\n  var prevValue = usePrevious(value);\n\n  if (prevValue !== value) {\n    if (value === '' && selectedDate !== value) {\n      setSelectedDate(value);\n    } // update the displayedDate when inputValue changes in order to\n    // display the correct month when the date picker gets open again.\n\n\n    if (value.length >= 4 && displayedDate !== value) {\n      setDisplayedDate(value);\n    } // set the selected date only when a full date (yyyy-mm-dd) is entered\n\n\n    if (value.length >= 10 && selectedDate !== value) {\n      setSelectedDate(value);\n    }\n  }\n\n  var focusCurrentDate = function focusCurrentDate() {\n    var _a, _b;\n\n    return (_b = (_a = calendarRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(\".\".concat(styles['calendar-day-focusable']))) === null || _b === void 0 ? void 0 : _b.focus();\n  };\n\n  var DateInputElement = React.createElement(\"div\", {\n    className: styles['date-picker-trigger']\n  }, React.createElement(\"div\", {\n    className: styles['date-picker-input']\n  }, React.createElement(DateInput, {\n    name: name,\n    invalid: invalid,\n    controlId: controlId,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescribedby: ariaDescribedby,\n    ariaLabel: ariaLabel,\n    ariaRequired: ariaRequired,\n    value: isoToDisplay(value),\n    autoComplete: false,\n    disableBrowserAutocorrect: true,\n    disableAutocompleteOnBlur: calendarHasFocus,\n    disabled: disabled,\n    readOnly: readOnly,\n    onChange: onInputChangeHandler,\n    onBlur: onInputBlurHandler,\n    placeholder: placeholder,\n    ref: internalInputRef,\n    autoFocus: autoFocus\n  })), React.createElement(\"div\", null, React.createElement(InternalButton, {\n    iconName: \"calendar\",\n    className: styles['open-calendar-button'],\n    onClick: onButtonClickHandler,\n    ref: buttonRef,\n    ariaLabel: openCalendarAriaLabel && openCalendarAriaLabel(value.length === 10 ? getDateLabel(normalizedLocale, memoizedDate('value', value)) : null),\n    disabled: disabled || readOnly,\n    formAction: \"none\"\n  })));\n  baseProps.className = clsx(baseProps.className, styles.root, styles['date-picker-container']);\n\n  if (readOnly || disabled) {\n    return React.createElement(\"div\", __assign({}, baseProps), DateInputElement);\n  }\n\n  checkControlled('DatePicker', 'value', value, 'onChange', onChange);\n\n  var handleMouseDown = function handleMouseDown(event) {\n    // prevent currently focused element from losing it\n    event.preventDefault();\n  };\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    ref: mergedRef,\n    onKeyDown: onWrapperKeyDownHandler\n  }), React.createElement(Dropdown, {\n    stretchWidth: true,\n    stretchHeight: true,\n    open: isDropDownOpen,\n    onDropdownClose: onDropdownCloseHandler,\n    onMouseDown: handleMouseDown,\n    trigger: DateInputElement,\n    expandToViewport: expandToViewport,\n    scrollable: false,\n    dropdownId: dropdownId\n  }, isDropDownOpen && React.createElement(React.Fragment, null, calendarHasFocus && React.createElement(TabTrap, {\n    focusNextCallback: focusCurrentDate\n  }), React.createElement(Calendar, {\n    ref: calendarRef,\n    selectedDate: memoizedDate('value', selectedDate),\n    focusedDate: memoizedDate('focused', focusedDate),\n    displayedDate: memoizedDate('displayed', displayedDate),\n    locale: normalizedLocale,\n    startOfWeek: normalizedStartOfWeek,\n    isDateEnabled: isDateEnabled ? isDateEnabled : function () {\n      return true;\n    },\n    calendarHasFocus: calendarHasFocus,\n    nextMonthLabel: nextMonthAriaLabel,\n    previousMonthLabel: previousMonthAriaLabel,\n    todayAriaLabel: todayAriaLabel,\n    onChangeMonth: onChangeMonthHandler,\n    onSelectDate: onSelectDateHandler,\n    onFocusDate: onDateFocusHandler\n  }), calendarHasFocus && React.createElement(TabTrap, {\n    focusNextCallback: function focusNextCallback() {\n      var _a;\n\n      return (_a = calendarRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }))));\n});\napplyDisplayName(DatePicker, 'DatePicker');\nexport default DatePicker;","map":null,"metadata":{},"sourceType":"module"}