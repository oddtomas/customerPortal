{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport InternalContainer from '../container/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { TabHeaderBar } from './tab-header-bar';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nvar lastGeneratedId = 0;\nexport var nextGeneratedId = function nextGeneratedId() {\n  return \"awsui-tabs-\".concat(lastGeneratedId++, \"-\").concat(Math.round(Math.random() * 10000));\n};\n\nfunction firstEnabledTab(tabs) {\n  var enabledTabs = tabs.filter(function (tab) {\n    return !tab.disabled;\n  });\n\n  if (enabledTabs.length > 0) {\n    return enabledTabs[0];\n  }\n\n  return null;\n}\n\nexport default function Tabs(_a) {\n  var _b, _c;\n\n  var tabs = _a.tabs,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'default' : _d,\n      _onChange = _a.onChange,\n      controlledTabId = _a.activeTabId,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      _e = _a.disableContentPaddings,\n      disableContentPaddings = _e === void 0 ? false : _e,\n      rest = __rest(_a, [\"tabs\", \"variant\", \"onChange\", \"activeTabId\", \"ariaLabel\", \"ariaLabelledby\", \"disableContentPaddings\"]);\n\n  for (var _i = 0, tabs_1 = tabs; _i < tabs_1.length; _i++) {\n    var tab = tabs_1[_i];\n    checkSafeUrl('Tabs', tab.href);\n  }\n\n  var __internalRootRef = useBaseComponent('Tabs').__internalRootRef;\n\n  var idNamespace = useState(function () {\n    return nextGeneratedId();\n  })[0];\n\n  var _f = useControllable(controlledTabId, _onChange, (_c = (_b = firstEnabledTab(tabs)) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : '', {\n    componentName: 'Tabs',\n    controlledProp: 'activeTabId',\n    changeHandler: 'onChange'\n  }),\n      activeTabId = _f[0],\n      setActiveTabId = _f[1];\n\n  var baseProps = getBaseProps(rest);\n\n  var content = function content() {\n    var _a;\n\n    var selectedTab = tabs.filter(function (tab) {\n      return tab.id === activeTabId;\n    })[0];\n\n    var renderContent = function renderContent(tab) {\n      var _a;\n\n      var isContentActive = tab === selectedTab && !selectedTab.disabled && selectedTab.content;\n      var classes = clsx((_a = {}, _a[styles['tabs-content']] = true, _a[styles['tabs-content-active']] = isContentActive, _a));\n      var contentAttributes = {\n        className: classes,\n        role: 'tabpanel',\n        id: \"\".concat(idNamespace, \"-\").concat(tab.id, \"-panel\"),\n        key: \"\".concat(idNamespace, \"-\").concat(tab.id, \"-panel\")\n      };\n      return React.createElement(\"div\", __assign({}, contentAttributes), isContentActive && selectedTab.content);\n    };\n\n    return React.createElement(\"div\", {\n      className: clsx(variant === 'container' ? styles['tabs-container-content-wrapper'] : styles['tabs-content-wrapper'], (_a = {}, _a[styles['with-paddings']] = !disableContentPaddings, _a))\n    }, tabs.map(renderContent));\n  };\n\n  var header = React.createElement(TabHeaderBar, {\n    activeTabId: activeTabId,\n    variant: variant,\n    idNamespace: idNamespace,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    tabs: tabs,\n    onChange: function onChange(changeDetail) {\n      setActiveTabId(changeDetail.activeTabId);\n      fireNonCancelableEvent(_onChange, changeDetail);\n    }\n  });\n\n  if (variant === 'container') {\n    return React.createElement(InternalContainer, __assign({\n      header: header,\n      disableHeaderPaddings: true\n    }, baseProps, {\n      className: clsx(baseProps.className, styles.root),\n      __internalRootRef: __internalRootRef,\n      disableContentPaddings: disableContentPaddings\n    }), content());\n  }\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, styles.tabs),\n    ref: __internalRootRef\n  }), header, content());\n}\napplyDisplayName(Tabs, 'Tabs');","map":null,"metadata":{},"sourceType":"module"}