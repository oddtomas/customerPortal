{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isMotionDisabled } from '../internal/motion';\nimport isNativeSmoothScrollingSupported from './native-smooth-scroll-supported'; // The scroll speed depends on the scrolling distance. The equation below is an interpolation of measurements in Chrome.\n\nvar getScrollSpeed = function getScrollSpeed(pixels) {\n  return 0.0015 * Math.abs(pixels) + 0.558;\n};\n\nvar getScrollTime = function getScrollTime(pixels) {\n  return Math.round(Math.abs(pixels) / getScrollSpeed(pixels));\n};\n\nvar now = function now() {\n  return window.performance ? window.performance.now() : Date.now();\n};\n\nvar ease = function ease(k) {\n  return 0.5 * (1 - Math.cos(Math.PI * k));\n};\n\nvar step = function step(context) {\n  var time = now();\n  var elapsed = Math.min((time - context.startTime) / context.scrollTime, 1);\n  var value = ease(elapsed);\n  var currentX = context.startX + (context.endX - context.startX) * value;\n  context.scrollable.scrollLeft = currentX; // scroll more if we have not reached our destination\n\n  if (currentX !== context.endX) {\n    requestAnimationFrame(function () {\n      return step(context);\n    });\n  }\n};\n\nvar simulateSmoothScroll = function simulateSmoothScroll(element, endX) {\n  var startX = element.scrollLeft;\n  step({\n    scrollable: element,\n    startX: startX,\n    endX: endX,\n    startTime: now(),\n    scrollTime: getScrollTime(endX - startX)\n  });\n};\n\nvar smoothScroll = function smoothScroll(element, to) {\n  if (isMotionDisabled(element)) {\n    element.scrollLeft = to;\n    return;\n  }\n\n  if (isNativeSmoothScrollingSupported() && element.scrollTo) {\n    element.scrollTo({\n      left: to,\n      behavior: 'smooth'\n    });\n    return;\n  }\n\n  simulateSmoothScroll(element, to);\n};\n\nexport default smoothScroll;","map":null,"metadata":{},"sourceType":"module"}