{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useCallback, useRef } from 'react';\nimport { fireCancelableEvent, isPlainLeftClick } from '../internal/events';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport styles from './styles.css.js';\nimport { LeftIcon, RightIcon } from './icon-helper';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nexport var InternalButton = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      iconName = _a.iconName,\n      __iconClass = _a.__iconClass,\n      onClick = _a.onClick,\n      onFollow = _a.onFollow,\n      _c = _a.iconAlign,\n      iconAlign = _c === void 0 ? 'left' : _c,\n      iconUrl = _a.iconUrl,\n      iconSvg = _a.iconSvg,\n      iconAlt = _a.iconAlt,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'normal' : _d,\n      _e = _a.loading,\n      loading = _e === void 0 ? false : _e,\n      _f = _a.disabled,\n      disabled = _f === void 0 ? false : _f,\n      _g = _a.wrapText,\n      wrapText = _g === void 0 ? true : _g,\n      href = _a.href,\n      target = _a.target,\n      download = _a.download,\n      _h = _a.formAction,\n      formAction = _h === void 0 ? 'submit' : _h,\n      ariaLabel = _a.ariaLabel,\n      ariaExpanded = _a.ariaExpanded,\n      __nativeAttributes = _a.__nativeAttributes,\n      _j = _a.__internalRootRef,\n      __internalRootRef = _j === void 0 ? null : _j,\n      _k = _a.__activated,\n      __activated = _k === void 0 ? false : _k,\n      props = __rest(_a, [\"children\", \"iconName\", \"__iconClass\", \"onClick\", \"onFollow\", \"iconAlign\", \"iconUrl\", \"iconSvg\", \"iconAlt\", \"variant\", \"loading\", \"disabled\", \"wrapText\", \"href\", \"target\", \"download\", \"formAction\", \"ariaLabel\", \"ariaExpanded\", \"__nativeAttributes\", \"__internalRootRef\", \"__activated\"]);\n\n  checkSafeUrl('Button', href);\n  var focusVisible = useFocusVisible();\n  var isAnchor = Boolean(href);\n  var isDisabled = loading || disabled;\n  var shouldHaveContent = children && ['icon', 'inline-icon', 'flashbar-icon', 'modal-dismiss'].indexOf(variant) === -1;\n  var buttonRef = useRef(null);\n  useForwardFocus(ref, buttonRef);\n  var handleClick = useCallback(function (event) {\n    if (isAnchor && isDisabled) {\n      return event.preventDefault();\n    }\n\n    if (isAnchor && isPlainLeftClick(event)) {\n      fireCancelableEvent(onFollow, null, event);\n    }\n\n    var altKey = event.altKey,\n        button = event.button,\n        ctrlKey = event.ctrlKey,\n        metaKey = event.metaKey,\n        shiftKey = event.shiftKey;\n    fireCancelableEvent(onClick, {\n      altKey: altKey,\n      button: button,\n      ctrlKey: ctrlKey,\n      metaKey: metaKey,\n      shiftKey: shiftKey\n    }, event);\n  }, [isAnchor, isDisabled, onClick, onFollow]);\n  var buttonClass = clsx(props.className, styles.button, styles[\"variant-\".concat(variant)], (_b = {}, _b[styles.disabled] = isDisabled, _b[styles['button-no-wrap']] = !wrapText, _b[styles['button-no-text']] = !shouldHaveContent, _b[styles['is-activated']] = __activated, _b));\n\n  var buttonProps = __assign(__assign(__assign(__assign({}, props), focusVisible), __nativeAttributes), {\n    // https://github.com/microsoft/TypeScript/issues/36659\n    ref: useMergeRefs(buttonRef, __internalRootRef),\n    'aria-label': ariaLabel,\n    'aria-expanded': ariaExpanded,\n    className: buttonClass,\n    onClick: handleClick\n  });\n\n  var iconProps = {\n    loading: loading,\n    iconName: iconName,\n    iconAlign: iconAlign,\n    iconUrl: iconUrl,\n    iconSvg: iconSvg,\n    iconAlt: iconAlt,\n    variant: variant,\n    iconClass: __iconClass,\n    iconSize: variant === 'modal-dismiss' ? 'medium' : 'normal'\n  };\n  var buttonContent = React.createElement(React.Fragment, null, React.createElement(LeftIcon, __assign({}, iconProps)), shouldHaveContent && React.createElement(\"span\", {\n    className: styles.content\n  }, children), React.createElement(RightIcon, __assign({}, iconProps)));\n\n  if (isAnchor) {\n    return (// https://github.com/yannickcr/eslint-plugin-react/issues/2962\n      // eslint-disable-next-line react/jsx-no-target-blank\n      React.createElement(\"a\", __assign({}, buttonProps, {\n        href: href,\n        target: target,\n        // security recommendation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target\n        rel: target === '_blank' ? 'noopener noreferrer' : undefined,\n        tabIndex: isDisabled ? -1 : undefined,\n        \"aria-disabled\": isDisabled ? true : undefined,\n        download: download\n      }), buttonContent)\n    );\n  }\n\n  return React.createElement(\"button\", __assign({}, buttonProps, {\n    type: formAction === 'none' ? 'button' : 'submit',\n    disabled: isDisabled\n  }), buttonContent);\n});\nexport default InternalButton;","map":null,"metadata":{},"sourceType":"module"}