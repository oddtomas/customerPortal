{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { convertAutoComplete } from '../input/utils';\nvar Textarea = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var value = _a.value,\n      _c = _a.autoComplete,\n      autoComplete = _c === void 0 ? true : _c,\n      disabled = _a.disabled,\n      readOnly = _a.readOnly,\n      disableBrowserAutocorrect = _a.disableBrowserAutocorrect,\n      disableBrowserSpellcheck = _a.disableBrowserSpellcheck,\n      onKeyDown = _a.onKeyDown,\n      onKeyUp = _a.onKeyUp,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      ariaRequired = _a.ariaRequired,\n      name = _a.name,\n      rows = _a.rows,\n      placeholder = _a.placeholder,\n      autoFocus = _a.autoFocus,\n      ariaLabel = _a.ariaLabel,\n      rest = __rest(_a, [\"value\", \"autoComplete\", \"disabled\", \"readOnly\", \"disableBrowserAutocorrect\", \"disableBrowserSpellcheck\", \"onKeyDown\", \"onKeyUp\", \"onChange\", \"onBlur\", \"onFocus\", \"ariaRequired\", \"name\", \"rows\", \"placeholder\", \"autoFocus\", \"ariaLabel\"]);\n\n  var __internalRootRef = useBaseComponent('Textarea').__internalRootRef;\n\n  var _d = useFormFieldContext(rest),\n      ariaLabelledby = _d.ariaLabelledby,\n      ariaDescribedby = _d.ariaDescribedby,\n      controlId = _d.controlId,\n      invalid = _d.invalid;\n\n  var baseProps = getBaseProps(rest);\n  var textareaRef = useRef(null);\n  useForwardFocus(ref, textareaRef);\n  var attributes = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-required': ariaRequired ? 'true' : undefined,\n    'aria-invalid': invalid ? 'true' : undefined,\n    name: name,\n    placeholder: placeholder,\n    autoFocus: autoFocus,\n    className: clsx(styles.textarea, (_b = {}, _b[styles['textarea-readonly']] = readOnly, _b[styles['textarea-invalid']] = invalid, _b)),\n    autoComplete: convertAutoComplete(autoComplete),\n    disabled: disabled,\n    readOnly: readOnly ? true : undefined,\n    rows: rows || 3,\n    onKeyDown: onKeyDown && function (event) {\n      return fireKeyboardEvent(onKeyDown, event);\n    },\n    onKeyUp: onKeyUp && function (event) {\n      return fireKeyboardEvent(onKeyUp, event);\n    },\n    // We set a default value on the component in order to force it into the controlled mode.\n    value: value || '',\n    onChange: onChange && function (event) {\n      return fireNonCancelableEvent(onChange, {\n        value: event.target.value\n      });\n    },\n    onBlur: onBlur && function () {\n      return fireNonCancelableEvent(onBlur);\n    },\n    onFocus: onFocus && function () {\n      return fireNonCancelableEvent(onFocus);\n    }\n  };\n\n  if (disableBrowserAutocorrect) {\n    attributes.autoCorrect = 'off';\n    attributes.autoCapitalize = 'off';\n  }\n\n  if (disableBrowserSpellcheck) {\n    attributes.spellCheck = 'false';\n  }\n\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(\"textarea\", __assign({\n    ref: textareaRef,\n    id: controlId\n  }, attributes)));\n});\napplyDisplayName(Textarea, 'Textarea');\nexport default Textarea;","map":null,"metadata":{},"sourceType":"module"}