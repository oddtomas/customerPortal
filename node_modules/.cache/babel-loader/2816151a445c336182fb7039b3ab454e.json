{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useContext } from 'react';\nimport { AppLayoutContext } from '../app-layout/visual-refresh/context';\nimport { useAppLayoutContext } from '../internal/context/app-layout-context';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useStickyScrollbar } from './use-sticky-scrollbar';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nexport default forwardRef(StickyScrollbar);\n\nfunction StickyScrollbar(_a, ref) {\n  var wrapperRef = _a.wrapperRef,\n      tableRef = _a.tableRef,\n      onScroll = _a.onScroll;\n  var scrollbarRef = React.useRef(null);\n  var scrollbarContentRef = React.useRef(null);\n  var isRefresh = useVisualRefresh(scrollbarRef);\n  var mergedRef = useMergeRefs(ref, scrollbarRef);\n  /**\n   * Use the appropriate AppLayout context (Classic or Visual Refresh) to determine\n   * the offsetBottom value to be used in the useStickyScrollbar hook.\n   */\n\n  var offsetBottomClassic = useAppLayoutContext().stickyOffsetBottom;\n  var offsetBottomVisualRefresh = useContext(AppLayoutContext).offsetBottom;\n  var offsetBottom = isRefresh ? offsetBottomVisualRefresh : offsetBottomClassic;\n  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetBottom);\n  return React.createElement(\"div\", {\n    ref: mergedRef,\n    className: styles['sticky-scrollbar'],\n    onScroll: onScroll\n  }, React.createElement(\"div\", {\n    ref: scrollbarContentRef,\n    className: styles['sticky-scrollbar-content']\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}