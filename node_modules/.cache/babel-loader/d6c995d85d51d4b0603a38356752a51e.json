{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { useSelector } from '../model/async-store';\nexport default function useHighlightDetails(_a) {\n  var model = _a.model,\n      xTickFormatter = _a.xTickFormatter,\n      yTickFormatter = _a.yTickFormatter,\n      detailTotalFormatter = _a.detailTotalFormatter,\n      detailTotalLabel = _a.detailTotalLabel;\n  var hX = useSelector(model.interactions, function (state) {\n    return state.highlightedX;\n  });\n  var hPoint = useSelector(model.interactions, function (state) {\n    return state.highlightedPoint;\n  });\n  var isPopoverPinned = useSelector(model.interactions, function (state) {\n    return state.isPopoverPinned;\n  });\n\n  if (!hX) {\n    return null;\n  }\n\n  var firstPoint = hX[0];\n  var highlightIndex = firstPoint.index.x;\n\n  var seriesPoints = __spreadArray([], model.computed.plot.xs[highlightIndex], true);\n\n  var detailsTotal = seriesPoints.reduce(function (total, point) {\n    return total + point.value;\n  }, 0);\n  var formattedX = xTickFormatter ? xTickFormatter(firstPoint.x) : firstPoint.x.toString();\n  var seriesTitle = hPoint ? getInternalSeries(hPoint).title : '';\n  var formattedY = hPoint ? getInternalSeries(hPoint).formatValue(hPoint.value, hPoint.x) : '';\n  var seriesDetails = seriesPoints.map(function (point) {\n    var _a = getInternalSeries(point),\n        title = _a.title,\n        formatValue = _a.formatValue,\n        color = _a.color,\n        markerType = _a.markerType;\n\n    var isDimmed = Boolean(hPoint) && point !== hPoint;\n    return {\n      key: title,\n      value: formatValue(point.value, point.x),\n      color: color,\n      markerType: markerType,\n      isDimmed: isDimmed\n    };\n  });\n  var totalDetails = [{\n    key: detailTotalLabel || '',\n    value: detailTotalFormatter ? detailTotalFormatter(detailsTotal) : yTickFormatter ? yTickFormatter(detailsTotal) : detailsTotal\n  }];\n  var pointDetails = hPoint ? seriesDetails[hPoint.index.s] : null;\n  var activeLabel = \"\".concat(seriesTitle, \" \").concat(formattedX, \" \").concat(formattedY, \", \").concat(totalDetails[0].key, \" \").concat(totalDetails[0].value);\n  return {\n    isPopoverPinned: isPopoverPinned,\n    highlightIndex: highlightIndex,\n    formattedX: formattedX,\n    seriesTitle: seriesTitle,\n    formattedY: formattedY,\n    activeLabel: activeLabel,\n    seriesDetails: seriesDetails,\n    totalDetails: totalDetails,\n    pointDetails: pointDetails\n  };\n\n  function getInternalSeries(point) {\n    return model.getInternalSeries(model.series[point.index.s]);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}