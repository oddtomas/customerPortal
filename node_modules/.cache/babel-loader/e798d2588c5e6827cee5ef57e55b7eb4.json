{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport smoothScroll from './smooth-scroll';\nexport var onPaginationClick = function onPaginationClick(headerBarRef, direction) {\n  if (!(headerBarRef === null || headerBarRef === void 0 ? void 0 : headerBarRef.current)) {\n    return;\n  }\n\n  var element = headerBarRef.current; // Scroll each paginated section by 75% of what is already visible\n\n  var paginatedSectionSize = Math.ceil(element.clientWidth * 0.75);\n\n  if (direction === 1) {\n    smoothScroll(element, Math.min(element.scrollLeft + paginatedSectionSize, element.scrollWidth - element.offsetWidth));\n  }\n\n  if (direction === -1) {\n    smoothScroll(element, Math.max(element.scrollLeft - paginatedSectionSize, 0));\n  }\n};\nexport var hasHorizontalOverflow = function hasHorizontalOverflow(headerBar, leftOverflowButton) {\n  var offsetWidth = headerBar.offsetWidth,\n      scrollWidth = headerBar.scrollWidth; // Need to account for pagination button width when deciding if there would be overflow without them\n\n  var paginationButtonsWidth = leftOverflowButton.current && 2 * leftOverflowButton.current.offsetWidth;\n  return paginationButtonsWidth ? scrollWidth > offsetWidth + paginationButtonsWidth : scrollWidth > offsetWidth;\n};\nexport var hasLeftOverflow = function hasLeftOverflow(headerBar) {\n  return headerBar.scrollLeft > 0;\n};\nexport var hasRightOverflow = function hasRightOverflow(headerBar) {\n  var offsetWidth = headerBar.offsetWidth,\n      scrollLeft = headerBar.scrollLeft,\n      scrollWidth = headerBar.scrollWidth; // scrollLeft can be a decimal value on systems using display scaling\n\n  return Math.ceil(scrollLeft) < scrollWidth - offsetWidth;\n};\nexport var scrollIntoView = function scrollIntoView(tabHeader, headerBar, smooth) {\n  if (smooth === void 0) {\n    smooth = true;\n  }\n\n  if (!tabHeader || !headerBar) {\n    return;\n  } // Extra left and right margin to always make the focus ring visible\n\n\n  var margin = 2;\n  var updatedLeftScroll = headerBar.scrollLeft; // Anchor tab to left of scroll parent\n\n  updatedLeftScroll = Math.min(updatedLeftScroll, tabHeader.offsetLeft - margin); // Anchor tab to right of scroll parent\n\n  updatedLeftScroll = Math.max(updatedLeftScroll, tabHeader.offsetLeft + tabHeader.offsetWidth - headerBar.offsetWidth + margin);\n\n  if (smooth) {\n    smoothScroll(headerBar, updatedLeftScroll);\n  } else {\n    headerBar.scrollLeft = updatedLeftScroll;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}