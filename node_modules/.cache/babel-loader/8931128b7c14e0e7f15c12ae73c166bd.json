{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport styles from '../../styles.css.js';\nimport GridDay from './day';\nimport { KeyCode } from '../../../internal/keycode';\nimport { addDays, addWeeks, isSameMonth } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport rotateDayIndexes from '../utils/rotate-day-indexes';\nimport { renderDayName } from '../utils/intl';\n\nvar Grid = function Grid(_a) {\n  var locale = _a.locale,\n      baseDate = _a.baseDate,\n      isDateEnabled = _a.isDateEnabled,\n      focusedDate = _a.focusedDate,\n      _onSelectDate = _a.onSelectDate,\n      onFocusDate = _a.onFocusDate,\n      onChangeMonth = _a.onChangeMonth,\n      startOfWeek = _a.startOfWeek,\n      todayAriaLabel = _a.todayAriaLabel,\n      selectedDate = _a.selectedDate,\n      handleFocusMove = _a.handleFocusMove;\n\n  var onGridKeyDownHandler = function onGridKeyDownHandler(event) {\n    var updatedFocusDate;\n\n    if (focusedDate === null) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case KeyCode.enter:\n        event.preventDefault();\n\n        if (focusedDate) {\n          onFocusDate({\n            date: null\n          });\n\n          _onSelectDate({\n            date: focusedDate\n          });\n        }\n\n        return;\n\n      case KeyCode.right:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addDays(date, 1);\n        });\n        break;\n\n      case KeyCode.left:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addDays(date, -1);\n        });\n        break;\n\n      case KeyCode.up:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addWeeks(date, -1);\n        });\n        break;\n\n      case KeyCode.down:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addWeeks(date, 1);\n        });\n        break;\n\n      default:\n        return;\n    }\n\n    if (!isSameMonth(updatedFocusDate, baseDate)) {\n      onChangeMonth(updatedFocusDate);\n    }\n\n    onFocusDate({\n      date: updatedFocusDate\n    });\n  };\n\n  var weeks = useMemo(function () {\n    return getCalendarMonth(baseDate, {\n      firstDayOfWeek: startOfWeek\n    });\n  }, [baseDate, startOfWeek]);\n  return React.createElement(\"div\", null, React.createElement(\"div\", {\n    className: styles['calendar-day-names']\n  }, rotateDayIndexes(startOfWeek).map(function (i) {\n    return React.createElement(\"div\", {\n      key: \"day-name-\".concat(i),\n      className: styles['calendar-day-name']\n    }, renderDayName(locale, i));\n  })), React.createElement(\"div\", {\n    className: styles['calendar-dates'],\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map(function (week, weekIndex) {\n    var isDateInLastWeek = weeks.length - 1 === weekIndex;\n    return React.createElement(\"div\", {\n      key: \"week-\".concat(weekIndex),\n      className: styles['calendar-week']\n    }, week.map(function (date, dateIndex) {\n      return React.createElement(GridDay, {\n        key: \"date-\".concat(weekIndex, \"-\").concat(dateIndex),\n        locale: locale,\n        baseDate: baseDate,\n        selectedDate: selectedDate,\n        date: date,\n        focusedDate: focusedDate,\n        todayAriaLabel: todayAriaLabel,\n        onSelectDate: function onSelectDate(date) {\n          _onSelectDate({\n            date: date\n          });\n        },\n        isDateEnabled: isDateEnabled,\n        isDateInLastWeek: isDateInLastWeek\n      });\n    }));\n  })));\n};\n\nexport default Grid;","map":null,"metadata":{},"sourceType":"module"}