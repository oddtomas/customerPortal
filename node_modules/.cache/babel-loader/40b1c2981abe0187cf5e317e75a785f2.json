{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../../hooks/focus-visible/index';\nexport default function FocusOutline(_a) {\n  var elementKey = _a.elementKey,\n      elementRef = _a.elementRef,\n      _b = _a.offset,\n      offset = _b === void 0 ? 0 : _b;\n  var ref = useRef(null);\n  var focusVisible = useFocusVisible()[\"data-awsui-focus-visible\"];\n  useEffect(function () {\n    if (!ref.current) {\n      return;\n    }\n\n    if (focusVisible && elementKey && elementRef && elementRef.current && elementRef.current.getBBox) {\n      var element = elementRef.current.getBBox();\n      showOutline(ref.current, element, offset);\n    } else {\n      hideOutline(ref.current);\n    }\n  }, [focusVisible, elementKey, elementRef, offset]);\n  return React.createElement(\"rect\", {\n    ref: ref,\n    \"aria-hidden\": \"true\",\n    className: styles['focus-outline'],\n    rx: \"2\"\n  });\n}\n\nfunction showOutline(el, position, offset) {\n  el.setAttribute('x', (position.x - offset).toString());\n  el.setAttribute('y', (position.y - offset).toString());\n  el.setAttribute('width', (position.width + 2 * offset).toString());\n  el.setAttribute('height', (position.height + 2 * offset).toString());\n  el.style.visibility = 'visible';\n}\n\nfunction hideOutline(el) {\n  el.style.visibility = 'hidden';\n  el.removeAttribute('x');\n  el.removeAttribute('y');\n  el.removeAttribute('width');\n  el.removeAttribute('height');\n}","map":null,"metadata":{},"sourceType":"module"}