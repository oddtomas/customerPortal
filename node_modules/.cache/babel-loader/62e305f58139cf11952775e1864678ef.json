{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext } from './s3-in-context';\nimport { S3Modal } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nvar S3ResourceSelector = React.forwardRef(function (_a, ref) {\n  var i18nStrings = _a.i18nStrings,\n      alert = _a.alert,\n      resource = _a.resource,\n      viewHref = _a.viewHref,\n      invalid = _a.invalid,\n      _b = _a.selectableItemsTypes,\n      selectableItemsTypes = _b === void 0 ? [] : _b,\n      inputAriaDescribedby = _a.inputAriaDescribedby,\n      _c = _a.bucketsVisibleColumns,\n      bucketsVisibleColumns = _c === void 0 ? ['Name', 'CreationDate'] : _c,\n      bucketsIsItemDisabled = _a.bucketsIsItemDisabled,\n      fetchBuckets = _a.fetchBuckets,\n      fetchObjects = _a.fetchObjects,\n      _d = _a.objectsVisibleColumns,\n      objectsVisibleColumns = _d === void 0 ? ['Key', 'LastModified', 'Size'] : _d,\n      objectsIsItemDisabled = _a.objectsIsItemDisabled,\n      fetchVersions = _a.fetchVersions,\n      _e = _a.versionsVisibleColumns,\n      versionsVisibleColumns = _e === void 0 ? ['ID', 'LastModified', 'Size'] : _e,\n      versionsIsItemDisabled = _a.versionsIsItemDisabled,\n      _onChange = _a.onChange,\n      rest = __rest(_a, [\"i18nStrings\", \"alert\", \"resource\", \"viewHref\", \"invalid\", \"selectableItemsTypes\", \"inputAriaDescribedby\", \"bucketsVisibleColumns\", \"bucketsIsItemDisabled\", \"fetchBuckets\", \"fetchObjects\", \"objectsVisibleColumns\", \"objectsIsItemDisabled\", \"fetchVersions\", \"versionsVisibleColumns\", \"versionsIsItemDisabled\", \"onChange\"]);\n\n  checkSafeUrl('S3ResourceSelector', viewHref);\n\n  var __internalRootRef = useBaseComponent('S3ResourceSelector').__internalRootRef;\n\n  var _f = useState(false),\n      modalOpen = _f[0],\n      setModalOpen = _f[1];\n\n  var inContextRef = useRef(null);\n  var modalWasSubmitted = useRef(false);\n  useForwardFocus(ref, inContextRef);\n  useEffect(function () {\n    var _a; // Focus uriInput only when modal was submitted.\n    // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n\n\n    if (!modalOpen && modalWasSubmitted.current) {\n      modalWasSubmitted.current = false;\n      (_a = inContextRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [modalOpen]);\n  var baseProps = getBaseProps(rest);\n  var modalProps = {\n    alert: alert,\n    i18nStrings: i18nStrings,\n    fetchBuckets: fetchBuckets,\n    selectableItemsTypes: selectableItemsTypes,\n    bucketsVisibleColumns: bucketsVisibleColumns,\n    bucketsIsItemDisabled: bucketsIsItemDisabled,\n    fetchObjects: fetchObjects,\n    objectsVisibleColumns: objectsVisibleColumns,\n    objectsIsItemDisabled: objectsIsItemDisabled,\n    fetchVersions: fetchVersions,\n    versionsVisibleColumns: versionsVisibleColumns,\n    versionsIsItemDisabled: versionsIsItemDisabled,\n    onSubmit: function onSubmit(resource) {\n      fireNonCancelableEvent(_onChange, {\n        resource: resource\n      });\n      setModalOpen(false);\n      modalWasSubmitted.current = true;\n    },\n    onDismiss: function onDismiss() {\n      return setModalOpen(false);\n    }\n  };\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(S3InContext, {\n    ref: inContextRef,\n    selectableItemsTypes: selectableItemsTypes,\n    i18nStrings: i18nStrings,\n    resource: resource,\n    viewHref: viewHref,\n    invalid: invalid,\n    inputAriaDescribedby: inputAriaDescribedby,\n    fetchVersions: fetchVersions,\n    onBrowse: function onBrowse() {\n      return setModalOpen(true);\n    },\n    onChange: function onChange(resource, errorText) {\n      return fireNonCancelableEvent(_onChange, {\n        resource: resource,\n        errorText: errorText\n      });\n    }\n  }), !modalOpen && alert && React.createElement(InternalBox, {\n    className: styles.alert,\n    margin: {\n      top: 's'\n    }\n  }, alert), modalOpen && React.createElement(S3Modal, __assign({}, modalProps)));\n});\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;","map":null,"metadata":{},"sourceType":"module"}