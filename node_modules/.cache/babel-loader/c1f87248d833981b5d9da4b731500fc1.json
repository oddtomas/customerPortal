{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useMemo } from 'react';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport ButtonTrigger from '../../internal/components/button-trigger';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport { generateUniqueId } from '../../internal/hooks/use-unique-id';\nvar Trigger = React.forwardRef(function (_a, ref) {\n  var ariaLabelledby = _a.ariaLabelledby,\n      ariaDescribedby = _a.ariaDescribedby,\n      controlId = _a.controlId,\n      invalid = _a.invalid,\n      triggerProps = _a.triggerProps,\n      selectedOption = _a.selectedOption,\n      triggerVariant = _a.triggerVariant,\n      inFilteringToken = _a.inFilteringToken,\n      isOpen = _a.isOpen,\n      placeholder = _a.placeholder,\n      disabled = _a.disabled,\n      ariaLabel = _a.ariaLabel;\n  var id = useMemo(function () {\n    return controlId !== null && controlId !== void 0 ? controlId : generateUniqueId();\n  }, [controlId]);\n  var triggerContent = null;\n\n  if (!selectedOption) {\n    triggerContent = React.createElement(\"span\", {\n      \"aria-disabled\": \"true\",\n      className: clsx(styles.placeholder, styles.trigger),\n      id: triggerProps.ariaLabelledby\n    }, placeholder);\n  } else if (triggerVariant === 'option') {\n    triggerContent = React.createElement(Option, {\n      id: triggerProps.ariaLabelledby,\n      option: __assign(__assign({}, selectedOption), {\n        disabled: disabled\n      }),\n      triggerVariant: true\n    });\n  } else {\n    triggerContent = React.createElement(\"span\", {\n      id: triggerProps.ariaLabelledby,\n      className: styles.trigger\n    }, selectedOption.label || selectedOption.value);\n  }\n\n  var mergedRef = useMergeRefs(triggerProps.ref, ref);\n  return React.createElement(ButtonTrigger, __assign({}, triggerProps, {\n    id: id,\n    ref: mergedRef,\n    pressed: isOpen,\n    disabled: disabled,\n    invalid: invalid,\n    inFilteringToken: inFilteringToken,\n    ariaLabel: ariaLabel,\n    ariaDescribedby: ariaDescribedby,\n    ariaLabelledby: [ariaLabelledby, triggerProps.ariaLabelledby].filter(function (label) {\n      return !!label;\n    }).join(' ')\n  }), triggerContent);\n});\nexport default Trigger;","map":null,"metadata":{},"sourceType":"module"}