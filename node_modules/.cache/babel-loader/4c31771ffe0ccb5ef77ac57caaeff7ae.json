{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport InternalBox from '../../box/internal';\nimport { InternalButton } from '../../button/internal';\nimport InternalFormField from '../../form-field/internal';\nimport InternalSelect from '../../select/internal';\nimport InternalStatusIndicator from '../../status-indicator/internal';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { useVersionsFetch } from './use-versions-fetch';\nimport { validate, getErrorText } from './validation';\nimport styles from './styles.css.js';\nimport { SearchInput } from './search-input';\nexport var S3InContext = React.forwardRef(function (_a, ref) {\n  var i18nStrings = _a.i18nStrings,\n      resource = _a.resource,\n      viewHref = _a.viewHref,\n      invalid = _a.invalid,\n      inputAriaDescribedby = _a.inputAriaDescribedby,\n      selectableItemsTypes = _a.selectableItemsTypes,\n      fetchVersions = _a.fetchVersions,\n      _onChange = _a.onChange,\n      onBrowse = _a.onBrowse;\n  var isInputBlurredRef = useRef(true);\n\n  var _b = useState(false),\n      isInputTouched = _b[0],\n      setInputTouched = _b[1];\n\n  var _c = useVersionsFetch(fetchVersions),\n      versions = _c.versions,\n      loading = _c.loading,\n      loadVersions = _c.loadVersions,\n      resetVersions = _c.resetVersions;\n\n  var inputRef = useRef(null);\n  useForwardFocus(ref, inputRef);\n  var uri = resource.uri;\n  var supportsVersions = selectableItemsTypes && selectableItemsTypes.indexOf('versions') > -1;\n  var selectedVersion = versions.filter(function (version) {\n    return version.value === resource.versionId;\n  })[0] || null;\n\n  function handleUriChange(event) {\n    var uri = event.detail.value;\n    var errorCode = isInputTouched ? validate(uri) : undefined;\n    resetVersions();\n\n    _onChange({\n      uri: uri\n    }, getErrorText(i18nStrings, errorCode));\n  }\n\n  function handleUriBlur() {\n    isInputBlurredRef.current = true;\n    setInputTouched(true);\n    var errorCode = validate(resource.uri);\n\n    _onChange(resource, getErrorText(i18nStrings, errorCode));\n\n    if (supportsVersions) {\n      loadVersions(resource.uri);\n    }\n  }\n\n  useEffect(function () {\n    var _a;\n\n    if (!isInputBlurredRef.current || !supportsVersions) {\n      return;\n    }\n\n    var cancel = ((_a = loadVersions(uri)) !== null && _a !== void 0 ? _a : {}).cancel;\n    return cancel;\n  }, [uri, supportsVersions, loadVersions]);\n  return React.createElement(\"div\", {\n    className: styles.root\n  }, React.createElement(\"div\", {\n    className: styles.layout\n  }, React.createElement(InternalFormField, {\n    className: styles['layout-uri'],\n    label: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextUriLabel,\n    stretch: true\n  }, React.createElement(SearchInput, {\n    ref: inputRef,\n    value: uri,\n    ariaDescribedby: inputAriaDescribedby,\n    placeholder: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextInputPlaceholder,\n    onChange: handleUriChange,\n    invalid: invalid,\n    onFocus: function onFocus() {\n      return isInputBlurredRef.current = false;\n    },\n    onBlur: handleUriBlur\n  })), supportsVersions && React.createElement(InternalFormField, {\n    className: styles['layout-version'],\n    label: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextVersionSelectLabel,\n    stretch: true\n  }, React.createElement(InternalSelect, {\n    selectedOption: selectedVersion,\n    placeholder: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextSelectPlaceholder,\n    disabled: versions.length === 0,\n    options: versions,\n    onChange: function onChange(event) {\n      return _onChange(__assign(__assign({}, resource), {\n        versionId: event.detail.selectedOption.value\n      }), undefined);\n    },\n    invalid: false\n  })), React.createElement(\"div\", null, React.createElement(InternalButton, {\n    className: styles['view-button'],\n    disabled: !viewHref,\n    href: viewHref,\n    target: \"_blank\",\n    iconName: \"external\",\n    iconAlign: \"right\",\n    formAction: \"none\"\n  }, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextViewButton)), React.createElement(\"div\", {\n    className: styles['layout-divider']\n  }), React.createElement(\"div\", null, React.createElement(InternalButton, {\n    className: styles['browse-button'],\n    disabled: loading,\n    formAction: \"none\",\n    onClick: onBrowse\n  }, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextBrowseButton))), React.createElement(\"div\", {\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  }, loading && React.createElement(InternalBox, {\n    margin: {\n      top: 's'\n    }\n  }, React.createElement(InternalStatusIndicator, {\n    type: \"loading\"\n  }, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextLoadingText))));\n});","map":null,"metadata":{},"sourceType":"module"}