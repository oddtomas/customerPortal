{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '../internal/logging';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { Progress, ResultState, SmallText } from './internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nexport default function ProgressBar(_a) {\n  var _b = _a.value,\n      value = _b === void 0 ? 0 : _b,\n      _c = _a.status,\n      status = _c === void 0 ? 'in-progress' : _c,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'standalone' : _d,\n      resultButtonText = _a.resultButtonText,\n      label = _a.label,\n      description = _a.description,\n      additionalInfo = _a.additionalInfo,\n      resultText = _a.resultText,\n      onResultButtonClick = _a.onResultButtonClick,\n      rest = __rest(_a, [\"value\", \"status\", \"variant\", \"resultButtonText\", \"label\", \"description\", \"additionalInfo\", \"resultText\", \"onResultButtonClick\"]);\n\n  var __internalRootRef = useBaseComponent('ProgressBar').__internalRootRef;\n\n  var baseProps = getBaseProps(rest);\n  var generatedName = useUniqueId('awsui-progress-bar-');\n  var labelId = \"\".concat(generatedName, \"-label\");\n  var isInFlash = variant === 'flash';\n  var isInProgressState = status === 'in-progress';\n\n  if (isInFlash && resultButtonText) {\n    warnOnce('ProgressBar', 'The `resultButtonText` is ignored if you set `variant=\"flash\"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.');\n  }\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, variant && styles[variant]),\n    ref: __internalRootRef\n  }), React.createElement(\"div\", {\n    className: isInFlash ? styles['flash-container'] : undefined\n  }, React.createElement(\"div\", {\n    className: clsx(styles['word-wrap'], styles[\"label-\".concat(variant)]),\n    id: labelId\n  }, label), description && React.createElement(SmallText, {\n    color: isInFlash ? 'inherit' : undefined\n  }, description), React.createElement(\"div\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, isInProgressState ? React.createElement(Progress, {\n    value: value,\n    labelId: labelId,\n    isInFlash: isInFlash\n  }) : React.createElement(ResultState, {\n    resultText: resultText,\n    isInFlash: isInFlash,\n    resultButtonText: resultButtonText,\n    status: status,\n    onClick: function onClick() {\n      fireNonCancelableEvent(onResultButtonClick);\n    }\n  }))), additionalInfo && React.createElement(SmallText, {\n    color: isInFlash ? 'inherit' : undefined\n  }, additionalInfo));\n}\napplyDisplayName(ProgressBar, 'ProgressBar');","map":null,"metadata":{},"sourceType":"module"}