{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport styles from './styles.css.js';\nimport { ExpandableSectionContainer } from './expandable-section-container';\nimport { ExpandableSectionHeader } from './expandable-section-header';\nexport default function InternalExpandableSection(_a) {\n  var controlledExpanded = _a.expanded,\n      defaultExpanded = _a.defaultExpanded,\n      onChange = _a.onChange,\n      _b = _a.variant,\n      variant = _b === void 0 ? 'default' : _b,\n      children = _a.children,\n      header = _a.header,\n      disableContentPaddings = _a.disableContentPaddings,\n      __internalRootRef = _a.__internalRootRef,\n      props = __rest(_a, [\"expanded\", \"defaultExpanded\", \"onChange\", \"variant\", \"children\", \"header\", \"disableContentPaddings\", \"__internalRootRef\"]);\n\n  var ref = useRef(null);\n  var controlId = useUniqueId();\n  var triggerControlId = \"\".concat(controlId, \"-trigger\");\n  var baseProps = getBaseProps(props);\n\n  var _c = useControllable(controlledExpanded, onChange, defaultExpanded, {\n    componentName: 'ExpandableSection',\n    controlledProp: 'expanded',\n    changeHandler: 'onChange'\n  }),\n      expanded = _c[0],\n      setExpanded = _c[1];\n\n  var onExpandChange = useCallback(function (expanded) {\n    setExpanded(expanded);\n    fireNonCancelableEvent(onChange, {\n      expanded: expanded\n    });\n  }, [onChange, setExpanded]);\n  var onClick = useCallback(function () {\n    onExpandChange(!expanded);\n  }, [onExpandChange, expanded]);\n  var onKeyUp = useCallback(function (event) {\n    var interactionKeys = [KeyCode.enter, KeyCode.space];\n\n    if (interactionKeys.indexOf(event.keyCode) !== -1) {\n      onExpandChange(!expanded);\n    }\n  }, [onExpandChange, expanded]);\n  var onKeyDown = useCallback(function (event) {\n    if (event.keyCode === KeyCode.space) {\n      // Prevent the page from scrolling when toggling the component with the space bar.\n      event.preventDefault();\n    }\n  }, []);\n  var triggerProps = {\n    ariaControls: controlId,\n    ariaLabelledBy: triggerControlId,\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown,\n    onClick: onClick\n  };\n  return React.createElement(ExpandableSectionContainer, __assign({}, baseProps, {\n    expanded: expanded,\n    className: clsx(baseProps.className, styles.root),\n    variant: variant,\n    disableContentPaddings: disableContentPaddings,\n    header: React.createElement(ExpandableSectionHeader, __assign({\n      id: triggerControlId,\n      className: clsx(styles.header, styles[\"header-\".concat(variant)]),\n      variant: variant,\n      expanded: !!expanded\n    }, triggerProps), header),\n    __internalRootRef: __internalRootRef\n  }), React.createElement(CSSTransition, {\n    \"in\": expanded,\n    timeout: 30,\n    classNames: {\n      enter: styles['content-enter']\n    },\n    nodeRef: ref\n  }, React.createElement(\"div\", {\n    id: controlId,\n    ref: ref,\n    className: clsx(styles.content, styles[\"content-\".concat(variant)], expanded && styles['content-expanded']),\n    role: \"group\",\n    \"aria-labelledby\": triggerControlId\n  }, children)));\n}","map":null,"metadata":{},"sourceType":"module"}