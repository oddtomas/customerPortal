{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport InternalBox from '../box/internal';\nimport styles from './styles.css.js';\nimport React, { useCallback } from 'react';\nimport InternalFormField from '../form-field/internal';\nimport InternalColumnLayout from '../column-layout/internal';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport InternalGrid from '../grid/internal';\nimport { InternalButton } from '../button/internal';\nimport clsx from 'clsx';\n\nvar Divider = function Divider() {\n  return React.createElement(InternalBox, {\n    className: styles.divider,\n    padding: {\n      top: 'l'\n    }\n  });\n};\n\nvar Attribute = function Attribute(_a) {\n  var control = _a.control,\n      hideLabel = _a.hideLabel,\n      props = __rest(_a, [\"control\", \"hideLabel\"]);\n\n  return React.createElement(InternalFormField, __assign({\n    __hideLabel: hideLabel\n  }, props, {\n    className: styles.field,\n    stretch: true\n  }), control);\n};\n\nvar GRID_DEFINITION = [{\n  colspan: {\n    \"default\": 12,\n    xs: 9\n  }\n}];\nvar REMOVABLE_GRID_DEFINITION = [{\n  colspan: {\n    \"default\": 12,\n    xs: 9\n  }\n}, {\n  colspan: {\n    \"default\": 12,\n    xs: 3\n  }\n}];\nexport var Row = React.memo(function (_a) {\n  var breakpoint = _a.breakpoint,\n      item = _a.item,\n      definition = _a.definition,\n      index = _a.index,\n      removable = _a.removable,\n      removeButtonText = _a.removeButtonText,\n      removeButtonRefs = _a.removeButtonRefs,\n      onRemoveButtonClick = _a.onRemoveButtonClick;\n  var isNarrowViewport = breakpoint === 'default' || breakpoint === 'xxs';\n  var isWideViewport = !isNarrowViewport;\n  var handleRemoveClick = useCallback(function () {\n    fireNonCancelableEvent(onRemoveButtonClick, {\n      itemIndex: index\n    });\n  }, [onRemoveButtonClick, index]);\n\n  var render = function render(item, itemIndex, slot) {\n    return typeof slot === 'function' ? slot(item, itemIndex) : slot;\n  };\n\n  return React.createElement(InternalBox, {\n    className: styles.row,\n    margin: {\n      bottom: 's'\n    }\n  }, React.createElement(InternalGrid, {\n    __breakpoint: breakpoint,\n    gridDefinition: removable ? REMOVABLE_GRID_DEFINITION : GRID_DEFINITION\n  }, React.createElement(InternalColumnLayout, {\n    className: styles['row-control'],\n    columns: definition.length,\n    __breakpoint: breakpoint\n  }, definition.map(function (_a, defIndex) {\n    var info = _a.info,\n        label = _a.label,\n        constraintText = _a.constraintText,\n        errorText = _a.errorText,\n        control = _a.control;\n    return React.createElement(Attribute, {\n      key: defIndex,\n      label: label,\n      info: info,\n      constraintText: constraintText && render(item, index, constraintText),\n      errorText: errorText && render(item, index, errorText),\n      control: control && render(item, index, control),\n      hideLabel: isWideViewport && index > 0\n    });\n  })), removable && React.createElement(ButtonContainer, {\n    index: index,\n    isNarrowViewport: isNarrowViewport\n  }, React.createElement(InternalButton, {\n    className: styles['remove-button'],\n    formAction: \"none\",\n    ref: function ref(_ref) {\n      removeButtonRefs[index] = _ref !== null && _ref !== void 0 ? _ref : undefined;\n    },\n    onClick: handleRemoveClick\n  }, removeButtonText))), isNarrowViewport && React.createElement(Divider, null));\n});\n\nvar ButtonContainer = function ButtonContainer(_a) {\n  var _b;\n\n  var index = _a.index,\n      children = _a.children,\n      isNarrowViewport = _a.isNarrowViewport;\n  return React.createElement(\"div\", {\n    className: clsx((_b = {}, _b[styles['button-container']] = !isNarrowViewport && index === 0, _b[styles['right-align']] = isNarrowViewport, _b))\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}