{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback } from 'react';\nimport InternalIcon from '../icon/internal';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport styles from './styles.css.js';\n\nvar SelectToggle = function SelectToggle(_a) {\n  var controlId = _a.controlId,\n      allHidden = _a.allHidden,\n      expanded = _a.expanded,\n      numberOfHiddenOptions = _a.numberOfHiddenOptions,\n      onClick = _a.onClick,\n      _b = _a.i18nStrings,\n      i18nStrings = _b === void 0 ? {} : _b;\n  var focusVisible = useFocusVisible();\n  var numberOfHiddenOptionLabel = allHidden ? numberOfHiddenOptions : \"+\".concat(numberOfHiddenOptions);\n  var description = expanded ? i18nStrings.limitShowFewer : \"\".concat(i18nStrings.limitShowMore || '', \" (\").concat(numberOfHiddenOptionLabel, \")\");\n  var handleClick = useCallback(function () {\n    fireNonCancelableEvent(onClick, null);\n  }, [onClick]);\n  return React.createElement(\"button\", __assign({\n    type: \"button\",\n    className: styles.toggle,\n    onClick: handleClick,\n    \"aria-controls\": controlId,\n    \"aria-expanded\": expanded\n  }, focusVisible), React.createElement(InternalIcon, {\n    name: expanded ? 'treeview-collapse' : 'treeview-expand'\n  }), React.createElement(\"span\", {\n    className: styles.description\n  }, description));\n};\n\nexport default SelectToggle;","map":null,"metadata":{},"sourceType":"module"}