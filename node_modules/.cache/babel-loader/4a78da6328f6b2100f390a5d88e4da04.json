{"ast":null,"code":"var SPACE_BETWEEN = 4;\nexport function formatTicks(_a) {\n  var ticks = _a.ticks,\n      scale = _a.scale,\n      getLabelSpace = _a.getLabelSpace,\n      tickFormatter = _a.tickFormatter;\n  return ticks.map(function (tick) {\n    var _a;\n\n    var position = (_a = scale.d3Scale(tick)) !== null && _a !== void 0 ? _a : NaN;\n    var label = tickFormatter ? tickFormatter(tick) : tick.toString();\n    var lines = (label + '').split('\\n');\n    return {\n      position: position,\n      lines: lines,\n      space: Math.max.apply(Math, lines.map(getLabelSpace))\n    };\n  });\n}\nexport function getVisibleTicks(ticks, from, until, balanceTicks) {\n  if (balanceTicks === void 0) {\n    balanceTicks = false;\n  }\n\n  ticks = getTicksInRange(ticks, from, until);\n  return balanceTicks ? getReducedTicks(ticks) : removeIntersections(ticks);\n}\n\nfunction getTicksInRange(ticks, from, until) {\n  return ticks.filter(function (tick) {\n    return from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until;\n  });\n}\n\nfunction getReducedTicks(ticks) {\n  var reduceLabelRatio = findReduceLabelRatio(ticks);\n  var reducedTicks = [];\n\n  for (var index = 0; index < ticks.length; index += reduceLabelRatio) {\n    reducedTicks.push(ticks[index]);\n  }\n\n  return reducedTicks;\n} // Returns a ratio such that all elements can be displayed with no intersections.\n\n\nfunction findReduceLabelRatio(ticks, ratio) {\n  if (ratio === void 0) {\n    ratio = 1;\n  }\n\n  if (ratio >= ticks.length) {\n    return ratio;\n  }\n\n  for (var i = ratio; i < ticks.length; i += ratio) {\n    if (hasIntersection(ticks[i - ratio], ticks[i])) {\n      return findReduceLabelRatio(ticks, ratio + 1);\n    }\n  }\n\n  return ratio;\n}\n\nfunction removeIntersections(ticks) {\n  var visibleTicks = [];\n  var prevTick = null;\n\n  for (var _i = 0, ticks_1 = ticks; _i < ticks_1.length; _i++) {\n    var tick = ticks_1[_i];\n\n    if (!prevTick || !hasIntersection(prevTick, tick)) {\n      visibleTicks.push(tick);\n      prevTick = tick;\n    }\n  }\n\n  return visibleTicks;\n}\n\nfunction hasIntersection(a, b) {\n  var _a = a.position < b.position ? [a, b] : [b, a],\n      left = _a[0],\n      right = _a[1];\n\n  var leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;\n  var rightEdge = right.position - right.space / 2;\n  return leftEdge > rightEdge;\n}","map":null,"metadata":{},"sourceType":"module"}