{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport InternalLink from '../../../link/internal';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { fireNonCancelableEvent } from '../../events';\nimport { usePrevious } from '../../hooks/use-previous';\nimport styles from './styles.css.js';\n\nfunction DropdownStatus(_a) {\n  var children = _a.children;\n  return React.createElement(\"div\", {\n    className: styles.root\n  }, children);\n}\n\nexport var useDropdownStatus = function useDropdownStatus(_a) {\n  var statusType = _a.statusType,\n      empty = _a.empty,\n      loadingText = _a.loadingText,\n      finishedText = _a.finishedText,\n      errorText = _a.errorText,\n      recoveryText = _a.recoveryText,\n      isEmpty = _a.isEmpty,\n      isNoMatch = _a.isNoMatch,\n      noMatch = _a.noMatch,\n      onRecoveryClick = _a.onRecoveryClick;\n  var linkRef = useRef(null);\n\n  var focusRecoveryLink = function focusRecoveryLink() {\n    var _a;\n\n    return (_a = linkRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  };\n\n  var previousStatusType = usePrevious(statusType);\n  var statusResult = {\n    isSticky: true,\n    content: null,\n    focusRecoveryLink: focusRecoveryLink\n  };\n\n  if (statusType === 'loading') {\n    statusResult.content = React.createElement(InternalStatusIndicator, {\n      type: 'loading'\n    }, loadingText);\n  } else if (statusType === 'error') {\n    statusResult.content = React.createElement(React.Fragment, null, React.createElement(InternalStatusIndicator, {\n      type: \"error\",\n      __animate: previousStatusType !== 'error'\n    }, errorText), ' ', recoveryText && React.createElement(InternalLink, {\n      ref: linkRef,\n      onFollow: function onFollow() {\n        return fireNonCancelableEvent(onRecoveryClick);\n      },\n      variant: \"recovery\",\n      className: styles.recovery\n    }, recoveryText));\n  } else if (isEmpty && empty) {\n    statusResult.content = empty;\n  } else if (isNoMatch && noMatch) {\n    statusResult.content = noMatch;\n  } else if (statusType === 'finished' && finishedText) {\n    statusResult.content = finishedText;\n    statusResult.isSticky = false;\n  }\n\n  return statusResult;\n};\nexport default DropdownStatus;","map":null,"metadata":{},"sourceType":"module"}