{"ast":null,"code":"function getSorter(sortingField) {\n  return function (row1, row2) {\n    var _a, _b; // Use empty string as a default value, because it works well to compare with both strings and numbers:\n    // Every number can be casted to a string, but not every string can be casted to a meaningful number,\n    // sometimes it is NaN.\n\n\n    var value1 = (_a = row1[sortingField]) !== null && _a !== void 0 ? _a : '';\n    var value2 = (_b = row2[sortingField]) !== null && _b !== void 0 ? _b : '';\n\n    if (typeof value1 === 'string' && typeof value2 === 'string') {\n      return value1.localeCompare(value2);\n    } // use loose comparison to handle inconsistent data types\n    // eslint-disable-next-line eqeqeq\n\n\n    return value1 < value2 ? -1 : value1 == value2 ? 0 : 1;\n  };\n}\n\nexport function sort(items, state) {\n  if (!state) {\n    return items;\n  }\n\n  var sortingColumn = state.sortingColumn;\n  var comparator = 'sortingComparator' in sortingColumn ? sortingColumn.sortingComparator : sortingColumn.sortingField ? getSorter(sortingColumn.sortingField) : undefined;\n\n  if (!comparator) {\n    return items;\n  }\n\n  var sorted = items.slice();\n  var direction = state.isDescending ? -1 : 1;\n  sorted.sort(function (a, b) {\n    return comparator(a, b) * direction;\n  });\n  return sorted;\n}","map":null,"metadata":{},"sourceType":"module"}