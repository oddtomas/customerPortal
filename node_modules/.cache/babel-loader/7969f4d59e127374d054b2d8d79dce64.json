{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The layoutElement ref will be used by the resize observers to calculate the offset from\n * the top and bottom of the viewport based on the header and footer elements. This is to\n * ensure the Layout component minimum height will fill 100% of the viewport less those\n * cumulative heights.\n */\n\nexport default function Layout(_a) {\n  var _b, _c, _d, _e, _f, _g;\n\n  var children = _a.children;\n\n  var _h = useContext(AppLayoutContext),\n      contentHeader = _h.contentHeader,\n      contentType = _h.contentType,\n      disableBodyScroll = _h.disableBodyScroll,\n      disableContentHeaderOverlap = _h.disableContentHeaderOverlap,\n      dynamicOverlapHeight = _h.dynamicOverlapHeight,\n      footerHeight = _h.footerHeight,\n      hasNotificationsContent = _h.hasNotificationsContent,\n      headerHeight = _h.headerHeight,\n      isNavigationOpen = _h.isNavigationOpen,\n      isSplitPanelOpen = _h.isSplitPanelOpen,\n      isToolsOpen = _h.isToolsOpen,\n      layoutElement = _h.layoutElement,\n      layoutWidth = _h.layoutWidth,\n      mainOffsetLeft = _h.mainOffsetLeft,\n      maxContentWidth = _h.maxContentWidth,\n      minContentWidth = _h.minContentWidth,\n      navigationHide = _h.navigationHide,\n      notificationsHeight = _h.notificationsHeight,\n      setOffsetBottom = _h.setOffsetBottom,\n      splitPanel = _h.splitPanel,\n      stickyNotifications = _h.stickyNotifications,\n      toolsHide = _h.toolsHide;\n\n  var _j = useContext(SplitPanelContext),\n      getSplitPanelHeader = _j.getHeader,\n      splitPanelPosition = _j.position,\n      splitPanelSize = _j.size;\n\n  var isOverlapDisabled = getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap); // Content gaps on the left and right are used with the minmax function in the CSS grid column definition\n\n  var hasContentGapLeft = getContentGapLeft(isNavigationOpen, navigationHide);\n  var hasContentGapRight = getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide);\n  /**\n   * Determine the offsetBottom value based on the presence of a footer element and\n   * the SplitPanel component. Ignore the SplitPanel if it is not in the bottom\n   * position. Use the size property if it is open and the header height if it is closed.\n   */\n\n  useLayoutEffect(function handleOffsetBottom() {\n    var offsetBottom = footerHeight;\n\n    if (splitPanel && splitPanelPosition === 'bottom') {\n      if (isSplitPanelOpen) {\n        offsetBottom += splitPanelSize;\n      } else {\n        var splitPanelHeader = getSplitPanelHeader();\n        offsetBottom += splitPanelHeader ? splitPanelHeader.clientHeight : 0;\n      }\n    }\n\n    setOffsetBottom(offsetBottom);\n  }, [footerHeight, getSplitPanelHeader, isSplitPanelOpen, setOffsetBottom, splitPanelPosition, splitPanel, splitPanelSize]);\n  return React.createElement(\"main\", {\n    className: clsx(styles.layout, styles[\"content-type-\".concat(contentType)], styles[\"split-panel-position-\".concat(splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : 'bottom')], (_b = {}, _b[styles['disable-body-scroll']] = disableBodyScroll, _b[testutilStyles['disable-body-scroll-root']] = disableBodyScroll, _b[styles['has-content-gap-left']] = hasContentGapLeft, _b[styles['has-content-gap-right']] = hasContentGapRight, _b[styles['has-max-content-width']] = maxContentWidth && maxContentWidth > 0, _b[styles['has-split-panel']] = splitPanel, _b[styles['has-sticky-notifications']] = stickyNotifications && hasNotificationsContent, _b[styles['is-overlap-disabled']] = isOverlapDisabled, _b), testutilStyles.root),\n    ref: layoutElement,\n    style: __assign(__assign(__assign(__assign((_c = {}, _c[customCssProps.headerHeight] = \"\".concat(headerHeight, \"px\"), _c[customCssProps.footerHeight] = \"\".concat(footerHeight, \"px\"), _c[customCssProps.layoutWidth] = \"\".concat(layoutWidth, \"px\"), _c[customCssProps.mainOffsetLeft] = \"\".concat(mainOffsetLeft, \"px\"), _c), maxContentWidth && (_d = {}, _d[customCssProps.maxContentWidth] = \"\".concat(maxContentWidth, \"px\"), _d)), minContentWidth && (_e = {}, _e[customCssProps.minContentWidth] = \"\".concat(minContentWidth, \"px\"), _e)), (_f = {}, _f[customCssProps.notificationsHeight] = \"\".concat(notificationsHeight, \"px\"), _f)), !isOverlapDisabled && dynamicOverlapHeight > 0 && (_g = {}, _g[customCssProps.overlapHeight] = \"\".concat(dynamicOverlapHeight, \"px\"), _g))\n  }, children);\n}\n/**\n * When the Navigation and Tools are present the grid definition has the center column\n * touch the first and last columns with no gap. The forms with the circular buttons\n * for Navigation and Tools have internal padding which creates the necessary\n * horizontal space when the drawers are closed. The remaining conditions below\n * determine the necessity of utilizing the content gap left property to create\n * horizontal space between the center column and its adjacent siblings.\n */\n\nfunction getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide) {\n  var hasContentGapRight = false; // Main is touching the edge of the Layout and needs a content gap\n\n  if (!splitPanel && toolsHide) {\n    hasContentGapRight = true;\n  } // Main is touching the Tools drawer and needs a content gap\n\n\n  if ((!splitPanel || !isSplitPanelOpen) && !toolsHide && isToolsOpen) {\n    hasContentGapRight = true;\n  } // Main is touching the edge of the Layout and needs a content gap\n\n\n  if (splitPanel && splitPanelPosition === 'bottom' && (isToolsOpen || toolsHide)) {\n    hasContentGapRight = true;\n  } // Main is touching the Split Panel drawer and needs a content gap\n\n\n  if (splitPanel && isSplitPanelOpen && splitPanelPosition === 'side') {\n    hasContentGapRight = true;\n  }\n\n  return hasContentGapRight;\n}\n/**\n * Additional function to determine whether or not a content gap is needed\n * on the left (see the getContentGapRight function). The same render logic applies\n * regarding the center column touching an adjacent sibling but the only\n * component state that needs to be tracked is the Navigation.\n */\n\n\nfunction getContentGapLeft(isNavigationOpen, navigationHide) {\n  return isNavigationOpen || navigationHide ? true : false;\n}\n/**\n * Determine whether the overlap between the contentHeader and content slots should be disabled.\n * The disableContentHeaderOverlap property is absolute and will always disable the overlap\n * if it is set to true. If there is no contentHeader then the overlap should be disabled\n * unless there is a dynamicOverlapHeight. The dynamicOverlapHeight property is set by a\n * component in the content slot that needs to manually control the overlap height. Components\n * such as the Table (full page variant), Wizard, ContentLayout use this property and will\n * retain the overlap even if there is nothing rendered in the contentHeader slot.\n */\n\n\nfunction getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap) {\n  var isOverlapDisabled = false;\n\n  if (disableContentHeaderOverlap) {\n    isOverlapDisabled = true;\n  } else if (!contentHeader && dynamicOverlapHeight <= 0) {\n    isOverlapDisabled = true;\n  }\n\n  return isOverlapDisabled;\n}","map":null,"metadata":{},"sourceType":"module"}