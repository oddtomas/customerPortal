{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useAutosuggestItems, useFilteredItems, useKeyboardHandler, useSelectVisibleOption, useHighlightVisibleOption, getParentGroup } from './controller';\nimport { useDropdownA11yProps } from './hooks/a11y';\nimport VirtualList from './virtual-list';\nimport PlainList from './plain-list';\nimport Dropdown from '../internal/components/dropdown';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\nimport DropdownFooter from '../internal/components/dropdown-footer';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { getBaseProps } from '../internal/base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { createHighlightedOptionHook } from '../internal/components/options-list/utils/use-highlight-option';\nimport InternalInput from '../input/internal';\nimport styles from './styles.css.js';\nimport { checkOptionValueField } from '../select/utils/check-option-value-field';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { fireCancelableEvent } from '../internal/events/index';\nimport { useAnnouncement } from '../select/utils/use-announcement';\nimport TabTrap from '../internal/components/tab-trap';\n\nvar isInteractive = function isInteractive(option) {\n  return !!option && !option.disabled && option.type !== 'parent';\n};\n\nvar isHighlightable = function isHighlightable(option) {\n  return !!option && option.type !== 'parent';\n};\n\nvar useHighlightedOption = createHighlightedOptionHook({\n  isHighlightable: isHighlightable\n});\n\nvar createMouseEventHandler = function createMouseEventHandler(handler, usingMouse) {\n  return function (itemIndex) {\n    // prevent mouse events to avoid losing focus from the input\n    usingMouse.current = true;\n\n    if (itemIndex > -1) {\n      handler(itemIndex);\n    }\n  };\n};\n\nvar useLoadMoreItems = function useLoadMoreItems(onLoadItems) {\n  var lastFilteringText = useRef(null);\n  return useCallback(function (firstPage, samePage, filteringText) {\n    if (samePage || !firstPage || filteringText === undefined || lastFilteringText.current !== filteringText) {\n      if (filteringText !== undefined) {\n        lastFilteringText.current = filteringText;\n      }\n\n      if (lastFilteringText.current !== null && onLoadItems) {\n        fireNonCancelableEvent(onLoadItems, {\n          filteringText: lastFilteringText.current,\n          firstPage: firstPage,\n          samePage: samePage\n        });\n      }\n    }\n  }, [onLoadItems]);\n};\n\nvar InternalAutosuggest = React.forwardRef(function (props, ref) {\n  var _a;\n\n  var value = props.value,\n      onChange = props.onChange,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      onKeyUp = props.onKeyUp,\n      onLoadItems = props.onLoadItems,\n      options = props.options,\n      _b = props.filteringType,\n      filteringType = _b === void 0 ? 'auto' : _b,\n      _c = props.statusType,\n      statusType = _c === void 0 ? 'finished' : _c,\n      placeholder = props.placeholder,\n      name = props.name,\n      disabled = props.disabled,\n      _d = props.disableBrowserAutocorrect,\n      disableBrowserAutocorrect = _d === void 0 ? false : _d,\n      autoFocus = props.autoFocus,\n      readOnly = props.readOnly,\n      ariaLabel = props.ariaLabel,\n      ariaRequired = props.ariaRequired,\n      enteredTextLabel = props.enteredTextLabel,\n      onKeyDown = props.onKeyDown,\n      virtualScroll = props.virtualScroll,\n      expandToViewport = props.expandToViewport,\n      onSelect = props.onSelect,\n      selectedAriaLabel = props.selectedAriaLabel,\n      renderHighlightedAriaLive = props.renderHighlightedAriaLive,\n      __dropdownWidth = props.__dropdownWidth,\n      __onOptionClick = props.__onOptionClick,\n      __disableShowAll = props.__disableShowAll,\n      __hideEnteredTextOption = props.__hideEnteredTextOption,\n      __onOpen = props.__onOpen,\n      __internalRootRef = props.__internalRootRef,\n      rest = __rest(props, [\"value\", \"onChange\", \"onBlur\", \"onFocus\", \"onKeyUp\", \"onLoadItems\", \"options\", \"filteringType\", \"statusType\", \"placeholder\", \"name\", \"disabled\", \"disableBrowserAutocorrect\", \"autoFocus\", \"readOnly\", \"ariaLabel\", \"ariaRequired\", \"enteredTextLabel\", \"onKeyDown\", \"virtualScroll\", \"expandToViewport\", \"onSelect\", \"selectedAriaLabel\", \"renderHighlightedAriaLive\", \"__dropdownWidth\", \"__onOptionClick\", \"__disableShowAll\", \"__hideEnteredTextOption\", \"__onOpen\", \"__internalRootRef\"]);\n\n  var filterText = rest.__filterText;\n  filterText = filterText === undefined ? value : filterText;\n  checkControlled('Autosuggest', 'value', value, 'onChange', onChange);\n  checkOptionValueField('Autosuggest', 'options', options);\n  var usingMouse = useRef(true);\n\n  var _e = useState(false),\n      showAll = _e[0],\n      setShowAll = _e[1];\n\n  var _f = useState(false),\n      open = _f[0],\n      setOpen = _f[1];\n\n  var autosuggestItems = useAutosuggestItems(options);\n  var filteredItems = useFilteredItems(autosuggestItems, value, filterText, filteringType, showAll, __hideEnteredTextOption);\n\n  var openDropdown = function openDropdown() {\n    return !readOnly && setOpen(true);\n  };\n\n  var scrollToIndex = useRef(null);\n\n  var _g = useHighlightedOption(filteredItems),\n      highlightedOption = _g.highlightedOption,\n      highlightedIndex = _g.highlightedIndex,\n      moveHighlight = _g.moveHighlight,\n      resetHighlight = _g.resetHighlight,\n      setHighlightedIndex = _g.setHighlightedIndex;\n\n  var closeDropdown = function closeDropdown() {\n    setOpen(false);\n    resetHighlight();\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var _a;\n\n    if (event.currentTarget.contains(event.relatedTarget) || ((_a = dropdownFooterRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n      return;\n    }\n\n    closeDropdown();\n    fireNonCancelableEvent(onBlur);\n  };\n\n  var selectOption = function selectOption(option) {\n    var value = option.value || '';\n    fireNonCancelableEvent(onChange, {\n      value: value\n    });\n    var selectedCancelled = fireCancelableEvent(__onOptionClick, option);\n\n    if (!selectedCancelled) {\n      closeDropdown();\n    } else {\n      resetHighlight();\n    }\n\n    fireNonCancelableEvent(onSelect, {\n      value: value\n    });\n  };\n\n  var selectHighlighted = function selectHighlighted() {\n    if (highlightedOption) {\n      if (isInteractive(highlightedOption)) {\n        selectOption(highlightedOption);\n      }\n    } else {\n      closeDropdown();\n    }\n  };\n\n  var fireLoadMore = useLoadMoreItems(onLoadItems);\n\n  var handleInputChange = function handleInputChange(e) {\n    openDropdown();\n    setShowAll(false);\n    resetHighlight();\n    onChange && onChange(e);\n  };\n\n  var highlightVisibleOption = useHighlightVisibleOption(filteredItems, setHighlightedIndex, isHighlightable);\n  var selectVisibleOption = useSelectVisibleOption(filteredItems, selectOption, isInteractive);\n  var handleMouseUp = createMouseEventHandler(selectVisibleOption, usingMouse);\n  var handleMouseMove = createMouseEventHandler(highlightVisibleOption, usingMouse);\n  var handleKeyDown = useKeyboardHandler(moveHighlight, openDropdown, selectHighlighted, usingMouse, open, onKeyDown);\n  var handleLoadMore = useCallback(function () {\n    options && options.length && statusType === 'pending' && fireLoadMore(false, false);\n  }, [fireLoadMore, options, statusType]);\n  var handleRecoveryClick = useCallback(function () {\n    var _a;\n\n    fireLoadMore(false, true);\n    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [fireLoadMore]);\n  var formFieldContext = useFormFieldContext(rest);\n  var baseProps = getBaseProps(rest);\n  var inputRef = useRef(null);\n  var dropdownFooterRef = useRef(null);\n  useForwardFocus(ref, inputRef);\n  var selfControlId = useUniqueId('input');\n  var controlId = (_a = formFieldContext.controlId) !== null && _a !== void 0 ? _a : selfControlId;\n  var dropdownId = useUniqueId('dropdown');\n  var listId = useUniqueId('list'); // From an a11y point of view we only count the dropdown as 'expanded' if there are items that a user can dropdown into\n\n  var expanded = open && filteredItems.length > 1;\n\n  var _h = useDropdownA11yProps(listId, expanded, ariaLabel, highlightedOption),\n      inputA11yProps = _h[0],\n      highlightedA11yProps = _h[1];\n\n  var nativeAttributes = __assign({\n    name: name,\n    placeholder: placeholder,\n    autoFocus: autoFocus,\n    onClick: openDropdown\n  }, inputA11yProps);\n\n  var handleInputFocus = function handleInputFocus(e) {\n    !__disableShowAll && setShowAll(true);\n    var openPrevented = fireCancelableEvent(__onOpen, null);\n\n    if (!openPrevented) {\n      openDropdown();\n      fireLoadMore(true, false, '');\n    }\n\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);\n  };\n\n  useEffect(function () {\n    var _a;\n\n    (_a = scrollToIndex.current) === null || _a === void 0 ? void 0 : _a.call(scrollToIndex, highlightedIndex);\n  }, [highlightedIndex]);\n  var isEmpty = !value && !filteredItems.length;\n  var showRecoveryLink = open && statusType === 'error' && props.recoveryText;\n  var dropdownStatus = useDropdownStatus(__assign(__assign({}, props), {\n    isEmpty: isEmpty,\n    onRecoveryClick: handleRecoveryClick\n  }));\n  var ListComponent = virtualScroll ? VirtualList : PlainList;\n\n  var handleMouseDown = function handleMouseDown(event) {\n    // prevent currently focused element from losing it\n    event.preventDefault();\n  };\n\n  var announcement = useAnnouncement({\n    announceSelected: true,\n    highlightedOption: highlightedOption,\n    getParent: function getParent(option) {\n      var _a;\n\n      return (_a = getParentGroup(option)) === null || _a === void 0 ? void 0 : _a.option;\n    },\n    selectedAriaLabel: selectedAriaLabel,\n    renderHighlightedAriaLive: renderHighlightedAriaLive\n  });\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef,\n    onBlur: handleBlur\n  }), React.createElement(Dropdown, {\n    minWidth: __dropdownWidth,\n    stretchWidth: !__dropdownWidth,\n    trigger: React.createElement(React.Fragment, null, React.createElement(InternalInput, __assign({\n      type: \"search\",\n      value: value,\n      onChange: handleInputChange,\n      __onDelayedInput: function __onDelayedInput(event) {\n        return fireLoadMore(true, false, event.detail.value);\n      },\n      onFocus: handleInputFocus,\n      onKeyDown: handleKeyDown,\n      onKeyUp: onKeyUp,\n      disabled: disabled,\n      disableBrowserAutocorrect: disableBrowserAutocorrect,\n      readOnly: readOnly,\n      ariaRequired: ariaRequired,\n      ref: inputRef,\n      autoComplete: false,\n      __nativeAttributes: nativeAttributes\n    }, formFieldContext, {\n      controlId: controlId\n    })), React.createElement(TabTrap, {\n      focusNextCallback: function focusNextCallback() {\n        return dropdownStatus.focusRecoveryLink();\n      },\n      disabled: !open || !showRecoveryLink\n    })),\n    onMouseDown: handleMouseDown,\n    open: open,\n    dropdownId: dropdownId,\n    footer: dropdownStatus.isSticky ? React.createElement(\"div\", {\n      ref: dropdownFooterRef,\n      className: styles['dropdown-footer']\n    }, React.createElement(TabTrap, {\n      focusNextCallback: function focusNextCallback() {\n        var _a;\n\n        return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      disabled: !showRecoveryLink\n    }), React.createElement(DropdownFooter, {\n      content: dropdownStatus.content,\n      hasItems: filteredItems.length >= 1\n    }), React.createElement(TabTrap, {\n      focusNextCallback: function focusNextCallback() {\n        var _a;\n\n        return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      disabled: !showRecoveryLink\n    })) : null,\n    expandToViewport: expandToViewport,\n    hasContent: filteredItems.length >= 1 || dropdownStatus.content !== null\n  }, open && React.createElement(ListComponent, {\n    listBottom: !dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: dropdownStatus.content\n    }) : null,\n    handleLoadMore: handleLoadMore,\n    filteredItems: filteredItems,\n    highlightText: filterText,\n    usingMouse: usingMouse,\n    highlightedOption: highlightedOption,\n    enteredTextLabel: enteredTextLabel,\n    ref: scrollToIndex,\n    highlightedA11yProps: highlightedA11yProps,\n    hasDropdownStatus: dropdownStatus.content !== null,\n    menuProps: {\n      id: listId,\n      onMouseUp: handleMouseUp,\n      onMouseMove: handleMouseMove,\n      ariaLabelledby: controlId\n    },\n    screenReaderContent: announcement\n  })));\n});\nexport default InternalAutosuggest;","map":null,"metadata":{},"sourceType":"module"}