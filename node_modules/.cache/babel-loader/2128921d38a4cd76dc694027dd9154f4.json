{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { getBaseProps } from '../internal/base-component';\nimport { matchBreakpointMapping } from '../internal/breakpoints';\nimport { isDevelopment } from '../internal/is-development';\nimport * as logging from '../internal/logging';\nimport styles from './styles.css.js';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar InternalGrid = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var __breakpoint = _a.__breakpoint,\n      _c = _a.gridDefinition,\n      gridDefinition = _c === void 0 ? [] : _c,\n      _d = _a.disableGutters,\n      disableGutters = _d === void 0 ? false : _d,\n      children = _a.children,\n      __responsiveClassName = _a.__responsiveClassName,\n      _e = _a.__internalRootRef,\n      __internalRootRef = _e === void 0 ? null : _e,\n      restProps = __rest(_a, [\"__breakpoint\", \"gridDefinition\", \"disableGutters\", \"children\", \"__responsiveClassName\", \"__internalRootRef\"]);\n\n  var _f = useContainerBreakpoints(undefined),\n      defaultBreakpoint = _f[0],\n      defaultRef = _f[1];\n\n  if (__breakpoint !== undefined) {\n    defaultBreakpoint = __breakpoint;\n    defaultRef = ref;\n  }\n\n  var baseProps = getBaseProps(restProps);\n  /*\n  Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n  */\n\n  var flattenedChildren = flattenChildren(children);\n\n  if (isDevelopment) {\n    var columnCount = gridDefinition.length;\n    var childCount = flattenedChildren.length;\n\n    if (columnCount !== childCount) {\n      logging.warnOnce('Grid', \"The number of children (\".concat(childCount, \") does not match the number of columns defined (\").concat(columnCount, \").\"));\n    }\n  }\n\n  var mergedRef = useMergeRefs(defaultRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.grid, baseProps.className, (_b = {}, _b[styles['no-gutters']] = disableGutters, _b), __responsiveClassName ? __responsiveClassName(defaultBreakpoint) : null),\n    ref: mergedRef\n  }), flattenedChildren.map(function (child, i) {\n    var _a, _b, _c, _d; // If this react child is a primitive value, the key will be undefined\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var key = child.key;\n    return React.createElement(\"div\", {\n      key: key,\n      className: clsx(styles['grid-column'], getColumnClassNames('colspan', (_a = gridDefinition[i]) === null || _a === void 0 ? void 0 : _a.colspan, defaultBreakpoint), getColumnClassNames('offset', (_b = gridDefinition[i]) === null || _b === void 0 ? void 0 : _b.offset, defaultBreakpoint), getColumnClassNames('pull', (_c = gridDefinition[i]) === null || _c === void 0 ? void 0 : _c.pull, defaultBreakpoint), getColumnClassNames('push', (_d = gridDefinition[i]) === null || _d === void 0 ? void 0 : _d.push, defaultBreakpoint))\n    }, React.createElement(\"div\", {\n      className: styles['restore-pointer-events']\n    }, child));\n  }));\n});\n\nfunction getColumnClassNames(prop, mapping, breakpoint) {\n  if (typeof mapping === 'number') {\n    return styles[\"\".concat(prop, \"-\").concat(mapping)];\n  }\n\n  if (breakpoint === null || mapping === undefined) {\n    return null;\n  }\n\n  return styles[\"\".concat(prop, \"-\").concat(matchBreakpointMapping(mapping, breakpoint))];\n}\n\nexport default InternalGrid;","map":null,"metadata":{},"sourceType":"module"}