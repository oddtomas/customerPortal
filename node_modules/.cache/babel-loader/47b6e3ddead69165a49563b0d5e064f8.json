{"ast":null,"code":"import { KeyCode } from '../../keycode';\nimport * as logger from '../../logging';\nimport { isCommand, isDigit } from './utils/keys';\nimport { backspaceHandler, keyHandler, enterHandler } from './keyboard-handler';\n\nvar onAutoComplete = function onAutoComplete(value, onChange, maskFormat) {\n  // Do not autocomplete if input is empty\n  if (!value) {\n    return;\n  }\n\n  var autoCompletedValue = maskFormat.autoComplete(value);\n\n  if (autoCompletedValue !== value) {\n    onChange(autoCompletedValue);\n  }\n};\n\nvar preventDefault = function preventDefault(event, result) {\n  return result && event.preventDefault();\n};\n\nvar useMask = function useMask(_a) {\n  var _b = _a.value,\n      value = _b === void 0 ? '' : _b,\n      _onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      _onKeyDown = _a.onKeyDown,\n      format = _a.format,\n      inputRef = _a.inputRef,\n      _c = _a.autofix,\n      autofix = _c === void 0 ? false : _c,\n      _d = _a.disableAutocompleteOnBlur,\n      disableAutocompleteOnBlur = _d === void 0 ? false : _d,\n      setPosition = _a.setPosition;\n\n  if (!format.isValid(value)) {\n    logger.warnOnce('useMask', \"Invalid string \\\"\".concat(value, \"\\\" provided\"));\n  }\n\n  var onMaskChange = function onMaskChange(updatedValue) {\n    var autofixedUpdatedValue = autofix ? format.correctMinMaxValues(updatedValue) : updatedValue;\n\n    if (autofixedUpdatedValue === value || !format.isValid(autofixedUpdatedValue)) {\n      return;\n    }\n\n    onChange(autofixedUpdatedValue);\n  };\n\n  var initialValue = autofix ? format.correctMinMaxValues(value) : value;\n  var maskedValue = format.getValidValue(initialValue);\n  return {\n    value: maskedValue,\n    onKeyDown: function onKeyDown(event) {\n      var _a, _b;\n\n      var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n      var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n      var result;\n      var _c = event.detail,\n          keyCode = _c.keyCode,\n          key = _c.key,\n          ctrlKey = _c.ctrlKey,\n          metaKey = _c.metaKey;\n\n      if (isDigit(key) || format.isSeparator(key)) {\n        result = keyHandler(maskedValue, key, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.backspace) {\n        result = backspaceHandler(maskedValue, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.enter) {\n        result = enterHandler(maskedValue, format);\n      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {\n        event.preventDefault();\n      }\n\n      if (result) {\n        var value_1 = result.value,\n            position = result.position;\n        onMaskChange(value_1);\n        setPosition(position);\n      } // Proxy original event\n\n\n      _onKeyDown && _onKeyDown(event);\n    },\n    onChange: function onChange(_a) {\n      var detail = _a.detail;\n      return onMaskChange(detail.value);\n    },\n    onBlur: function onBlur() {\n      if (!disableAutocompleteOnBlur) {\n        onAutoComplete(maskedValue, onChange, format);\n      }\n\n      _onBlur && _onBlur();\n    },\n    onPaste: function onPaste(event) {\n      var _a, _b;\n\n      var text = (event.clipboardData || window.clipboardData).getData('text');\n      var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n      var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n      var formattedText = format.formatPastedText(text, maskedValue, selectionStart, selectionEnd);\n      onMaskChange(formattedText);\n    }\n  };\n};\n\nexport default useMask;","map":null,"metadata":{},"sourceType":"module"}