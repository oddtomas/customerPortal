{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport React, { useContext, useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { StickyHeaderContext } from '../container/use-sticky-header';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nexport default function InternalHeader(_a) {\n  var variant = _a.variant,\n      headingTagOverride = _a.headingTagOverride,\n      children = _a.children,\n      actions = _a.actions,\n      counter = _a.counter,\n      description = _a.description,\n      info = _a.info,\n      _b = _a.__internalRootRef,\n      __internalRootRef = _b === void 0 ? null : _b,\n      __disableActionsWrapping = _a.__disableActionsWrapping,\n      restProps = __rest(_a, [\"variant\", \"headingTagOverride\", \"children\", \"actions\", \"counter\", \"description\", \"info\", \"__internalRootRef\", \"__disableActionsWrapping\"]);\n\n  var HeadingTag = headingTagOverride !== null && headingTagOverride !== void 0 ? headingTagOverride : variant === 'awsui-h1-sticky' ? 'h1' : variant;\n  var isStuck = useContext(StickyHeaderContext).isStuck;\n  var baseProps = getBaseProps(restProps);\n  var ref = useRef(null);\n  var isRefresh = useVisualRefresh(ref);\n  var dynamicVariant = isStuck ? 'h2' : 'h1';\n  var variantOverride = variant === 'awsui-h1-sticky' ? isRefresh ? dynamicVariant : 'h2' : variant;\n  var mergedRef = useMergeRefs(ref, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className, styles[\"root-variant-\".concat(variantOverride)], isRefresh && styles[\"root-variant-\".concat(variantOverride, \"-refresh\")], !actions && [styles[\"root-no-actions\"]], description && [styles[\"root-has-description\"]], __disableActionsWrapping && [styles['root-no-wrap']]),\n    ref: mergedRef\n  }), React.createElement(\"div\", {\n    className: clsx(styles.main, styles[\"main-variant-\".concat(variantOverride)], isRefresh && styles[\"main-variant-\".concat(variantOverride, \"-refresh\")])\n  }, React.createElement(\"div\", {\n    className: clsx(styles.title, styles[\"title-variant-\".concat(variantOverride)], isRefresh && styles[\"title-variant-\".concat(variantOverride, \"-refresh\")])\n  }, React.createElement(HeadingTag, {\n    className: clsx(styles.heading, styles[\"heading-variant-\".concat(variantOverride)])\n  }, React.createElement(\"span\", {\n    className: styles['heading-text']\n  }, children), counter !== undefined && React.createElement(\"span\", {\n    className: styles.counter\n  }, \" \", counter)), info && React.createElement(\"span\", {\n    className: styles.info\n  }, info)), description && React.createElement(\"p\", {\n    className: clsx(styles.description, styles[\"description-variant-\".concat(variantOverride)], isRefresh && styles[\"description-variant-\".concat(variantOverride, \"-refresh\")])\n  }, description)), actions && React.createElement(\"div\", {\n    className: clsx(styles.actions, styles[\"actions-variant-\".concat(variantOverride)], isRefresh && styles[\"actions-variant-\".concat(variantOverride, \"-refresh\")])\n  }, actions));\n}","map":null,"metadata":{},"sourceType":"module"}