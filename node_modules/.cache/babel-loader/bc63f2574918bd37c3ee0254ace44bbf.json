{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { Label, LabelTag, Description, Tags, FilteringTags, OptionIcon } from './option-parts';\nimport { getBaseProps } from '../../base-component';\nimport { warnOnce } from '../../logging';\nimport { isDevelopment } from '../../is-development';\n\nfunction validateStringValue(value, propertyName) {\n  if (typeof value !== 'undefined' && typeof value !== 'string') {\n    warnOnce('DropdownOption', \"This component only supports string values, but \\\"option.\".concat(propertyName, \"\\\" has \").concat(typeof value, \" type. The component may work incorrectly.\"));\n  }\n}\n\nvar Option = function Option(_a) {\n  var _b, _c;\n\n  var option = _a.option,\n      highlightText = _a.highlightText,\n      _d = _a.triggerVariant,\n      triggerVariant = _d === void 0 ? false : _d,\n      _e = _a.isGroupOption,\n      isGroupOption = _e === void 0 ? false : _e,\n      restProps = __rest(_a, [\"option\", \"highlightText\", \"triggerVariant\", \"isGroupOption\"]);\n\n  if (!option) {\n    return null;\n  }\n\n  var disabled = option.disabled;\n  var baseProps = getBaseProps(restProps);\n\n  if (isDevelopment) {\n    validateStringValue(option.label, 'label');\n    validateStringValue(option.description, 'description');\n    validateStringValue(option.labelTag, 'labelTag');\n    (_b = option.tags) === null || _b === void 0 ? void 0 : _b.forEach(function (tag, index) {\n      validateStringValue(tag, \"tags[\".concat(index, \"]\"));\n    });\n    (_c = option.filteringTags) === null || _c === void 0 ? void 0 : _c.forEach(function (tag, index) {\n      validateStringValue(tag, \"filteringTags[\".concat(index, \"]\"));\n    });\n  }\n\n  var className = clsx(styles.option, disabled && styles.disabled, isGroupOption && styles.parent);\n  var icon = option.__customIcon || React.createElement(OptionIcon, {\n    name: option.iconName,\n    url: option.iconUrl,\n    svg: option.iconSvg,\n    alt: option.iconAlt,\n    size: option.description || option.tags ? 'big' : 'normal'\n  });\n  return React.createElement(\"div\", __assign({\n    title: option.label || option.value,\n    \"data-value\": option.value,\n    className: className,\n    \"aria-disabled\": disabled\n  }, baseProps), icon, React.createElement(\"div\", {\n    className: clsx(styles.content)\n  }, React.createElement(\"div\", {\n    className: clsx(styles['label-content'])\n  }, React.createElement(Label, {\n    label: option.label || option.value,\n    prefix: option.__labelPrefix,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  }), React.createElement(LabelTag, {\n    labelTag: option.labelTag,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  })), React.createElement(Description, {\n    description: option.description,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  }), React.createElement(Tags, {\n    tags: option.tags,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  }), React.createElement(FilteringTags, {\n    filteringTags: option.filteringTags,\n    highlightText: highlightText,\n    triggerVariant: triggerVariant\n  })));\n};\n\nexport default Option;","map":null,"metadata":{},"sourceType":"module"}