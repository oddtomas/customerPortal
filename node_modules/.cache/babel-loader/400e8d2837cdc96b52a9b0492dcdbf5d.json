{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef, memo, useState } from 'react';\nimport LiveRegion from '../live-region';\nimport InternalBox from '../../../box/internal';\nimport { KeyCode } from '../../keycode';\nimport SeriesMarker from '../chart-series-marker';\nimport styles from './styles.css.js';\nexport default memo(ChartLegend);\n\nfunction ChartLegend(_a) {\n  var series = _a.series,\n      onHighlightChange = _a.onHighlightChange,\n      highlightedSeries = _a.highlightedSeries,\n      legendTitle = _a.legendTitle,\n      ariaLabel = _a.ariaLabel,\n      plotContainerRef = _a.plotContainerRef;\n\n  var _b = useState(false),\n      isFocused = _b[0],\n      setIsFocused = _b[1];\n\n  var containerRef = useRef(null);\n\n  var highlightLeft = function highlightLeft() {\n    var currentIndex = findSeriesIndex(series, highlightedSeries) || 0;\n    var nextIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : series.length - 1;\n    onHighlightChange(series[nextIndex].datum);\n  };\n\n  var highlightRight = function highlightRight() {\n    var currentIndex = findSeriesIndex(series, highlightedSeries) || 0;\n    var nextIndex = currentIndex + 1 < series.length ? currentIndex + 1 : 0;\n    onHighlightChange(series[nextIndex].datum);\n  };\n\n  var handleKeyPress = function handleKeyPress(event) {\n    if (event.keyCode === KeyCode.right || event.keyCode === KeyCode.left) {\n      // Preventing default fixes an issue in Safari+VO when VO additionally interprets arrow keys as its commands.\n      event.preventDefault();\n\n      switch (event.keyCode) {\n        case KeyCode.left:\n          return highlightLeft();\n\n        case KeyCode.right:\n          return highlightRight();\n\n        default:\n          return;\n      }\n    }\n  };\n\n  var handleFocus = function handleFocus() {\n    setIsFocused(true);\n    onHighlightChange(highlightedSeries || series[0].datum);\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var _a;\n\n    setIsFocused(false); // We need to check if the next element to be focused inside the plot container or not\n    // so we don't clear the selected legend in case we are still focusing elements ( legend elements )\n    // inside the plot container\n\n    if (event.relatedTarget === null || !(event.relatedTarget instanceof Element) || containerRef.current && !containerRef.current.contains(event.relatedTarget) && !((_a = plotContainerRef === null || plotContainerRef === void 0 ? void 0 : plotContainerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n      onHighlightChange(null);\n    }\n  };\n\n  var handleMouseOver = function handleMouseOver(s) {\n    if (s !== highlightedSeries) {\n      onHighlightChange(s);\n    }\n  };\n\n  var handleMouseLeave = function handleMouseLeave() {\n    onHighlightChange(null);\n  };\n\n  var highlightedSeriesLabel = findSeriesLabel(series, highlightedSeries);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    tabIndex: 0,\n    className: styles.root,\n    ref: containerRef,\n    role: \"application\",\n    \"aria-label\": legendTitle || ariaLabel,\n    onKeyDown: handleKeyPress,\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  }, legendTitle && React.createElement(InternalBox, {\n    fontWeight: \"bold\",\n    className: styles.title\n  }, legendTitle), React.createElement(\"ul\", {\n    className: styles.list\n  }, series.map(function (s, index) {\n    var _a;\n\n    var someHighlighted = highlightedSeries !== null;\n    var isHighlighted = highlightedSeries === s.datum;\n    var isDimmed = someHighlighted && !isHighlighted;\n    return React.createElement(\"li\", {\n      key: index,\n      onMouseOver: handleMouseOver.bind(null, s.datum),\n      onMouseLeave: handleMouseLeave,\n      className: clsx(styles.marker, (_a = {}, _a[styles['marker--dimmed']] = isDimmed, _a[styles['marker--highlighted']] = isHighlighted, _a[styles['marker--focused']] = isHighlighted && isFocused, _a)),\n      \"aria-disabled\": isDimmed ? true : undefined\n    }, React.createElement(SeriesMarker, {\n      color: s.color,\n      type: s.type\n    }), \" \", s.label);\n  }))), React.createElement(LiveRegion, null, isFocused ? highlightedSeriesLabel : null));\n}\n\nfunction findSeriesIndex(series, targetSeries) {\n  for (var index = 0; index < series.length; index++) {\n    if (series[index].datum === targetSeries) {\n      return index;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findSeriesLabel(series, targetSeries) {\n  for (var _i = 0, series_1 = series; _i < series_1.length; _i++) {\n    var s = series_1[_i];\n\n    if (s.datum === targetSeries) {\n      return s.label;\n    }\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}