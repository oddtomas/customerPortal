{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect, memo, useRef } from 'react';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport ChartPlot from '../internal/components/chart-plot';\nimport AxisLabel from '../internal/components/cartesian-chart/axis-label';\nimport LabelsMeasure from '../internal/components/cartesian-chart/labels-measure';\nimport LeftLabels from '../internal/components/cartesian-chart/left-labels';\nimport BottomLabels from '../internal/components/cartesian-chart/bottom-labels';\nimport EmphasizedBaseline from '../internal/components/cartesian-chart/emphasized-baseline';\nimport AreaDataSeries from './elements/data-series';\nimport AreaChartPopover from './elements/chart-popover';\nimport AreaHighlightedPoint from './elements/highlighted-point';\nimport AreaVerticalMarker from './elements/vertical-marker';\nimport styles from './styles.css.js';\nimport useHighlightDetails from './elements/use-highlight-details';\nimport useContainerWidth from '../internal/utils/use-container-width';\nvar DEFAULT_CHART_WIDTH = 500;\nvar LEFT_LABELS_MARGIN = 16;\nvar BOTTOM_LABELS_OFFSET = 12;\nexport default memo(ChartContainer);\n\nfunction ChartContainer(_a) {\n  var model = _a.model,\n      autoWidth = _a.autoWidth,\n      xTitle = _a.xTitle,\n      yTitle = _a.yTitle,\n      detailPopoverSize = _a.detailPopoverSize,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescription = _a.ariaDescription,\n      _b = _a.i18nStrings,\n      _c = _b === void 0 ? {} : _b,\n      xTickFormatter = _c.xTickFormatter,\n      yTickFormatter = _c.yTickFormatter,\n      detailTotalFormatter = _c.detailTotalFormatter,\n      detailTotalLabel = _c.detailTotalLabel,\n      chartAriaRoleDescription = _c.chartAriaRoleDescription,\n      xAxisAriaRoleDescription = _c.xAxisAriaRoleDescription,\n      yAxisAriaRoleDescription = _c.yAxisAriaRoleDescription,\n      detailPopoverDismissAriaLabel = _c.detailPopoverDismissAriaLabel;\n\n  var _d = useState(0),\n      leftLabelsWidth = _d[0],\n      setLeftLabelsWidth = _d[1];\n\n  var _e = useState(0),\n      bottomLabelsHeight = _e[0],\n      setBottomLabelsHeight = _e[1];\n\n  var _f = useContainerWidth(DEFAULT_CHART_WIDTH),\n      containerWidth = _f[0],\n      containerWidthRef = _f[1]; // Calculate the width of the plot area and tell it to the parent.\n\n\n  var plotWidth = Math.max(0, containerWidth - leftLabelsWidth - LEFT_LABELS_MARGIN);\n  useEffect(function () {\n    autoWidth(plotWidth);\n  }, [autoWidth, plotWidth]);\n  var highlightDetails = useHighlightDetails({\n    model: model,\n    xTickFormatter: xTickFormatter,\n    yTickFormatter: yTickFormatter,\n    detailTotalFormatter: detailTotalFormatter,\n    detailTotalLabel: detailTotalLabel\n  });\n  var highlightedPointRef = useRef(null);\n  var mergedRef = useMergeRefs(containerWidthRef, model.refs.container);\n  return React.createElement(\"div\", {\n    className: styles['chart-container'],\n    ref: mergedRef\n  }, React.createElement(AxisLabel, {\n    axis: \"y\",\n    position: \"left\",\n    title: yTitle\n  }), React.createElement(\"div\", {\n    className: styles['chart-container__horizontal']\n  }, React.createElement(LabelsMeasure, {\n    scale: model.computed.yScale,\n    ticks: model.computed.yTicks,\n    tickFormatter: yTickFormatter,\n    autoWidth: setLeftLabelsWidth\n  }), React.createElement(\"div\", {\n    className: styles['chart-container__vertical']\n  }, React.createElement(ChartPlot, {\n    ref: model.refs.plot,\n    width: model.width,\n    height: model.height,\n    offsetBottom: bottomLabelsHeight,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescription: ariaDescription,\n    ariaRoleDescription: chartAriaRoleDescription,\n    activeElementKey: !(highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.isPopoverPinned) && (highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.activeLabel),\n    activeElementRef: highlightedPointRef,\n    isClickable: !(highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.isPopoverPinned),\n    onMouseMove: model.handlers.onSVGMouseMove,\n    onMouseOut: model.handlers.onSVGMouseOut,\n    onMouseDown: model.handlers.onSVGMouseDown,\n    onKeyDown: model.handlers.onSVGKeyDown,\n    onFocus: model.handlers.onSVGFocus,\n    onBlur: model.handlers.onSVGBlur\n  }, React.createElement(LeftLabels, {\n    width: model.width,\n    height: model.height,\n    scale: model.computed.yScale,\n    ticks: model.computed.yTicks,\n    tickFormatter: yTickFormatter,\n    title: yTitle,\n    ariaRoleDescription: yAxisAriaRoleDescription\n  }), React.createElement(AreaDataSeries, {\n    model: model\n  }), React.createElement(BottomLabels, {\n    width: model.width,\n    height: model.height,\n    scale: model.computed.xScale,\n    ticks: model.computed.xTicks,\n    tickFormatter: xTickFormatter,\n    title: xTitle,\n    ariaRoleDescription: xAxisAriaRoleDescription,\n    autoHeight: setBottomLabelsHeight,\n    offsetLeft: leftLabelsWidth + BOTTOM_LABELS_OFFSET,\n    offsetRight: BOTTOM_LABELS_OFFSET\n  }), React.createElement(EmphasizedBaseline, {\n    width: model.width,\n    height: model.height,\n    scale: model.computed.yScale\n  }), React.createElement(AreaVerticalMarker, {\n    model: model\n  }), React.createElement(AreaHighlightedPoint, {\n    ref: highlightedPointRef,\n    model: model,\n    ariaLabel: highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.activeLabel\n  })), React.createElement(AxisLabel, {\n    axis: \"x\",\n    position: \"bottom\",\n    title: xTitle\n  })), React.createElement(AreaChartPopover, {\n    model: model,\n    highlightDetails: highlightDetails,\n    dismissAriaLabel: detailPopoverDismissAriaLabel,\n    size: detailPopoverSize\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}