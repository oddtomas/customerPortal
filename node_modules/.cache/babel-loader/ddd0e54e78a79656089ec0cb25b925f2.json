{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport SelectionControl from './selection-control';\nimport { focusMarkers } from './use-selection';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getColumnKey } from './utils';\nimport { TableHeaderCell } from './header-cell';\nimport { Resizer } from './resizer';\nimport { useColumnWidths } from './use-column-widths';\nimport styles from './styles.css.js';\nimport headerCellStyles from './header-cell/styles.css.js';\nvar Thead = React.forwardRef(function (_a, outerRef) {\n  var containerWidth = _a.containerWidth,\n      selectionType = _a.selectionType,\n      selectAllProps = _a.selectAllProps,\n      columnDefinitions = _a.columnDefinitions,\n      sortingColumn = _a.sortingColumn,\n      sortingDisabled = _a.sortingDisabled,\n      sortingDescending = _a.sortingDescending,\n      resizableColumns = _a.resizableColumns,\n      variant = _a.variant,\n      wrapLines = _a.wrapLines,\n      onFocusMove = _a.onFocusMove,\n      onCellFocus = _a.onCellFocus,\n      onCellBlur = _a.onCellBlur,\n      onSortingChange = _a.onSortingChange,\n      onResizeFinish = _a.onResizeFinish,\n      _b = _a.showFocusRing,\n      showFocusRing = _b === void 0 ? null : _b,\n      _c = _a.sticky,\n      sticky = _c === void 0 ? false : _c,\n      _d = _a.hidden,\n      hidden = _d === void 0 ? false : _d,\n      _e = _a.stuck,\n      stuck = _e === void 0 ? false : _e;\n  var headerCellClass = clsx(headerCellStyles['header-cell'], headerCellStyles[\"header-cell-variant-\".concat(variant)], sticky && headerCellStyles['header-cell-sticky'], stuck && headerCellStyles['header-cell-stuck']);\n  var selectionCellClass = clsx(styles['selection-control'], styles['selection-control-header']);\n\n  var _f = useColumnWidths(),\n      columnWidths = _f.columnWidths,\n      totalWidth = _f.totalWidth,\n      updateColumn = _f.updateColumn;\n\n  return React.createElement(\"thead\", {\n    className: clsx(!hidden && styles['thead-active'])\n  }, React.createElement(\"tr\", __assign({}, focusMarkers.all, {\n    ref: outerRef\n  }), selectionType === 'multi' && React.createElement(\"th\", {\n    className: clsx(headerCellClass, selectionCellClass),\n    scope: \"col\"\n  }, React.createElement(SelectionControl, __assign({\n    onFocusDown: function onFocusDown(event) {\n      return onFocusMove(event.target, -1, +1);\n    }\n  }, selectAllProps, hidden ? {\n    tabIndex: -1\n  } : {}))), selectionType === 'single' && React.createElement(\"th\", {\n    className: clsx(headerCellClass, selectionCellClass),\n    scope: \"col\"\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": true\n  }, \"\\xA0\")), columnDefinitions.map(function (column, colIndex) {\n    var widthOverride;\n\n    if (resizableColumns) {\n      if (columnWidths) {\n        // use stateful value if available\n        widthOverride = columnWidths[getColumnKey(column, colIndex)];\n      }\n\n      if (colIndex === columnDefinitions.length - 1 && containerWidth && containerWidth > totalWidth) {\n        // let the last column grow and fill the container width\n        widthOverride = 'auto';\n      }\n    }\n\n    return React.createElement(TableHeaderCell, {\n      key: getColumnKey(column, colIndex),\n      className: headerCellClass,\n      style: {\n        width: widthOverride || column.width,\n        minWidth: sticky ? undefined : column.minWidth,\n        maxWidth: resizableColumns || sticky ? undefined : column.maxWidth\n      },\n      tabIndex: sticky ? -1 : 0,\n      showFocusRing: colIndex === showFocusRing,\n      column: column,\n      activeSortingColumn: sortingColumn,\n      sortingDescending: sortingDescending,\n      sortingDisabled: sortingDisabled,\n      wrapLines: wrapLines,\n      resizer: resizableColumns && React.createElement(Resizer, {\n        onDragMove: function onDragMove(newWidth) {\n          return updateColumn(colIndex, newWidth);\n        },\n        onFinish: function onFinish() {\n          return onResizeFinish(columnWidths);\n        }\n      }),\n      onClick: function onClick(detail) {\n        return fireNonCancelableEvent(onSortingChange, detail);\n      },\n      onFocus: function onFocus() {\n        return onCellFocus === null || onCellFocus === void 0 ? void 0 : onCellFocus(colIndex);\n      },\n      onBlur: onCellBlur\n    });\n  })));\n});\nexport default Thead;","map":null,"metadata":{},"sourceType":"module"}