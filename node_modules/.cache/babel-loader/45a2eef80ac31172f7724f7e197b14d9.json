{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nexport var ExpandableSectionHeader = function ExpandableSectionHeader(_a) {\n  var id = _a.id,\n      className = _a.className,\n      variant = _a.variant,\n      children = _a.children,\n      expanded = _a.expanded,\n      ariaControls = _a.ariaControls,\n      ariaLabelledBy = _a.ariaLabelledBy,\n      onKeyUp = _a.onKeyUp,\n      onKeyDown = _a.onKeyDown,\n      onClick = _a.onClick;\n  var focusVisible = useFocusVisible();\n  var icon = React.createElement(InternalIcon, {\n    size: variant === 'container' ? 'medium' : 'normal',\n    className: clsx(styles.icon, expanded && styles.expanded),\n    name: \"caret-down-filled\"\n  });\n  var ariaAttributes = {\n    'aria-controls': ariaControls,\n    'aria-expanded': expanded\n  };\n  var triggerClassName = clsx(styles.trigger, styles[\"trigger-\".concat(variant)], expanded && styles['trigger-expanded']);\n\n  if (variant === 'navigation') {\n    return React.createElement(\"div\", {\n      id: id,\n      className: clsx(className, triggerClassName),\n      onClick: onClick\n    }, React.createElement(\"button\", __assign({\n      className: styles['icon-container'],\n      type: \"button\",\n      \"aria-labelledby\": ariaLabelledBy\n    }, focusVisible, ariaAttributes), icon), children);\n  }\n\n  return React.createElement(\"div\", __assign({\n    id: id,\n    role: \"button\",\n    className: clsx(className, triggerClassName, styles.focusable, expanded && styles.expanded),\n    tabIndex: 0,\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown,\n    onClick: onClick\n  }, focusVisible, ariaAttributes), React.createElement(\"div\", {\n    className: styles['icon-container']\n  }, icon), children);\n};","map":null,"metadata":{},"sourceType":"module"}