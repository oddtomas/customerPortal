{"ast":null,"code":"import { padLeftZeros } from '../internal/components/masked-input/utils/strings';\nimport { addMinutes } from 'date-fns';\nimport { formatTime, formatDate } from '../date-picker/calendar/utils/date';\nimport { warnOnce } from '../internal/logging';\n/**\n * Returns the time offset of the browser.\n *\n * I.e. determines the `x` in `current offset = UTC + x`\n */\n\nexport function getBrowserTimezoneOffset() {\n  return 0 - new Date().getTimezoneOffset();\n}\n/**\n * Appends a time zone offset to an offset-less date string.\n */\n\nexport function setTimeOffset(value, timeOffsetInMinutes) {\n  if (!((value === null || value === void 0 ? void 0 : value.type) === 'absolute')) {\n    return value;\n  }\n\n  var offsetSuffix = formatOffset(timeOffsetInMinutes);\n  var startDate = value.startDate,\n      endDate = value.endDate;\n  return {\n    type: 'absolute',\n    startDate: startDate + offsetSuffix,\n    endDate: endDate + offsetSuffix\n  };\n}\nexport function formatOffset(offsetInMinutes) {\n  var hoursOffset = padLeftZeros(Math.floor(Math.abs(offsetInMinutes) / 60).toFixed(0), 2);\n  var minuteOffset = padLeftZeros(Math.abs(offsetInMinutes % 60).toFixed(0), 2);\n  var sign = offsetInMinutes < 0 ? '-' : '+';\n  var offsetSuffix = \"\".concat(sign).concat(hoursOffset, \":\").concat(minuteOffset);\n  return offsetSuffix;\n}\n/**\n * Re-formats an absolute date range so that it is expressed using the\n * target time offset. The returned value still represents the same range\n * in time, but contains no visible offset.\n */\n\nexport function shiftTimeOffset(value, timeOffsetInMinutes) {\n  if (!value || value.type !== 'absolute') {\n    return value;\n  }\n  /*\n    This regex matches an ISO date-time with\n    - optional seconds;\n    - optional milliseconds;\n    - optional time offset or 'Z'.\n  */\n\n\n  var dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2})?(\\.\\d{1,3})?(((\\+|-)\\d{2}(:\\d{2})?)|Z)?$/;\n\n  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {\n    warnOnce('DateRangePicker', 'You have provided a misformatted start or end date. The component will fall back to an empty value. ' + 'Dates have to be ISO8601-formatted with an optional time zone offset.');\n    return null;\n  }\n\n  return {\n    type: 'absolute',\n    startDate: doShiftTimeOffset(value.startDate, timeOffsetInMinutes),\n    endDate: doShiftTimeOffset(value.endDate, timeOffsetInMinutes)\n  };\n}\n/**\n * Re-formats an ISO8601 date string so that it is expressed using the\n * target time offset. The returned date string still represents the\n * same instant in time, but contains no visible offset.\n *\n * Example:\n * ```\n * doShiftTimeOffset(\"2020-01-01T09:00:00+03:00\", 2 * 60)\n * = \"2020-01-01T08:00:00\"\n * ```\n */\n\nfunction doShiftTimeOffset(value, targetOffsetInMinutes) {\n  var _a = splitOffset(value),\n      valueWithoutOffset = _a[0],\n      offsetInMinutes = _a[1];\n\n  var differenceBetweenValueAndTarget = targetOffsetInMinutes - offsetInMinutes;\n  var date = new Date(valueWithoutOffset);\n  var adjustedDate = addMinutes(date, differenceBetweenValueAndTarget);\n  var formattedDate = formatDate(adjustedDate);\n  var formattedTime = formatTime(adjustedDate);\n  return \"\".concat(formattedDate, \"T\").concat(formattedTime);\n}\n/**\n * Splits an ISO8601 date string into its timezone-independent part\n * and its time offset in minutes.\n */\n\n\nfunction splitOffset(value) {\n  var _a = value.split('T'),\n      datePart = _a[0],\n      timePart = _a[1];\n\n  var _b = timePart.split(/(-|\\+)/),\n      time = _b[0],\n      signCharacter = _b[1],\n      offsetPart = _b[2];\n\n  if (signCharacter && offsetPart) {\n    var _c = offsetPart.split(':'),\n        offsetHours = _c[0],\n        offsetMinutes = _c[1];\n\n    var offset = Number(offsetHours) * 60 + Number(offsetMinutes);\n    var sign = signCharacter === '-' ? -1 : 1;\n    return [\"\".concat(datePart, \"T\").concat(time), offset * sign];\n  }\n\n  var utcTimezoneIndicator = value.indexOf('Z');\n\n  if (utcTimezoneIndicator !== -1) {\n    return [value.substring(0, utcTimezoneIndicator), 0];\n  }\n\n  return [value, getBrowserTimezoneOffset()];\n}","map":null,"metadata":{},"sourceType":"module"}