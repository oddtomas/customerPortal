{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef, useState } from 'react';\nimport Arrow from '../popover/arrow';\nimport PopoverContainer from '../popover/container';\nimport PopoverBody from '../popover/body';\nimport Portal from '../internal/components/portal';\nimport { usePortalModeClasses } from '../internal/hooks/use-portal-mode-classes';\nimport { useReducedMotion } from '../internal/hooks/use-visual-mode';\nvar DEFAULT_OPEN_TIMEOUT_IN_MS = 120;\nexport default function Tooltip(_a) {\n  var children = _a.children,\n      content = _a.content,\n      _b = _a.position,\n      position = _b === void 0 ? 'right' : _b;\n  var ref = useRef(null);\n  var isReducedMotion = useReducedMotion(ref);\n\n  var _c = useTooltipOpen(isReducedMotion ? 0 : DEFAULT_OPEN_TIMEOUT_IN_MS),\n      open = _c.open,\n      triggerProps = _c.triggerProps;\n\n  var portalClasses = usePortalModeClasses(ref);\n  return React.createElement(\"span\", __assign({\n    ref: ref\n  }, triggerProps), children, open && React.createElement(Portal, null, React.createElement(\"span\", {\n    className: portalClasses\n  }, React.createElement(PopoverContainer, {\n    position: position,\n    trackRef: ref,\n    arrow: function arrow(position) {\n      return React.createElement(Arrow, {\n        position: position\n      });\n    },\n    renderWithPortal: true,\n    zIndex: 7000\n  }, React.createElement(PopoverBody, {\n    size: \"small\",\n    fixedWidth: false,\n    dismissButton: false,\n    dismissAriaLabel: undefined,\n    header: null,\n    onDismiss: function onDismiss() {},\n    overflowVisible: \"both\"\n  }, React.createElement(\"span\", {\n    \"data-testid\": \"button-dropdown-disabled-reason\",\n    role: \"tooltip\"\n  }, content))))));\n}\n\nfunction useTooltipOpen(timeout) {\n  var handle = useRef();\n\n  var _a = useState(false),\n      isOpen = _a[0],\n      setIsOpen = _a[1];\n\n  var close = function close() {\n    clearTimeout(handle.current);\n    setIsOpen(false);\n  };\n\n  var open = function open() {\n    return setIsOpen(true);\n  };\n\n  var openDelayed = function openDelayed() {\n    handle.current = setTimeout(open, timeout);\n  };\n\n  var onKeyDown = function onKeyDown(e) {\n    if (isOpen && isEscape(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n      close();\n    }\n  };\n\n  var onFocus = openDelayed;\n  var onBlur = close;\n  return {\n    open: isOpen,\n    triggerProps: {\n      onBlur: onBlur,\n      onFocus: onFocus,\n      onKeyDown: onKeyDown\n    }\n  };\n}\n\nvar isEscape = function isEscape(key) {\n  return key === 'Escape' || key === 'Esc';\n};","map":null,"metadata":{},"sourceType":"module"}