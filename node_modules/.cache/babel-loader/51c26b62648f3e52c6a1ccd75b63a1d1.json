{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport { line } from 'd3-shape';\nexport default function LineSeries(_a) {\n  var axis = _a.axis,\n      series = _a.series,\n      color = _a.color,\n      xScale = _a.xScale,\n      yScale = _a.yScale,\n      chartAreaClipPath = _a.chartAreaClipPath;\n  var commonProps = {\n    'aria-hidden': true,\n    stroke: color,\n    clipPath: \"url(#\".concat(chartAreaClipPath, \")\")\n  }; // Ignore axis for line series as we only support horizontally-oriented lines.\n\n  if (series.type === 'line') {\n    var lineGenerator = line().x(function (d) {\n      var x = xScale.d3Scale(d.x) || 0;\n\n      if (xScale.isCategorical()) {\n        var offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;\n        x += offset;\n      }\n\n      return x;\n    }).y(function (d) {\n      return yScale.d3Scale(d.y) || 0;\n    }); // Filter out any data that is not part of the xScale\n\n    var visibleData = series.data.filter(function (_a) {\n      var x = _a.x;\n      return xScale.d3Scale(x) !== undefined;\n    });\n    return React.createElement(\"path\", __assign({}, commonProps, {\n      d: lineGenerator(visibleData) || ''\n    }));\n  } else {\n    var range = xScale.d3Scale.range();\n    var y = yScale.d3Scale(series.y);\n    var coordinates = axis === 'x' ? {\n      x1: range[0],\n      x2: range[1],\n      y1: y,\n      y2: y\n    } : {\n      x1: y,\n      x2: y,\n      y1: range[0],\n      y2: range[1]\n    };\n    return React.createElement(\"line\", __assign({}, commonProps, coordinates));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}