{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect } from 'react';\nimport { AppLayoutButton, togglesConfig } from '../toggles';\nimport styles from './styles.css.js';\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nvar MobileToggle = React.forwardRef(function (_a, ref) {\n  var className = _a.className,\n      ariaLabels = _a.ariaLabels,\n      type = _a.type,\n      disabled = _a.disabled,\n      onClick = _a.onClick;\n  var _b = togglesConfig[type],\n      TagName = _b.TagName,\n      iconName = _b.iconName,\n      getLabels = _b.getLabels;\n\n  var _c = getLabels(ariaLabels),\n      mainLabel = _c.mainLabel,\n      openLabel = _c.openLabel;\n\n  return React.createElement(TagName, {\n    className: clsx(styles['mobile-toggle']),\n    \"aria-hidden\": disabled,\n    \"aria-label\": mainLabel,\n    onClick: onClick\n  }, React.createElement(AppLayoutButton, {\n    ref: ref,\n    className: className,\n    iconName: iconName,\n    onClick: onClick,\n    ariaLabel: openLabel,\n    disabled: disabled,\n    ariaExpanded: disabled\n  }));\n});\nexport function MobileToolbar(_a) {\n  var _b = _a.ariaLabels,\n      ariaLabels = _b === void 0 ? {} : _b,\n      toggleRefs = _a.toggleRefs,\n      topOffset = _a.topOffset,\n      navigationHide = _a.navigationHide,\n      toolsHide = _a.toolsHide,\n      _c = _a.anyPanelOpen,\n      anyPanelOpen = _c === void 0 ? false : _c,\n      unfocusable = _a.unfocusable,\n      children = _a.children,\n      onNavigationOpen = _a.onNavigationOpen,\n      onToolsOpen = _a.onToolsOpen;\n  useEffect(function () {\n    if (anyPanelOpen) {\n      document.body.classList.add(styles['block-body-scroll']);\n      return function () {\n        document.body.classList.remove(styles['block-body-scroll']);\n      };\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n  }, [anyPanelOpen]);\n  return React.createElement(\"div\", {\n    className: clsx(styles['mobile-bar'], unfocusable && sharedStyles.unfocusable),\n    style: {\n      top: topOffset\n    }\n  }, !navigationHide && React.createElement(MobileToggle, {\n    ref: toggleRefs.navigation,\n    type: \"navigation\",\n    className: clsx(sharedStyles['navigation-toggle'], testutilStyles['navigation-toggle']),\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onNavigationOpen\n  }), React.createElement(\"div\", {\n    className: styles['mobile-bar-breadcrumbs']\n  }, children && React.createElement(\"div\", {\n    className: clsx(sharedStyles.breadcrumbs, testutilStyles.breadcrumbs)\n  }, children)), !toolsHide && React.createElement(MobileToggle, {\n    ref: toggleRefs.tools,\n    type: \"tools\",\n    className: clsx(sharedStyles['tools-toggle'], testutilStyles['tools-toggle']),\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onToolsOpen\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}