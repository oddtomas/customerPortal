{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport InternalIcon from '../../icon/internal';\nimport ItemsList from '../items-list';\nimport Dropdown from '../../internal/components/dropdown';\nimport useHiddenDescription from '../utils/use-hidden-description';\nimport Tooltip from '../tooltip.js';\nimport { getMenuItemProps } from '../utils/menu-item';\n\nvar ExpandableCategoryElement = function ExpandableCategoryElement(_a) {\n  var _b, _c;\n\n  var item = _a.item,\n      onItemActivate = _a.onItemActivate,\n      onGroupToggle = _a.onGroupToggle,\n      targetItem = _a.targetItem,\n      isHighlighted = _a.isHighlighted,\n      isExpanded = _a.isExpanded,\n      highlightItem = _a.highlightItem,\n      disabled = _a.disabled,\n      expandToViewport = _a.expandToViewport,\n      variant = _a.variant;\n  var highlighted = isHighlighted(item);\n  var expanded = isExpanded(item);\n  var triggerRef = React.useRef(null);\n  var ref = useRef(null);\n  useEffect(function () {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n\n  var onClick = function onClick(event) {\n    var _a;\n\n    if (!disabled) {\n      event.preventDefault();\n      onGroupToggle(item, event);\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  };\n\n  var onHover = function onHover(event) {\n    event.preventDefault();\n    highlightItem(item);\n  };\n\n  var isDisabledWithReason = !!item.disabledReason && item.disabled;\n\n  var _d = useHiddenDescription(item.disabledReason),\n      targetProps = _d.targetProps,\n      descriptionEl = _d.descriptionEl;\n\n  var trigger = item.text && React.createElement(\"span\", __assign({\n    className: clsx(styles.header, styles['expandable-header'], styles[\"variant-\".concat(variant)], (_b = {}, _b[styles.disabled] = disabled, _b[styles.highlighted] = highlighted, _b)),\n    // We are using the roving tabindex technique to manage the focus state of the dropdown.\n    // The current element will always have tabindex=0 which means that it can be tabbed to,\n    // while all other items have tabindex=-1 so we can focus them when necessary.\n    tabIndex: highlighted ? 0 : -1,\n    ref: triggerRef\n  }, getMenuItemProps({\n    parent: true,\n    expanded: expanded,\n    disabled: disabled\n  }), isDisabledWithReason ? targetProps : {}), item.text, React.createElement(\"span\", {\n    className: clsx(styles['expand-icon'], styles['expand-icon-right'])\n  }, React.createElement(InternalIcon, {\n    name: \"caret-down-filled\"\n  })));\n  var content; // If the category element is disabled, we do not render a dropdown.\n  // Screenreaders are confused by additional sections\n\n  if (isDisabledWithReason) {\n    content = React.createElement(Tooltip, {\n      content: item.disabledReason\n    }, trigger, descriptionEl);\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = React.createElement(Dropdown, {\n      open: expanded,\n      stretchWidth: false,\n      interior: true,\n      expandToViewport: expandToViewport,\n      trigger: trigger\n    }, item.items && expanded && React.createElement(\"ul\", {\n      role: \"menu\",\n      \"aria-label\": item.text,\n      className: clsx(styles['items-list-container'])\n    }, React.createElement(ItemsList, {\n      items: item.items,\n      onItemActivate: onItemActivate,\n      onGroupToggle: onGroupToggle,\n      targetItem: targetItem,\n      isHighlighted: isHighlighted,\n      isExpanded: isExpanded,\n      highlightItem: highlightItem,\n      variant: variant\n    })));\n  }\n\n  return React.createElement(\"li\", {\n    className: clsx(styles.category, styles[\"variant-\".concat(variant)], styles.expandable, (_c = {}, _c[styles.expanded] = expanded, _c[styles.disabled] = disabled, _c[styles.highlighted] = highlighted, _c)),\n    role: \"presentation\",\n    \"data-testid\": item.id,\n    ref: ref,\n    onClick: onClick,\n    onMouseEnter: onHover,\n    onTouchStart: onHover\n  }, content);\n};\n\nexport default ExpandableCategoryElement;","map":null,"metadata":{},"sourceType":"module"}