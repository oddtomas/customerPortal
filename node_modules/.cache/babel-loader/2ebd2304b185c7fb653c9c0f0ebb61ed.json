{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useRef, useState, useMemo } from 'react';\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalAutosuggest from '../autosuggest/internal';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { KeyCode } from '../internal/keycode';\nimport SelectToggle from '../token-group/toggle';\nimport { generateUniqueId } from '../internal/hooks/use-unique-id/index';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { Token } from './token';\nimport { getQueryActions, parseText, getAutosuggestOptions } from './controller';\nimport { useLoadItems } from './use-load-items';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nvar PropertyFilter = React.forwardRef(function (_a, ref) {\n  var disabled = _a.disabled,\n      i18nStrings = _a.i18nStrings,\n      countText = _a.countText,\n      query = _a.query,\n      hideOperations = _a.hideOperations,\n      onChange = _a.onChange,\n      filteringProperties = _a.filteringProperties,\n      filteringOptions = _a.filteringOptions,\n      customGroupsText = _a.customGroupsText,\n      _b = _a.disableFreeTextFiltering,\n      disableFreeTextFiltering = _b === void 0 ? false : _b,\n      onLoadItems = _a.onLoadItems,\n      virtualScroll = _a.virtualScroll,\n      customControl = _a.customControl,\n      filteringEmpty = _a.filteringEmpty,\n      filteringLoadingText = _a.filteringLoadingText,\n      filteringFinishedText = _a.filteringFinishedText,\n      filteringErrorText = _a.filteringErrorText,\n      filteringRecoveryText = _a.filteringRecoveryText,\n      filteringStatusType = _a.filteringStatusType,\n      asyncProperties = _a.asyncProperties,\n      tokenLimit = _a.tokenLimit,\n      expandToViewport = _a.expandToViewport,\n      rest = __rest(_a, [\"disabled\", \"i18nStrings\", \"countText\", \"query\", \"hideOperations\", \"onChange\", \"filteringProperties\", \"filteringOptions\", \"customGroupsText\", \"disableFreeTextFiltering\", \"onLoadItems\", \"virtualScroll\", \"customControl\", \"filteringEmpty\", \"filteringLoadingText\", \"filteringFinishedText\", \"filteringErrorText\", \"filteringRecoveryText\", \"filteringStatusType\", \"asyncProperties\", \"tokenLimit\", \"expandToViewport\"]);\n\n  var __internalRootRef = useBaseComponent('PropertyFilter').__internalRootRef;\n\n  var inputRef = useRef(null);\n  var preventFocus = useRef(false);\n  var baseProps = getBaseProps(rest);\n  useForwardFocus(ref, inputRef);\n  var tokens = query.tokens,\n      operation = query.operation;\n  var showResults = (tokens === null || tokens === void 0 ? void 0 : tokens.length) && !disabled;\n\n  var _c = getQueryActions(query, onChange, inputRef, preventFocus),\n      addToken = _c.addToken,\n      _removeToken = _c.removeToken,\n      _setToken = _c.setToken,\n      setOperation = _c.setOperation,\n      removeAllTokens = _c.removeAllTokens;\n\n  var _d = useState(''),\n      filteringText = _d[0],\n      setFilteringText = _d[1];\n\n  var parsedText = parseText(filteringText, filteringProperties, disableFreeTextFiltering);\n  var autosuggestOptions = getAutosuggestOptions(parsedText, filteringOptions, filteringProperties, customGroupsText, i18nStrings);\n\n  var createToken = function createToken(currentText) {\n    var parsedText = parseText(currentText, filteringProperties, disableFreeTextFiltering);\n    var newToken;\n\n    switch (parsedText.step) {\n      case 'property':\n        {\n          newToken = {\n            propertyKey: parsedText.property.key,\n            operator: parsedText.operator,\n            value: parsedText.value\n          };\n          break;\n        }\n\n      case 'free-text':\n        {\n          newToken = {\n            operator: parsedText.operator || ':',\n            value: parsedText.value\n          };\n          break;\n        }\n\n      case 'operator':\n        {\n          newToken = {\n            operator: ':',\n            value: currentText\n          };\n          break;\n        }\n    }\n\n    if (disableFreeTextFiltering && !('propertyKey' in newToken)) {\n      return;\n    }\n\n    addToken(newToken);\n    setFilteringText('');\n  };\n\n  var ignoreKeyDown = useRef(false);\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (filteringText && !ignoreKeyDown.current && event.detail.keyCode === KeyCode.enter) {\n      createToken(filteringText);\n    }\n  };\n\n  var getLoadMoreDetail = function getLoadMoreDetail(parsedText, filteringText) {\n    var loadMoreDetail = {\n      filteringProperty: undefined,\n      filteringText: filteringText,\n      filteringOperator: undefined\n    };\n\n    if (parsedText.step === 'property') {\n      loadMoreDetail.filteringProperty = parsedText.property;\n      loadMoreDetail.filteringText = parsedText.value;\n      loadMoreDetail.filteringOperator = parsedText.operator;\n    }\n\n    return loadMoreDetail;\n  };\n\n  var loadMoreDetail = getLoadMoreDetail(parsedText, filteringText);\n  var inputLoadItemsHandlers = useLoadItems(onLoadItems, loadMoreDetail.filteringText, loadMoreDetail.filteringProperty, loadMoreDetail.filteringText, loadMoreDetail.filteringOperator);\n  var asyncProps = {\n    empty: filteringEmpty,\n    loadingText: filteringLoadingText,\n    finishedText: filteringFinishedText,\n    errorText: filteringErrorText,\n    recoveryText: filteringRecoveryText,\n    statusType: filteringStatusType\n  };\n  var asyncAutosuggestProps = !!filteringText.length || asyncProperties ? __assign(__assign({}, inputLoadItemsHandlers), asyncProps) : {};\n\n  var handleSelected = function handleSelected(event) {\n    // The ignoreKeyDown flag makes sure `createToken` routine runs only once. Autosuggest's `onKeyDown` fires,\n    // when an item is selected from the list using \"enter\" key.\n    ignoreKeyDown.current = true;\n    setTimeout(function () {\n      ignoreKeyDown.current = false;\n    }, 0);\n    var option = event.detail;\n    var value = option.value || '';\n\n    if ('tokenValue' in option) {\n      createToken(option.tokenValue);\n      return;\n    } // create a token from the 'use' option\n\n\n    if (!('keepOpenOnSelect' in option)) {\n      createToken(value);\n      return;\n    } // stop dropdown from closing\n\n\n    event.preventDefault();\n    var loadMoreDetail = getLoadMoreDetail(parseText(value, filteringProperties, disableFreeTextFiltering), value);\n    fireNonCancelableEvent(onLoadItems, __assign(__assign({}, loadMoreDetail), {\n      firstPage: true,\n      samePage: false\n    }));\n  };\n\n  var _e = useState(false),\n      tokensExpanded = _e[0],\n      setTokensExpanded = _e[1];\n\n  var toggleExpandedTokens = function toggleExpandedTokens() {\n    return setTokensExpanded(!tokensExpanded);\n  };\n\n  var hasHiddenOptions = tokenLimit !== undefined && tokens.length > tokenLimit;\n  var slicedTokens = hasHiddenOptions && !tokensExpanded ? tokens.slice(0, tokenLimit) : tokens;\n  var controlId = useMemo(function () {\n    return generateUniqueId();\n  }, []);\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), React.createElement(\"div\", {\n    className: styles['search-field']\n  }, customControl && React.createElement(\"div\", {\n    className: styles['custom-control']\n  }, customControl), React.createElement(InternalAutosuggest, __assign({\n    virtualScroll: virtualScroll,\n    enteredTextLabel: i18nStrings.enteredTextLabel,\n    ref: inputRef,\n    className: styles.input,\n    ariaLabel: i18nStrings.filteringAriaLabel,\n    placeholder: i18nStrings.filteringPlaceholder,\n    value: filteringText,\n    disabled: disabled,\n    onKeyDown: handleKeyDown\n  }, autosuggestOptions, {\n    onChange: function onChange(event) {\n      return setFilteringText(event.detail.value);\n    },\n    empty: filteringEmpty\n  }, asyncAutosuggestProps, {\n    expandToViewport: expandToViewport,\n    __disableShowAll: true,\n    __dropdownWidth: 300,\n    __onOptionClick: handleSelected,\n    __onOpen: function __onOpen(e) {\n      if (preventFocus.current) {\n        e.preventDefault();\n        preventFocus.current = false;\n      }\n    },\n    __hideEnteredTextOption: disableFreeTextFiltering && parsedText.step !== 'property'\n  })), React.createElement(\"span\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    className: clsx(styles.results, showResults && styles['results-visible'])\n  }, showResults ? countText : '')), tokens && tokens.length > 0 && React.createElement(\"div\", {\n    className: styles.tokens\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"xs\",\n    direction: \"horizontal\",\n    id: controlId\n  }, slicedTokens.map(function (token, index) {\n    return React.createElement(Token, {\n      token: token,\n      first: index === 0,\n      operation: operation,\n      key: index,\n      removeToken: function removeToken() {\n        return _removeToken(index);\n      },\n      setToken: function setToken(newToken) {\n        return _setToken(index, newToken);\n      },\n      setOperation: setOperation,\n      filteringOptions: filteringOptions,\n      filteringProperties: filteringProperties,\n      asyncProps: asyncProps,\n      onLoadItems: onLoadItems,\n      i18nStrings: i18nStrings,\n      asyncProperties: asyncProperties,\n      hideOperations: hideOperations,\n      customGroupsText: customGroupsText,\n      disableFreeTextFiltering: disableFreeTextFiltering,\n      disabled: disabled,\n      expandToViewport: expandToViewport\n    });\n  }), hasHiddenOptions && React.createElement(\"div\", {\n    className: styles['toggle-collapsed']\n  }, React.createElement(SelectToggle, {\n    controlId: controlId,\n    allHidden: tokenLimit === 0,\n    expanded: tokensExpanded,\n    numberOfHiddenOptions: tokens.length - slicedTokens.length,\n    i18nStrings: {\n      limitShowFewer: i18nStrings.tokenLimitShowFewer,\n      limitShowMore: i18nStrings.tokenLimitShowMore\n    },\n    onClick: toggleExpandedTokens\n  })), React.createElement(\"div\", {\n    className: styles.separator\n  }), React.createElement(InternalButton, {\n    onClick: removeAllTokens,\n    className: styles['remove-all'],\n    disabled: disabled\n  }, i18nStrings.clearFiltersText))));\n});\napplyDisplayName(PropertyFilter, 'PropertyFilter');\nexport default PropertyFilter;","map":null,"metadata":{},"sourceType":"module"}