{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect, useRef } from 'react';\nexport default memo(ResponsiveText);\n\nfunction ResponsiveText(_a) {\n  var x = _a.x,\n      y = _a.y,\n      rightSide = _a.rightSide,\n      className = _a.className,\n      children = _a.children,\n      containerBoundaries = _a.containerBoundaries;\n  var actualRef = useRef(null);\n  var virtualRef = useRef(null); // Determine the visible width of the text and if necessary truncate it until it fits.\n\n  useEffect(function () {\n    // The debouncing is necessary for visual smoothness.\n    var timeoutId = setTimeout(function () {\n      var groupRect = virtualRef.current.getBoundingClientRect();\n      var visibleWidth = containerBoundaries ? getVisibleWidth(groupRect, containerBoundaries) : 0;\n      renderTextContent(actualRef.current, children, visibleWidth);\n    }, 25);\n    return function () {\n      return clearTimeout(timeoutId);\n    };\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"text\", {\n    ref: virtualRef,\n    x: x,\n    y: y,\n    style: {\n      textAnchor: rightSide ? 'start' : 'end',\n      visibility: 'hidden'\n    },\n    \"aria-hidden\": \"true\",\n    className: className\n  }, children), React.createElement(\"text\", {\n    ref: actualRef,\n    x: x,\n    y: y,\n    style: {\n      textAnchor: rightSide ? 'start' : 'end'\n    },\n    className: className\n  }, children));\n}\n\nfunction getVisibleWidth(element, container) {\n  if (element.left < container.left) {\n    return element.right - container.left;\n  } else if (element.right > container.right) {\n    return container.right - element.left;\n  } else {\n    return container.right - container.left;\n  }\n}\n\nfunction renderTextContent(textNode, text, visibleWidth) {\n  var visibleLength = text.length;\n\n  while (visibleLength >= 0) {\n    textNode.textContent = truncateText(text, visibleLength);\n\n    if (!textNode.getComputedTextLength || textNode.getComputedTextLength() <= visibleWidth) {\n      return;\n    } else {\n      visibleLength--;\n    }\n  }\n}\n\nfunction truncateText(text, maxLength) {\n  if (text.length === maxLength) {\n    return text;\n  }\n\n  return text.slice(0, maxLength) + 'â€¦';\n}","map":null,"metadata":{},"sourceType":"module"}