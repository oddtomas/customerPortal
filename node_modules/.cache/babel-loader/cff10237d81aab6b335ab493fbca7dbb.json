{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useRef } from 'react';\nimport clsx from 'clsx';\nimport { TICK_LENGTH, TICK_MARGIN } from './constants';\nimport styles from './styles.css.js';\nimport { formatTicks, getVisibleTicks } from './label-utils';\nvar OFFSET_PX = 12;\nexport default memo(LeftLabels); // Renders the visible tick labels on the left axis, as well as their grid lines.\n\nfunction LeftLabels(_a) {\n  var _b = _a.axis,\n      axis = _b === void 0 ? 'y' : _b,\n      width = _a.width,\n      height = _a.height,\n      scale = _a.scale,\n      ticks = _a.ticks,\n      tickFormatter = _a.tickFormatter,\n      title = _a.title,\n      ariaRoleDescription = _a.ariaRoleDescription;\n  var virtualTextRef = useRef(null);\n  var yOffset = axis === 'x' && scale.isCategorical() ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;\n  var cacheRef = useRef({});\n\n  var getLabelSpace = function getLabelSpace(label) {\n    if (cacheRef.current[label] !== undefined) {\n      return cacheRef.current[label];\n    }\n\n    if (virtualTextRef.current && virtualTextRef.current.getBBox) {\n      virtualTextRef.current.textContent = label;\n      cacheRef.current[label] = virtualTextRef.current.getBBox().height;\n      return cacheRef.current[label];\n    }\n\n    return 0;\n  };\n\n  var formattedTicks = formatTicks({\n    ticks: ticks,\n    scale: scale,\n    getLabelSpace: getLabelSpace,\n    tickFormatter: tickFormatter\n  });\n\n  if (virtualTextRef.current) {\n    virtualTextRef.current.textContent = '';\n  }\n\n  var from = 0 - OFFSET_PX - yOffset;\n  var until = height + OFFSET_PX - yOffset;\n  var visibleTicks = getVisibleTicks(formattedTicks, from, until);\n  return React.createElement(\"g\", {\n    className: clsx(styles['labels-left']),\n    \"aria-label\": title,\n    role: \"list\",\n    \"aria-roledescription\": ariaRoleDescription,\n    \"aria-hidden\": true\n  }, visibleTicks.map(function (_a, index) {\n    var position = _a.position,\n        lines = _a.lines;\n    return isFinite(position) && React.createElement(\"g\", {\n      key: index,\n      role: \"listitem\",\n      transform: \"translate(0,\".concat(position + yOffset, \")\"),\n      className: clsx(styles.ticks, axis === 'x' ? styles['ticks--x'] : styles['ticks--y'])\n    }, axis === 'y' && React.createElement(\"line\", {\n      className: clsx(styles.grid, styles.ticks_line),\n      x1: -TICK_LENGTH,\n      y1: 0,\n      x2: width,\n      y2: 0,\n      \"aria-hidden\": \"true\"\n    }), React.createElement(\"text\", {\n      className: styles.ticks__text,\n      x: -(TICK_LENGTH + TICK_MARGIN),\n      y: 0\n    }, lines.join(' ')));\n  }), React.createElement(\"text\", {\n    ref: virtualTextRef,\n    x: 0,\n    y: 0,\n    style: {\n      visibility: 'hidden'\n    },\n    \"aria-hidden\": \"true\"\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}