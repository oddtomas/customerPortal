{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useImperativeHandle, useRef } from 'react';\nimport styles from './styles.css.js';\nimport { getCardsPerRow } from './cards-layout-helper';\nimport { getBaseProps } from '../internal/base-component';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nimport ToolsHeader from '../table/tools-header';\nimport { getItemKey } from '../table/utils';\nimport { focusMarkers, useFocusMove, useSelection } from '../table/use-selection';\nimport SelectionControl from '../table/selection-control';\nimport InternalContainer from '../container/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport stickyScrolling from '../table/sticky-scrolling';\nimport { useSupportsStickyHeader } from '../container/use-sticky-header';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar Cards = React.forwardRef(function (_a, ref) {\n  var _b = _a.items,\n      items = _b === void 0 ? [] : _b,\n      cardDefinition = _a.cardDefinition,\n      _c = _a.cardsPerRow,\n      cardsPerRow = _c === void 0 ? [] : _c,\n      header = _a.header,\n      filter = _a.filter,\n      pagination = _a.pagination,\n      preferences = _a.preferences,\n      empty = _a.empty,\n      loading = _a.loading,\n      loadingText = _a.loadingText,\n      trackBy = _a.trackBy,\n      selectedItems = _a.selectedItems,\n      selectionType = _a.selectionType,\n      isItemDisabled = _a.isItemDisabled,\n      onSelectionChange = _a.onSelectionChange,\n      ariaLabels = _a.ariaLabels,\n      visibleSections = _a.visibleSections,\n      stickyHeader = _a.stickyHeader,\n      stickyHeaderVerticalOffset = _a.stickyHeaderVerticalOffset,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'container' : _d,\n      rest = __rest(_a, [\"items\", \"cardDefinition\", \"cardsPerRow\", \"header\", \"filter\", \"pagination\", \"preferences\", \"empty\", \"loading\", \"loadingText\", \"trackBy\", \"selectedItems\", \"selectionType\", \"isItemDisabled\", \"onSelectionChange\", \"ariaLabels\", \"visibleSections\", \"stickyHeader\", \"stickyHeaderVerticalOffset\", \"variant\"]);\n\n  var __internalRootRef = useBaseComponent('Cards').__internalRootRef;\n\n  var baseProps = getBaseProps(rest);\n  var isRefresh = useVisualRefresh(__internalRootRef);\n  var computedVariant = isRefresh ? variant : 'container';\n\n  var _e = useContainerQuery(function (_a) {\n    var width = _a.width;\n    return getCardsPerRow(width, cardsPerRow);\n  }, [cardsPerRow]),\n      columns = _e[0],\n      measureRef = _e[1];\n\n  var refObject = useRef(null);\n  var mergedRef = useMergeRefs(measureRef, refObject, __internalRootRef);\n\n  var _f = useSelection({\n    items: items,\n    trackBy: trackBy,\n    selectedItems: selectedItems,\n    selectionType: selectionType,\n    isItemDisabled: isItemDisabled,\n    onSelectionChange: onSelectionChange,\n    ariaLabels: ariaLabels\n  }),\n      isItemSelected = _f.isItemSelected,\n      getItemSelectionProps = _f.getItemSelectionProps,\n      updateShiftToggle = _f.updateShiftToggle;\n\n  var hasToolsHeader = header || filter || pagination || preferences;\n  var headerRef = useRef(null);\n\n  var _g = stickyScrolling(refObject, headerRef),\n      _scrollToTop = _g.scrollToTop,\n      scrollToItem = _g.scrollToItem;\n\n  stickyHeader = useSupportsStickyHeader() && stickyHeader;\n\n  var onCardFocus = function onCardFocus(event) {\n    if (stickyHeader) {\n      scrollToItem(event.currentTarget);\n    }\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      scrollToTop: function scrollToTop() {\n        if (stickyHeader) {\n          _scrollToTop();\n        }\n      }\n    };\n  }, [stickyHeader, _scrollToTop]);\n  var status;\n\n  if (loading) {\n    status = React.createElement(\"div\", {\n      className: styles.loading\n    }, React.createElement(InternalStatusIndicator, {\n      type: \"loading\"\n    }, loadingText));\n  } else if (empty && !items.length) {\n    status = React.createElement(\"div\", {\n      className: styles.empty\n    }, empty);\n  }\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef\n  }), React.createElement(InternalContainer, {\n    header: hasToolsHeader && React.createElement(\"div\", {\n      className: clsx(styles.header, isRefresh && styles['header-refresh'], styles[\"header-variant-\".concat(computedVariant)])\n    }, React.createElement(ToolsHeader, {\n      header: header,\n      filter: filter,\n      pagination: pagination,\n      preferences: preferences\n    })),\n    disableContentPaddings: true,\n    disableHeaderPaddings: computedVariant === 'full-page',\n    variant: computedVariant === 'container' ? 'cards' : computedVariant,\n    __stickyHeader: stickyHeader,\n    __stickyOffset: stickyHeaderVerticalOffset,\n    __headerRef: headerRef\n  }, React.createElement(\"div\", {\n    className: clsx(hasToolsHeader && styles['has-header'])\n  }, status !== null && status !== void 0 ? status : React.createElement(CardsList, {\n    items: items,\n    cardDefinition: cardDefinition,\n    trackBy: trackBy,\n    selectionType: selectionType,\n    columns: columns,\n    isItemSelected: isItemSelected,\n    getItemSelectionProps: getItemSelectionProps,\n    visibleSections: visibleSections,\n    updateShiftToggle: updateShiftToggle,\n    onFocus: onCardFocus\n  }))));\n});\nexport default Cards;\n\nvar CardsList = function CardsList(_a) {\n  var items = _a.items,\n      cardDefinition = _a.cardDefinition,\n      trackBy = _a.trackBy,\n      selectionType = _a.selectionType,\n      columns = _a.columns,\n      isItemSelected = _a.isItemSelected,\n      getItemSelectionProps = _a.getItemSelectionProps,\n      visibleSections = _a.visibleSections,\n      updateShiftToggle = _a.updateShiftToggle,\n      onFocus = _a.onFocus;\n  var selectable = !!selectionType;\n\n  var _b = useFocusMove(selectionType, items.length),\n      moveFocusDown = _b.moveFocusDown,\n      moveFocusUp = _b.moveFocusUp;\n\n  var visibleSectionsDefinition = cardDefinition.sections || [];\n  visibleSectionsDefinition = visibleSections ? visibleSectionsDefinition.filter(function (section) {\n    return section.id && visibleSections.indexOf(section.id) !== -1;\n  }) : visibleSectionsDefinition;\n  return React.createElement(\"ol\", __assign({\n    className: clsx(styles.list, styles[\"list-grid-\".concat(columns || 1)])\n  }, focusMarkers && focusMarkers.root), items.map(function (item, index) {\n    var _a;\n\n    return React.createElement(\"li\", __assign({\n      className: clsx(styles.card, (_a = {}, _a[styles['card-selectable']] = selectable, _a[styles['card-selected']] = selectable && isItemSelected(item), _a)),\n      key: getItemKey(trackBy, item, index),\n      onFocus: onFocus\n    }, focusMarkers && focusMarkers.item), React.createElement(\"div\", {\n      className: styles['card-inner']\n    }, React.createElement(\"div\", {\n      className: styles['card-header']\n    }, React.createElement(\"span\", {\n      className: styles['card-header-inner']\n    }, cardDefinition.header ? cardDefinition.header(item) : ''), selectable && React.createElement(\"div\", {\n      className: styles['selection-control']\n    }, React.createElement(SelectionControl, __assign({\n      onFocusDown: moveFocusDown,\n      onFocusUp: moveFocusUp,\n      onShiftToggle: updateShiftToggle\n    }, getItemSelectionProps(item))))), visibleSectionsDefinition.map(function (_a, index) {\n      var _b = _a.width,\n          width = _b === void 0 ? 100 : _b,\n          header = _a.header,\n          content = _a.content,\n          id = _a.id;\n      return React.createElement(\"div\", {\n        key: id || index,\n        className: styles.section,\n        style: {\n          width: \"\".concat(width, \"%\")\n        }\n      }, header ? React.createElement(\"div\", {\n        className: styles['section-header']\n      }, header) : '', content ? React.createElement(\"div\", {\n        className: styles['section-content']\n      }, content(item)) : '');\n    })));\n  }));\n};\n\napplyDisplayName(Cards, 'Cards');","map":null,"metadata":{},"sourceType":"module"}