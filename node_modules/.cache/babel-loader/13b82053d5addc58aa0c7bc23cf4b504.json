{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport { Flash } from './flash';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport VisualContext from '../internal/components/visual-context';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useReducedMotion, useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { TransitionGroup } from 'react-transition-group';\nimport { Transition } from '../internal/components/transition';\nimport { TIMEOUT_FOR_ENTERING_ANIMATION } from './constant';\nexport default function Flashbar(_a) {\n  var items = _a.items,\n      restProps = __rest(_a, [\"items\"]);\n\n  var __internalRootRef = useBaseComponent('Flashbar').__internalRootRef;\n\n  var _b = useContainerBreakpoints(['xs']),\n      breakpoint = _b[0],\n      ref = _b[1];\n\n  var isRefresh = useVisualRefresh(__internalRootRef);\n  var baseProps = getBaseProps(restProps);\n  var mergedRef = useMergeRefs(ref, __internalRootRef); // All the flash items should have ids so we can identify which DOM element is being removed from the DOM to animate it.\n\n  var motionDisabled = useReducedMotion(ref) || !isRefresh || items && !items.every(function (item) {\n    return 'id' in item;\n  }); // Motion will be disabled if any of the provided flash messages does not contain an `id`\n\n  var renderFlashItem = function renderFlashItem(item, index) {\n    var _a;\n\n    return React.createElement(Flash, __assign({\n      key: (_a = item.id) !== null && _a !== void 0 ? _a : index,\n      // eslint-disable-next-line react/forbid-component-props\n      className: clsx(isRefresh ? styles['flash-refresh'] : '')\n    }, item));\n  };\n\n  var renderFlashItemsWithTransitions = function renderFlashItemsWithTransitions(items) {\n    return React.createElement(React.Fragment, null, React.createElement(TransitionGroup, {\n      component: null\n    }, items && items.map(function (item, index) {\n      var _a;\n\n      return React.createElement(Transition, {\n        transitionChangeDelay: {\n          entering: TIMEOUT_FOR_ENTERING_ANIMATION\n        },\n        key: (_a = item.id) !== null && _a !== void 0 ? _a : index,\n        \"in\": true\n      }, function (state, transitionRootElement) {\n        var _a;\n\n        return React.createElement(Flash, __assign({\n          ref: transitionRootElement,\n          key: (_a = item.id) !== null && _a !== void 0 ? _a : index,\n          transitionState: state,\n          // eslint-disable-next-line react/forbid-component-props\n          className: clsx(isRefresh ? styles['flash-refresh'] : '')\n        }, item));\n      });\n    })));\n  };\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.flashbar, styles[\"breakpoint-\".concat(breakpoint)]),\n    ref: mergedRef\n  }), React.createElement(VisualContext, {\n    contextName: \"flashbar\"\n  }, items && React.createElement(React.Fragment, null, motionDisabled ? items.map(function (item, index) {\n    return renderFlashItem(item, index);\n  }) : renderFlashItemsWithTransitions(items))));\n}\napplyDisplayName(Flashbar, 'Flashbar');","map":null,"metadata":{},"sourceType":"module"}