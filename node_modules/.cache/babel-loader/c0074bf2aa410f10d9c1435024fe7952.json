{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getOverflowParents, getOverflowParentDimensions } from '../../utils/scrollable-containers';\nimport styles from './styles.css.js';\nvar AVAILABLE_SPACE_RESERVE_DEFAULT = 50;\nvar AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL = 19; // 50 - 31\n\nvar AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL = 20;\n\nvar getClosestParentDimensions = function getClosestParentDimensions(element) {\n  var parents = getOverflowParents(element).map(function (el) {\n    var _a = el.getBoundingClientRect(),\n        height = _a.height,\n        width = _a.width,\n        top = _a.top,\n        left = _a.left;\n\n    return {\n      height: height,\n      width: width,\n      top: top,\n      left: left\n    };\n  });\n  return parents.shift();\n};\n\nexport var getAvailableSpace = function getAvailableSpace(trigger, dropdown, overflowParents, stretchWidth, stretchHeight, isMobile) {\n  if (stretchWidth === void 0) {\n    stretchWidth = false;\n  }\n\n  if (stretchHeight === void 0) {\n    stretchHeight = false;\n  }\n\n  var availableSpaceReserveVertical = stretchHeight ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  var availableSpaceReserveHorizontal = stretchWidth ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;\n\n  var _a = trigger.getBoundingClientRect(),\n      triggerBottom = _a.bottom,\n      triggerLeft = _a.left,\n      triggerRight = _a.right;\n\n  return overflowParents.reduce(function (_a, overflowParent) {\n    var above = _a.above,\n        below = _a.below,\n        left = _a.left,\n        right = _a.right;\n    var offsetTop = triggerBottom - overflowParent.top;\n    var currentAbove = offsetTop - trigger.offsetHeight - availableSpaceReserveVertical;\n    var currentBelow = overflowParent.height - offsetTop - availableSpaceReserveVertical;\n    var currentLeft = triggerRight - overflowParent.left - availableSpaceReserveHorizontal;\n    var currentRight = overflowParent.left + overflowParent.width - triggerLeft - availableSpaceReserveHorizontal;\n    return {\n      above: Math.min(above, currentAbove),\n      below: Math.min(below, currentBelow),\n      left: Math.min(left, currentLeft),\n      right: Math.min(right, currentRight)\n    };\n  }, {\n    above: Number.MAX_VALUE,\n    below: Number.MAX_VALUE,\n    left: Number.MAX_VALUE,\n    right: Number.MAX_VALUE\n  });\n};\nexport var getInteriorAvailableSpace = function getInteriorAvailableSpace(trigger, dropdown, overflowParents, isMobile) {\n  var AVAILABLE_SPACE_RESERVE_VERTICAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;\n  var AVAILABLE_SPACE_RESERVE_HORIZONTAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;\n\n  var _a = trigger.getBoundingClientRect(),\n      triggerBottom = _a.bottom,\n      triggerTop = _a.top,\n      triggerLeft = _a.left,\n      triggerRight = _a.right;\n\n  return overflowParents.reduce(function (_a, overflowParent) {\n    var above = _a.above,\n        below = _a.below,\n        left = _a.left,\n        right = _a.right;\n    var currentAbove = triggerBottom - overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;\n    var currentBelow = overflowParent.height - triggerTop + overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;\n    var currentLeft = triggerLeft - overflowParent.left - AVAILABLE_SPACE_RESERVE_HORIZONTAL;\n    var currentRight = overflowParent.left + overflowParent.width - triggerRight - AVAILABLE_SPACE_RESERVE_HORIZONTAL;\n    return {\n      above: Math.min(above, currentAbove),\n      below: Math.min(below, currentBelow),\n      left: Math.min(left, currentLeft),\n      right: Math.min(right, currentRight)\n    };\n  }, {\n    above: Number.MAX_VALUE,\n    below: Number.MAX_VALUE,\n    left: Number.MAX_VALUE,\n    right: Number.MAX_VALUE\n  });\n};\nexport var getDropdownPosition = function getDropdownPosition(trigger, dropdown, overflowParents, minWidth, preferCenter, stretchWidth, stretchHeight, isMobile) {\n  if (preferCenter === void 0) {\n    preferCenter = false;\n  }\n\n  if (stretchWidth === void 0) {\n    stretchWidth = false;\n  }\n\n  if (stretchHeight === void 0) {\n    stretchHeight = false;\n  }\n\n  var availableSpace = getAvailableSpace(trigger, dropdown, overflowParents, stretchWidth, stretchHeight, isMobile);\n  var triggerWidth = trigger.getBoundingClientRect().width;\n  minWidth = minWidth ? Math.min(triggerWidth, minWidth) : triggerWidth;\n  var requiredWidth = dropdown.getBoundingClientRect().width; // dropdown should not be smaller than the trigger\n\n  var idealWidth = Math.max(requiredWidth, minWidth);\n  var dropLeft;\n  var left = null;\n  var width = idealWidth; //1. Can it be positioned with ideal width to the right?\n\n  if (idealWidth <= availableSpace.right) {\n    dropLeft = false; //2. Can it be positioned with ideal width to the left?\n  } else if (idealWidth <= availableSpace.left) {\n    dropLeft = true; //3. Fit into biggest available space either on left or right\n  } else {\n    dropLeft = availableSpace.left > availableSpace.right;\n    width = Math.max(availableSpace.left, availableSpace.right, minWidth);\n  }\n\n  if (preferCenter) {\n    var spillOver = (idealWidth - triggerWidth) / 2; // availableSpace always includes the trigger width, but we want to exclude that\n\n    var availableOutsideLeft = availableSpace.left - triggerWidth;\n    var availableOutsideRight = availableSpace.right - triggerWidth;\n    var fitsInCenter = availableOutsideLeft >= spillOver && availableOutsideRight >= spillOver;\n\n    if (fitsInCenter) {\n      left = -spillOver;\n    }\n  }\n\n  var dropUp = availableSpace.below < dropdown.offsetHeight && availableSpace.above > availableSpace.below;\n  var availableHeight = dropUp ? availableSpace.above : availableSpace.below; // Try and crop the bottom item when all options can't be displayed, affordance for \"there's more\"\n\n  var croppedHeight = stretchHeight ? availableHeight : Math.floor(availableHeight / 31) * 31 + 16;\n  return {\n    dropUp: dropUp,\n    dropLeft: dropLeft,\n    left: left === null ? 'auto' : \"\".concat(left, \"px\"),\n    height: \"\".concat(croppedHeight, \"px\"),\n    width: \"\".concat(width, \"px\")\n  };\n};\nexport var getInteriorDropdownPosition = function getInteriorDropdownPosition(trigger, dropdown, overflowParents, isMobile) {\n  var availableSpace = getInteriorAvailableSpace(trigger, dropdown, overflowParents, isMobile);\n\n  var _a = trigger.getBoundingClientRect(),\n      triggerBottom = _a.bottom,\n      triggerTop = _a.top,\n      triggerWidth = _a.width;\n\n  var _b = getClosestParentDimensions(trigger),\n      parentDropdownTop = _b.top,\n      parentDropdownHeight = _b.height;\n\n  var dropLeft;\n  var width = dropdown.getBoundingClientRect().width;\n  var top = triggerTop - parentDropdownTop;\n\n  if (width <= availableSpace.right) {\n    dropLeft = false;\n  } else if (width <= availableSpace.left) {\n    dropLeft = true;\n  } else {\n    dropLeft = availableSpace.left > availableSpace.right;\n    width = Math.max(availableSpace.left, availableSpace.right);\n  }\n\n  var left = dropLeft ? 0 - width : triggerWidth;\n  var dropUp = availableSpace.below < dropdown.offsetHeight && availableSpace.above > availableSpace.below;\n  var bottom = dropUp ? parentDropdownTop + parentDropdownHeight - triggerBottom : 0;\n  var availableHeight = dropUp ? availableSpace.above : availableSpace.below; // Try and crop the bottom item when all options can't be displayed, affordance for \"there's more\"\n\n  var croppedHeight = Math.floor(availableHeight / 31) * 31 + 16;\n  return {\n    dropUp: dropUp,\n    dropLeft: dropLeft,\n    height: \"\".concat(croppedHeight, \"px\"),\n    width: \"\".concat(width, \"px\"),\n    top: \"\".concat(top, \"px\"),\n    bottom: \"\".concat(bottom, \"px\"),\n    left: \"\".concat(left, \"px\")\n  };\n};\nexport var calculatePosition = function calculatePosition(dropdownElement, triggerElement, verticalContainerElement, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth) {\n  // cleaning previously assigned values,\n  // so that they are not reused in case of screen resize and similar events\n  verticalContainerElement.style.maxHeight = '';\n  dropdownElement.style.width = '';\n  dropdownElement.style.top = '';\n  dropdownElement.style.bottom = '';\n  dropdownElement.style.left = '';\n  dropdownElement.classList.remove(styles['dropdown-drop-left']);\n  dropdownElement.classList.remove(styles['dropdown-drop-right']);\n  dropdownElement.classList.remove(styles['dropdown-drop-up']);\n  var overflowParents = getOverflowParentDimensions(dropdownElement, interior, expandToViewport, stretchHeight);\n  var position = interior ? getInteriorDropdownPosition(triggerElement, dropdownElement, overflowParents, isMobile) : getDropdownPosition(triggerElement, dropdownElement, overflowParents, minWidth, preferCenter, stretchWidth, stretchHeight, isMobile);\n  var triggerBox = triggerElement.getBoundingClientRect();\n  return [position, triggerBox];\n};","map":null,"metadata":{},"sourceType":"module"}