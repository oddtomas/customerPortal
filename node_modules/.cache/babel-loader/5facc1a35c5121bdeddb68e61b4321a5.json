{"ast":null,"code":"import { __assign, __rest, __spreadArray } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useCallback, useMemo } from 'react';\nimport { filterOptions } from './utils/utils';\nimport { KeyCode } from '../internal/keycode';\nimport { generateTestIndexes } from '../internal/components/options-list/utils/test-indexes';\nvar parentMap = new WeakMap();\nexport var getParentGroup = function getParentGroup(item) {\n  return parentMap.get(item);\n};\nexport var useAutosuggestItems = function useAutosuggestItems(options) {\n  if (options === void 0) {\n    options = [];\n  }\n\n  return useMemo(function () {\n    return createItems(options);\n  }, [options]);\n};\n\nfunction createItems(options) {\n  var items = [];\n\n  for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n    var option = options_1[_i];\n\n    if (isGroup(option)) {\n      items.push.apply(items, flattenGroup(option));\n    } else {\n      items.push(__assign(__assign({}, option), {\n        option: option\n      }));\n    }\n  }\n\n  return items;\n}\n\nfunction isGroup(optionOrGroup) {\n  return 'options' in optionOrGroup;\n}\n\nfunction flattenGroup(group) {\n  var options = group.options,\n      rest = __rest(group, [\"options\"]);\n\n  var hasOnlyDisabledChildren = options.every(function (option) {\n    return option.disabled;\n  });\n\n  var parent = __assign(__assign({}, rest), {\n    type: 'parent',\n    disabled: rest.disabled || hasOnlyDisabledChildren,\n    option: group\n  });\n\n  var children = options.map(function (option) {\n    return __assign(__assign({}, option), {\n      type: 'child',\n      disabled: option.disabled || parent.disabled,\n      option: option\n    });\n  }); // TODO: Refactor parentMap and remove this side effect\n\n  children.forEach(function (child) {\n    return parentMap.set(child, __assign(__assign({}, group), {\n      option: group\n    }));\n  });\n  return [parent].concat(children);\n}\n\nexport var useFilteredItems = function useFilteredItems(autosuggestItems, value, filterText, filteringType, showAll, __hideEnteredTextLabel) {\n  return useMemo(function () {\n    var filteredItems = filteringType === 'auto' && !showAll ? filterOptions(autosuggestItems, filterText) : __spreadArray([], autosuggestItems, true);\n\n    if (value && !__hideEnteredTextLabel) {\n      filteredItems.unshift({\n        value: value,\n        type: 'use-entered',\n        option: {\n          value: value\n        }\n      });\n    }\n\n    generateTestIndexes(filteredItems, getParentGroup);\n    return filteredItems;\n  }, [autosuggestItems, value, filterText, filteringType, showAll, __hideEnteredTextLabel]);\n};\nexport var useSelectVisibleOption = function useSelectVisibleOption(filteredItems, selectOption, isInteractive) {\n  return useCallback(function (index) {\n    var option = filteredItems[index];\n\n    if (option && isInteractive(option)) {\n      selectOption(option);\n    }\n  }, [filteredItems, selectOption, isInteractive]);\n};\nexport var useHighlightVisibleOption = function useHighlightVisibleOption(filteredItems, setHighlightedIndex, isHighlightable) {\n  return useCallback(function (index) {\n    var option = filteredItems[index];\n\n    if (option && isHighlightable(option)) {\n      setHighlightedIndex(index);\n    }\n  }, [filteredItems, setHighlightedIndex, isHighlightable]);\n};\nexport var useKeyboardHandler = function useKeyboardHandler(moveHighlight, openDropdown, selectHighlighted, usingMouse, open, onKeyDown) {\n  return useCallback(function (e) {\n    switch (e.detail.keyCode) {\n      case KeyCode.down:\n        {\n          moveHighlight(1);\n          openDropdown();\n          usingMouse.current = false;\n          e.preventDefault();\n          break;\n        }\n\n      case KeyCode.up:\n        {\n          moveHighlight(-1);\n          openDropdown();\n          usingMouse.current = false;\n          e.preventDefault();\n          break;\n        }\n\n      case KeyCode.enter:\n        {\n          if (open) {\n            selectHighlighted();\n            e.preventDefault();\n          }\n\n          onKeyDown && onKeyDown(e);\n          break;\n        }\n\n      default:\n        {\n          onKeyDown && onKeyDown(e);\n        }\n    }\n  }, [moveHighlight, selectHighlighted, onKeyDown, usingMouse, open, openDropdown]);\n};","map":null,"metadata":{},"sourceType":"module"}