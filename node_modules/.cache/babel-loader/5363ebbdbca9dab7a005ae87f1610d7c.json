{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../../base-component';\nimport InternalIcon from '../../../icon/internal';\nimport styles from './styles.css.js';\nimport { fireKeyboardEvent, fireCancelableEvent, getBlurEventRelatedTarget } from '../../events';\nimport useFocusVisible from '../../hooks/focus-visible';\n\nvar ButtonTrigger = function ButtonTrigger(_a, ref) {\n  var children = _a.children,\n      _b = _a.pressed,\n      pressed = _b === void 0 ? false : _b,\n      _c = _a.hideCaret,\n      hideCaret = _c === void 0 ? false : _c,\n      _d = _a.disabled,\n      disabled = _d === void 0 ? false : _d,\n      _e = _a.readOnly,\n      readOnly = _e === void 0 ? false : _e,\n      _f = _a.invalid,\n      invalid = _f === void 0 ? false : _f,\n      inFilteringToken = _a.inFilteringToken,\n      ariaHasPopup = _a.ariaHasPopup,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescribedby = _a.ariaDescribedby,\n      onKeyDown = _a.onKeyDown,\n      onKeyUp = _a.onKeyUp,\n      onMouseDown = _a.onMouseDown,\n      onClick = _a.onClick,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      restProps = __rest(_a, [\"children\", \"pressed\", \"hideCaret\", \"disabled\", \"readOnly\", \"invalid\", \"inFilteringToken\", \"ariaHasPopup\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescribedby\", \"onKeyDown\", \"onKeyUp\", \"onMouseDown\", \"onClick\", \"onFocus\", \"onBlur\"]);\n\n  var baseProps = getBaseProps(restProps);\n  var focusVisible = useFocusVisible();\n\n  var attributes = __assign(__assign(__assign({}, focusVisible), baseProps), {\n    type: 'button',\n    className: clsx(styles['button-trigger'], baseProps.className, pressed && styles.pressed, disabled && styles.disabled, invalid && styles.invalid, !hideCaret && styles['has-caret'], readOnly && styles['read-only'], inFilteringToken && styles['in-filtering-token']),\n    disabled: disabled || readOnly,\n    'aria-expanded': pressed,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-haspopup': ariaHasPopup !== null && ariaHasPopup !== void 0 ? ariaHasPopup : 'listbox',\n    onKeyDown: onKeyDown && function (event) {\n      return fireKeyboardEvent(onKeyDown, event);\n    },\n    onKeyUp: onKeyUp && function (event) {\n      return fireKeyboardEvent(onKeyUp, event);\n    },\n    onMouseDown: onMouseDown && function (event) {\n      return fireCancelableEvent(onMouseDown, {}, event);\n    },\n    onClick: onClick && function (event) {\n      return fireCancelableEvent(onClick, {}, event);\n    },\n    onFocus: onFocus && function (event) {\n      return fireCancelableEvent(onFocus, {}, event);\n    },\n    onBlur: onBlur && function (event) {\n      return fireCancelableEvent(onBlur, {\n        relatedTarget: getBlurEventRelatedTarget(event.nativeEvent)\n      }, event);\n    }\n  });\n\n  if (invalid) {\n    attributes['aria-invalid'] = invalid;\n  }\n\n  return React.createElement(\"button\", __assign({\n    ref: ref\n  }, attributes), children, !hideCaret && React.createElement(\"span\", {\n    className: styles.arrow\n  }, React.createElement(InternalIcon, {\n    name: \"caret-down-filled\",\n    variant: disabled ? 'disabled' : 'normal'\n  })));\n};\n\nexport default React.forwardRef(ButtonTrigger);","map":null,"metadata":{},"sourceType":"module"}