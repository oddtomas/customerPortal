{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { addMonths, endOfDay, isBefore, startOfDay, startOfMonth, isAfter, isSameMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport CalendarHeader from './header';\nimport { Grids, selectFocusedDate } from './grids';\nimport moveFocusHandler from '../../date-picker/calendar/utils/move-focus-handler';\nimport { displayToIso, formatDate, formatTime, formatISOStringWithoutTimezone, isoToDisplay, parseDate } from '../../date-picker/calendar/utils/date';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalFormField from '../../form-field/internal';\nimport DateInput from '../../internal/components/date-input';\nimport InternalTimeInput from '../../time-input/internal';\nimport clsx from 'clsx';\nimport { getBaseDate } from './get-base-date.js';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { getDateLabel, renderTimeLabel } from '../../date-picker/calendar/utils/intl';\nimport LiveRegion from '../../internal/components/live-region';\nexport default forwardRef(Calendar);\n\nfunction Calendar(_a, ref) {\n  var _b;\n\n  var locale = _a.locale,\n      startOfWeek = _a.startOfWeek,\n      isDateEnabled = _a.isDateEnabled,\n      onSelectDateRange = _a.onSelectDateRange,\n      _c = _a.initialEndDate,\n      initialEndDate = _c === void 0 ? '' : _c,\n      _d = _a.initialStartDate,\n      initialStartDate = _d === void 0 ? '' : _d,\n      i18nStrings = _a.i18nStrings,\n      dateOnly = _a.dateOnly,\n      isSingleGrid = _a.isSingleGrid,\n      timeInputFormat = _a.timeInputFormat;\n  var elementRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        if (elementRef.current) {\n          var prevButton = elementRef.current.getElementsByClassName(styles['calendar-prev-month-btn'])[0];\n          prevButton === null || prevButton === void 0 ? void 0 : prevButton.focus();\n        }\n      }\n    };\n  });\n\n  var _e = initialStartDate.split('T'),\n      _f = _e[0],\n      initialStartDateString = _f === void 0 ? '' : _f,\n      _g = _e[1],\n      initialStartTimeString = _g === void 0 ? '' : _g;\n\n  var _h = initialEndDate.split('T'),\n      _j = _h[0],\n      initialEndDateString = _j === void 0 ? '' : _j,\n      _k = _h[1],\n      initialEndTimeString = _k === void 0 ? '' : _k;\n\n  var _l = useState(initialStartDateString),\n      startDateString = _l[0],\n      setStartDateString = _l[1];\n\n  var _m = useState(initialStartTimeString),\n      startTimeString = _m[0],\n      setStartTimeString = _m[1];\n\n  var _o = useState(initialEndDateString),\n      endDateString = _o[0],\n      setEndDateString = _o[1];\n\n  var _p = useState(initialEndTimeString),\n      endTimeString = _p[0],\n      setEndTimeString = _p[1];\n\n  var selectedStartDate = parseDate(startDateString, true);\n  var selectedEndDate = parseDate(endDateString, true);\n\n  var _q = useState(''),\n      announcement = _q[0],\n      setAnnouncement = _q[1];\n\n  var _r = useState(function () {\n    if (startDateString) {\n      var startDate = parseDate(startDateString);\n\n      if (isSingleGrid) {\n        return startOfMonth(startDate);\n      }\n\n      return startOfMonth(addMonths(startDate, 1));\n    }\n\n    if (endDateString) {\n      return startOfMonth(parseDate(endDateString));\n    }\n\n    return startOfMonth(Date.now());\n  }),\n      currentMonth = _r[0],\n      setCurrentMonth = _r[1];\n\n  var _s = useState(function () {\n    if (selectedStartDate) {\n      if (isSameMonth(selectedStartDate, currentMonth)) {\n        return selectedStartDate;\n      }\n\n      if (!isSingleGrid && isSameMonth(selectedStartDate, addMonths(currentMonth, -1))) {\n        return selectedStartDate;\n      }\n    }\n\n    return selectFocusedDate(selectedStartDate, currentMonth, isDateEnabled);\n  }),\n      focusedDate = _s[0],\n      setFocusedDate = _s[1];\n\n  useEffect(function () {\n    // This effect \"synchronizes\" the local state update back up to the overall DateRangePicker component\n    var startDate = formatISOStringWithoutTimezone(startDateString, startTimeString);\n    var endDate = formatISOStringWithoutTimezone(endDateString, endTimeString);\n\n    if (startDate !== initialStartDate || endDate !== initialEndDate) {\n      onSelectDateRange({\n        startDate: startDate,\n        endDate: endDate,\n        type: 'absolute'\n      });\n    }\n  }, [startDateString, startTimeString, endDateString, endTimeString, onSelectDateRange, initialStartDate, initialEndDate]);\n\n  var onSelectDateHandler = function onSelectDateHandler(selectedDate) {\n    // recommended to include the start/end time announced with the selection\n    // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n    var announceStart = function announceStart(startDate) {\n      return i18nStrings.startDateLabel + ', ' + getDateLabel(locale, startDate) + ', ' + i18nStrings.startTimeLabel + ', ' + renderTimeLabel(locale, startDate, timeInputFormat) + '. ';\n    };\n\n    var announceEnd = function announceEnd(endDate) {\n      return i18nStrings.endDateLabel + ', ' + getDateLabel(locale, endDate) + ', ' + i18nStrings.endTimeLabel + ', ' + renderTimeLabel(locale, endDate, timeInputFormat) + '. ';\n    };\n\n    var announceRange = function announceRange(startDate, endDate) {\n      if (!i18nStrings.renderSelectedAbsoluteRangeAriaLive) {\n        return \"\".concat(getDateLabel(locale, startDate), \" \\u2013 \").concat(getDateLabel(locale, endDate));\n      }\n\n      return i18nStrings.renderSelectedAbsoluteRangeAriaLive(getDateLabel(locale, startDate), getDateLabel(locale, endDate));\n    }; // If both fields are empty, we set the start date\n\n\n    if (!startDateString && !endDateString) {\n      var startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n      setAnnouncement(announceStart(startDate));\n      return;\n    } // If both fields are set, we start new\n\n\n    if (startDateString && endDateString) {\n      var startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n      setEndDateString('');\n      setEndTimeString('');\n      setAnnouncement(announceStart(startDate));\n      return;\n    } // If only the END date is empty, we fill it (and swap dates if needed)\n\n\n    if (startDateString && !endDateString) {\n      var parsedStartDate = parseDate(startDateString);\n\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        var startDate = startOfDay(selectedDate);\n        var endDate = endOfDay(parsedStartDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, endDate));\n      } else {\n        var endDate = endOfDay(selectedDate);\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(parsedStartDate, endDate));\n      }\n\n      return;\n    } // If only the START date is empty, we fill it (and swap dates if needed)\n\n\n    if (!startDateString && endDateString) {\n      var existingEndDate = parseDate(endDateString);\n\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        var startDate = startOfDay(existingEndDate);\n        var endDate = endOfDay(selectedDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(startDate, endDate));\n      } else {\n        var startDate = startOfDay(selectedDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, existingEndDate));\n      }\n\n      return;\n    } // All possible conditions are covered above\n\n  };\n\n  var onHeaderChangeMonthHandler = function onHeaderChangeMonthHandler(isPrevious) {\n    var newCurrentMonth = addMonths(currentMonth, isPrevious ? -1 : 1);\n    setCurrentMonth(newCurrentMonth);\n    var newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);\n    var newBaseDate = getBaseDate(newBaseDateMonth, 1, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n\n  var onChangeStartDate = function onChangeStartDate(e) {\n    var isoDateString = displayToIso(e.detail.value);\n    setStartDateString(isoDateString);\n\n    if (isoDateString.length >= 8) {\n      var newCurrentMonth = startOfMonth(parseDate(isoDateString));\n      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));\n    }\n  };\n\n  var onChangeEndDate = function onChangeEndDate(e) {\n    var isoDateString = displayToIso(e.detail.value);\n    setEndDateString(isoDateString);\n  };\n\n  var constrainttextId = useUniqueId('awsui-area-date-range-picker');\n  constrainttextId = i18nStrings.dateTimeConstraintText ? constrainttextId : '';\n  return React.createElement(React.Fragment, null, React.createElement(InternalSpaceBetween, {\n    size: \"m\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles.calendar, (_b = {}, _b[styles['one-grid']] = isSingleGrid, _b)),\n    role: \"application\",\n    ref: elementRef\n  }, React.createElement(CalendarHeader, {\n    baseDate: currentMonth,\n    locale: locale,\n    onChangeMonth: onHeaderChangeMonthHandler,\n    previousMonthLabel: i18nStrings.previousMonthAriaLabel,\n    nextMonthLabel: i18nStrings.nextMonthAriaLabel,\n    calendarHasFocus: true,\n    isSingleGrid: isSingleGrid\n  }), React.createElement(Grids, {\n    isSingleGrid: isSingleGrid,\n    locale: locale,\n    baseDate: currentMonth,\n    focusedDate: focusedDate,\n    onFocusedDateChange: setFocusedDate,\n    isDateEnabled: isDateEnabled,\n    onSelectDate: onSelectDateHandler,\n    onChangeMonth: setCurrentMonth,\n    startOfWeek: startOfWeek,\n    todayAriaLabel: i18nStrings.todayAriaLabel,\n    selectedStartDate: selectedStartDate,\n    selectedEndDate: selectedEndDate,\n    handleFocusMove: moveFocusHandler\n  })), React.createElement(InternalSpaceBetween, {\n    direction: \"vertical\",\n    size: \"xxs\"\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"xs\",\n    direction: isSingleGrid ? 'vertical' : 'horizontal'\n  }, React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper']\n  }, React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper__date']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.startDateLabel,\n    stretch: true\n  }, React.createElement(DateInput, {\n    value: isoToDisplay(startDateString),\n    autoComplete: false,\n    disableBrowserAutocorrect: true,\n    disableAutocompleteOnBlur: false,\n    className: styles['start-date-input'],\n    onChange: onChangeStartDate,\n    placeholder: \"YYYY/MM/DD\",\n    ariaDescribedby: constrainttextId\n  }))), !dateOnly && React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper__time']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.startTimeLabel,\n    stretch: true\n  }, React.createElement(InternalTimeInput, {\n    value: startTimeString,\n    onChange: function onChange(e) {\n      return setStartTimeString(e.detail.value);\n    },\n    format: timeInputFormat,\n    placeholder: timeInputFormat,\n    className: styles['start-time-input'],\n    ariaDescribedby: constrainttextId\n  })))), React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper']\n  }, React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper__date']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.endDateLabel,\n    stretch: true\n  }, React.createElement(DateInput, {\n    value: isoToDisplay(endDateString),\n    autoComplete: false,\n    disableBrowserAutocorrect: true,\n    disableAutocompleteOnBlur: false,\n    className: styles['end-date-input'],\n    onChange: onChangeEndDate,\n    placeholder: \"YYYY/MM/DD\",\n    ariaDescribedby: constrainttextId\n  }))), !dateOnly && React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper__time']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.endTimeLabel,\n    stretch: true\n  }, React.createElement(InternalTimeInput, {\n    value: endTimeString,\n    onChange: function onChange(e) {\n      return setEndTimeString(e.detail.value);\n    },\n    format: timeInputFormat,\n    placeholder: timeInputFormat,\n    className: styles['end-time-input'],\n    ariaDescribedby: constrainttextId\n  }))))), i18nStrings.dateTimeConstraintText && React.createElement(\"div\", {\n    className: styles['date-and-time-constrainttext'],\n    id: constrainttextId\n  }, i18nStrings.dateTimeConstraintText))), React.createElement(LiveRegion, null, React.createElement(\"span\", {\n    className: styles['calendar-aria-live']\n  }, announcement)));\n}","map":null,"metadata":{},"sourceType":"module"}