{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { InternalButton } from '../button/internal';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport { KeyCode } from '../internal/keycode';\nimport { onPaginationClick, hasHorizontalOverflow, hasLeftOverflow, hasRightOverflow, scrollIntoView } from './scroll-utils';\nimport { isPlainLeftClick } from '../internal/events';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nexport function TabHeaderBar(_a) {\n  var _b, _c, _d;\n\n  var onChange = _a.onChange,\n      activeTabId = _a.activeTabId,\n      tabs = _a.tabs,\n      variant = _a.variant,\n      idNamespace = _a.idNamespace,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby;\n  var focusVisible = useFocusVisible();\n  var headerBarRef = useRef(null);\n  var activeTabHeaderRef = useRef(null);\n  var leftOverflowButton = useRef(null);\n  var isVisualRefresh = useVisualRefresh(headerBarRef);\n\n  var _e = useContainerQuery(function (rect) {\n    return rect.width;\n  }),\n      widthChange = _e[0],\n      containerRef = _e[1];\n\n  var tabRefs = useRef(new Map());\n\n  var _f = useState(false),\n      horizontalOverflow = _f[0],\n      setHorizontalOverflow = _f[1];\n\n  var _g = useState(false),\n      leftOverflow = _g[0],\n      setLeftOverflow = _g[1];\n\n  var _h = useState(false),\n      rightOverflow = _h[0],\n      setRightOverflow = _h[1];\n\n  useEffect(function () {\n    if (headerBarRef.current) {\n      setHorizontalOverflow(hasHorizontalOverflow(headerBarRef.current, leftOverflowButton));\n      setLeftOverflow(hasLeftOverflow(headerBarRef.current));\n      setRightOverflow(hasRightOverflow(headerBarRef.current));\n    }\n  }, [widthChange, tabs]);\n\n  var scrollIntoViewIfPossible = function scrollIntoViewIfPossible(smooth) {\n    if (!activeTabId) {\n      return;\n    }\n\n    var activeTabRef = tabRefs.current.get(activeTabId);\n\n    if (activeTabRef && headerBarRef.current) {\n      scrollIntoView(activeTabRef, headerBarRef.current, smooth);\n    }\n  };\n\n  useEffect(function () {\n    // Delay scrollIntoView as the position is depending on parent elements\n    // (effects are called inside-out in the component tree).\n    // Wait one frame to allow parents to complete it's calculation.\n    requestAnimationFrame(function () {\n      scrollIntoViewIfPossible(false);\n    }); // Non-smooth scrolling should not be called upon activeId change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [horizontalOverflow, widthChange, tabs.length]);\n  useEffect(function () {\n    scrollIntoViewIfPossible(true); // Smooth scrolling should only be called upon activeId change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeTabId]);\n  useEffect(function () {\n    var _a, _b;\n    /*\n     When the selected tab changes and we are currently already focused on a tab,\n     move the focus to the newly selected tab.\n    */\n\n\n    if ((_a = headerBarRef.current) === null || _a === void 0 ? void 0 : _a.contains(document.activeElement)) {\n      if (document.activeElement !== activeTabHeaderRef.current) {\n        (_b = activeTabHeaderRef.current) === null || _b === void 0 ? void 0 : _b.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, [activeTabId]);\n\n  var onScroll = function onScroll() {\n    if (headerBarRef.current) {\n      setLeftOverflow(hasLeftOverflow(headerBarRef.current));\n      setRightOverflow(hasRightOverflow(headerBarRef.current));\n    }\n  };\n\n  var classes = clsx((_b = {}, _b[styles['tabs-header']] = true, _b[styles['tabs-header-with-divider']] = variant === 'default' || isVisualRefresh, _b));\n  var leftButtonClasses = clsx((_c = {}, _c[styles['pagination-button']] = true, _c[styles['pagination-button-left']] = true, _c[styles['pagination-button-left-scrollable']] = leftOverflow, _c));\n  var rightButtonClasses = clsx((_d = {}, _d[styles['pagination-button']] = true, _d[styles['pagination-button-right']] = true, _d[styles['pagination-button-right-scrollable']] = rightOverflow, _d));\n  var paginationButtonAttributes = {\n    'aria-hidden': true,\n    tabIndex: -1\n  };\n  return React.createElement(\"span\", {\n    className: classes,\n    ref: containerRef\n  }, horizontalOverflow && React.createElement(\"span\", {\n    ref: leftOverflowButton,\n    className: leftButtonClasses\n  }, React.createElement(InternalButton, {\n    variant: \"icon\",\n    iconName: \"angle-left\",\n    __nativeAttributes: paginationButtonAttributes,\n    disabled: !leftOverflow,\n    onClick: function onClick() {\n      return onPaginationClick(headerBarRef, -1);\n    }\n  })), React.createElement(\"ul\", {\n    role: \"tablist\",\n    className: styles['tabs-header-list'],\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    ref: headerBarRef,\n    onScroll: onScroll\n  }, tabs.map(renderTabHeader)), horizontalOverflow && React.createElement(\"span\", {\n    className: rightButtonClasses\n  }, React.createElement(InternalButton, {\n    variant: \"icon\",\n    iconName: \"angle-right\",\n    __nativeAttributes: paginationButtonAttributes,\n    disabled: !rightOverflow,\n    onClick: function onClick() {\n      return onPaginationClick(headerBarRef, 1);\n    }\n  })));\n\n  function renderTabHeader(tab) {\n    var _a;\n\n    var enabledTabsWithCurrentTab = tabs.filter(function (tab) {\n      return !tab.disabled || tab.id === activeTabId;\n    });\n\n    var highlightTab = function highlightTab(enabledTabIndex) {\n      var tab = enabledTabsWithCurrentTab[enabledTabIndex];\n\n      if (tab.id === activeTabId) {\n        return;\n      }\n\n      onChange({\n        activeTabId: tab.id,\n        activeTabHref: tab.href\n      });\n    };\n\n    var handleKeyDown = function handleKeyDown(event) {\n      var keyCode = event.keyCode;\n      var specialKeys = [KeyCode.right, KeyCode.left, KeyCode.end, KeyCode.home, KeyCode.pageUp, KeyCode.pageDown];\n\n      if (specialKeys.indexOf(keyCode) === -1) {\n        return;\n      }\n\n      event.preventDefault();\n      var activeIndex = enabledTabsWithCurrentTab.indexOf(tab);\n\n      switch (keyCode) {\n        case KeyCode.right:\n          if (activeIndex + 1 === enabledTabsWithCurrentTab.length) {\n            highlightTab(0);\n          } else {\n            highlightTab(activeIndex + 1);\n          }\n\n          return;\n\n        case KeyCode.left:\n          if (activeIndex === 0) {\n            highlightTab(enabledTabsWithCurrentTab.length - 1);\n          } else {\n            highlightTab(activeIndex - 1);\n          }\n\n          return;\n\n        case KeyCode.end:\n          highlightTab(enabledTabsWithCurrentTab.length - 1);\n          return;\n\n        case KeyCode.home:\n          highlightTab(0);\n          return;\n\n        case KeyCode.pageDown:\n          if (rightOverflow) {\n            onPaginationClick(headerBarRef, 1);\n          }\n\n          return;\n\n        case KeyCode.pageUp:\n          if (leftOverflow) {\n            onPaginationClick(headerBarRef, -1);\n          }\n\n          return;\n      }\n    };\n\n    var clickTab = function clickTab(event) {\n      if (tab.disabled) {\n        event.preventDefault();\n        return;\n      } // if the primary mouse button is clicked with a modifier key, the browser will handle opening a new tab\n\n\n      var specialKey = !isPlainLeftClick(event);\n\n      if (specialKey && tab.href) {\n        return;\n      }\n\n      event.preventDefault(); // for browsers that do not focus buttons on button click\n\n      if (!tab.href) {\n        var clickedTabRef = tabRefs.current.get(tab.id);\n\n        if (clickedTabRef) {\n          var childElement = clickedTabRef.firstChild;\n\n          if (childElement && childElement !== document.activeElement) {\n            childElement.focus({\n              preventScroll: true\n            });\n          }\n        }\n      }\n\n      if (tab.id === activeTabId) {\n        return;\n      }\n\n      onChange({\n        activeTabId: tab.id,\n        activeTabHref: tab.href\n      });\n    };\n\n    var classes = clsx((_a = {}, _a[styles['tabs-tab-link']] = true, _a[styles.refresh] = isVisualRefresh, _a[styles['tabs-tab-active']] = activeTabId === tab.id && !tab.disabled, _a[styles['tabs-tab-disabled']] = tab.disabled, _a));\n\n    var commonProps = __assign(__assign({\n      className: classes\n    }, focusVisible), {\n      role: 'tab',\n      'aria-selected': tab.id === activeTabId,\n      'aria-controls': \"\".concat(idNamespace, \"-\").concat(tab.id, \"-panel\"),\n      'data-testid': tab.id,\n      children: React.createElement(\"span\", {\n        className: styles['tabs-tab-label']\n      }, tab.label)\n    });\n\n    if (tab.disabled) {\n      commonProps['aria-disabled'] = 'true';\n    } else {\n      commonProps.onClick = clickTab;\n    }\n\n    if (tab.id === activeTabId) {\n      commonProps.ref = activeTabHeaderRef;\n      commonProps.tabIndex = 0;\n\n      commonProps.onKeyDown = function (event) {\n        return handleKeyDown(event);\n      };\n    } else {\n      commonProps.tabIndex = -1;\n    }\n\n    var trigger = null;\n\n    if (tab.href) {\n      var anchorProps = commonProps;\n      anchorProps.href = tab.href;\n      trigger = React.createElement(\"a\", __assign({}, anchorProps));\n    } else {\n      var buttonProps = commonProps;\n      buttonProps.type = 'button';\n\n      if (tab.disabled) {\n        buttonProps.disabled = true;\n      }\n\n      trigger = React.createElement(\"button\", __assign({}, buttonProps));\n    }\n\n    return React.createElement(\"li\", {\n      ref: function ref(element) {\n        return tabRefs.current.set(tab.id, element);\n      },\n      className: styles['tabs-tab'],\n      role: \"presentation\",\n      key: tab.id\n    }, trigger);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}