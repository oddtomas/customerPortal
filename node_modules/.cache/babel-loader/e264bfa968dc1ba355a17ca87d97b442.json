{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport ResizeHandler from './icons/resize-handler';\nimport PreferencesModal from './preferences-modal';\nimport { useMouseEvents } from './utils/use-mouse-events';\nimport { useKeyboardEvents } from './utils/use-keyboard-events';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { getLimitedValue } from './utils/size-utils';\nimport { Transition } from '../internal/components/transition';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\nvar MIN_HEIGHT = 160;\nvar MIN_WIDTH = 280;\n\nvar TransitionContentSide = function TransitionContentSide(_a) {\n  var _b, _c;\n\n  var baseProps = _a.baseProps,\n      isOpen = _a.isOpen,\n      splitPanelRef = _a.splitPanelRef,\n      topOffset = _a.topOffset,\n      bottomOffset = _a.bottomOffset,\n      cappedSize = _a.cappedSize,\n      isRefresh = _a.isRefresh,\n      onToggle = _a.onToggle,\n      i18nStrings = _a.i18nStrings,\n      relativeSize = _a.relativeSize,\n      onKeyDown = _a.onKeyDown,\n      onSliderMouseDown = _a.onSliderMouseDown,\n      focusVisible = _a.focusVisible,\n      toggleRef = _a.toggleRef,\n      paneHeader = _a.paneHeader,\n      wrappedChildren = _a.wrappedChildren;\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.drawer, styles.root, styles['position-side'], (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b)),\n    ref: splitPanelRef\n  }), React.createElement(\"aside\", {\n    style: {\n      top: topOffset,\n      bottom: bottomOffset,\n      width: isOpen ? cappedSize : undefined,\n      maxWidth: isRefresh ? '100%' : undefined\n    },\n    className: clsx(styles['drawer-content-side'], (_c = {}, _c[styles.refresh] = isRefresh, _c)),\n    onClick: function onClick() {\n      return !isOpen && onToggle();\n    }\n  }, isOpen ? React.createElement(\"div\", {\n    className: styles['slider-wrapper-side']\n  }, React.createElement(\"div\", __assign({\n    role: \"slider\",\n    tabIndex: 0,\n    \"aria-label\": i18nStrings.resizeHandleAriaLabel,\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": relativeSize,\n    className: clsx(styles.slider, styles['slider-side']),\n    onKeyDown: onKeyDown,\n    onMouseDown: onSliderMouseDown\n  }, focusVisible), React.createElement(ResizeHandler, {\n    className: clsx(styles['slider-icon'], styles['slider-icon-side'])\n  }))) : React.createElement(InternalButton, {\n    className: clsx(styles['open-button'], styles['open-button-side']),\n    iconName: \"angle-left\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: i18nStrings.openButtonAriaLabel,\n    ref: isRefresh ? null : toggleRef\n  }), React.createElement(\"div\", {\n    className: styles['content-side'],\n    \"aria-hidden\": !isOpen\n  }, React.createElement(\"div\", {\n    className: clsx(styles['pane-header-wrapper-side'])\n  }, paneHeader), React.createElement(\"hr\", {\n    className: styles['header-divider']\n  }), React.createElement(\"div\", {\n    className: clsx(styles['pane-content-wrapper-side'])\n  }, wrappedChildren))));\n};\n\nvar TransitionContentBottom = function TransitionContentBottom(_a) {\n  var _b, _c;\n\n  var baseProps = _a.baseProps,\n      isOpen = _a.isOpen,\n      splitPanelRef = _a.splitPanelRef,\n      bottomOffset = _a.bottomOffset,\n      cappedSize = _a.cappedSize,\n      isRefresh = _a.isRefresh,\n      onToggle = _a.onToggle,\n      i18nStrings = _a.i18nStrings,\n      relativeSize = _a.relativeSize,\n      onKeyDown = _a.onKeyDown,\n      onSliderMouseDown = _a.onSliderMouseDown,\n      focusVisible = _a.focusVisible,\n      paneHeader = _a.paneHeader,\n      wrappedChildren = _a.wrappedChildren,\n      isMobile = _a.isMobile,\n      disableContentPaddings = _a.disableContentPaddings,\n      state = _a.state,\n      leftOffset = _a.leftOffset,\n      rightOffset = _a.rightOffset,\n      transitioningElementRef = _a.transitioningElementRef,\n      centeredMaxWidthClasses = _a.centeredMaxWidthClasses,\n      splitPanelHeaderRef = _a.splitPanelHeaderRef,\n      appLayoutMaxWidth = _a.appLayoutMaxWidth;\n  var transitionContentBottomRef = useMergeRefs(splitPanelRef || null, transitioningElementRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, styles.drawer, styles['position-bottom'], (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b[styles['drawer-mobile']] = isMobile, _b[styles['drawer-disable-content-paddings']] = disableContentPaddings, _b[styles.animating] = isRefresh && (state === 'entering' || state === 'exiting'), _b[styles.refresh] = isRefresh, _b)),\n    onClick: function onClick() {\n      return !isOpen && onToggle();\n    },\n    style: {\n      bottom: bottomOffset,\n      left: leftOffset,\n      right: rightOffset,\n      height: isOpen ? cappedSize : undefined\n    },\n    ref: transitionContentBottomRef\n  }), isOpen && React.createElement(\"div\", {\n    className: styles['slider-wrapper-bottom']\n  }, React.createElement(\"div\", __assign({\n    role: \"slider\",\n    tabIndex: 0,\n    \"aria-label\": i18nStrings.resizeHandleAriaLabel,\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": relativeSize,\n    className: clsx(styles.slider, styles['slider-bottom']),\n    onKeyDown: onKeyDown,\n    onMouseDown: onSliderMouseDown\n  }, focusVisible), React.createElement(ResizeHandler, {\n    className: clsx(styles['slider-icon'], styles['slider-icon-bottom'])\n  }))), React.createElement(\"div\", {\n    className: styles['drawer-content-bottom']\n  }, React.createElement(\"div\", {\n    className: clsx(styles['pane-header-wrapper-bottom'], centeredMaxWidthClasses),\n    ref: splitPanelHeaderRef\n  }, paneHeader), React.createElement(\"div\", {\n    className: clsx(styles['content-bottom'], centeredMaxWidthClasses),\n    \"aria-hidden\": !isOpen\n  }, React.createElement(\"div\", {\n    className: clsx((_c = {}, _c[styles['content-bottom-max-width']] = isRefresh, _c)),\n    style: appLayoutMaxWidth\n  }, wrappedChildren))));\n};\n\nexport default function SplitPanel(_a) {\n  var _b;\n\n  var header = _a.header,\n      children = _a.children,\n      _c = _a.hidePreferencesButton,\n      hidePreferencesButton = _c === void 0 ? false : _c,\n      i18nStrings = _a.i18nStrings,\n      restProps = __rest(_a, [\"header\", \"children\", \"hidePreferencesButton\", \"i18nStrings\"]);\n\n  var __internalRootRef = useBaseComponent('SplitPanel').__internalRootRef;\n\n  var _d = useSplitPanelContext(),\n      size = _d.size,\n      getMaxWidth = _d.getMaxWidth,\n      getMaxHeight = _d.getMaxHeight,\n      position = _d.position,\n      topOffset = _d.topOffset,\n      bottomOffset = _d.bottomOffset,\n      leftOffset = _d.leftOffset,\n      rightOffset = _d.rightOffset,\n      disableContentPaddings = _d.disableContentPaddings,\n      contentWidthStyles = _d.contentWidthStyles,\n      contentWrapperPaddings = _d.contentWrapperPaddings,\n      isCopy = _d.isCopy,\n      isOpen = _d.isOpen,\n      isMobile = _d.isMobile,\n      isRefresh = _d.isRefresh,\n      isForcedPosition = _d.isForcedPosition,\n      splitPanelRef = _d.splitPanelRef,\n      splitPanelHeaderRef = _d.splitPanelHeaderRef,\n      lastInteraction = _d.lastInteraction,\n      onPreferencesChange = _d.onPreferencesChange,\n      onResize = _d.onResize,\n      onToggle = _d.onToggle,\n      reportSize = _d.reportSize,\n      setOpenButtonAriaLabel = _d.setOpenButtonAriaLabel;\n\n  var baseProps = getBaseProps(restProps);\n  var focusVisible = useFocusVisible();\n\n  var _e = useState(false),\n      isPreferencesOpen = _e[0],\n      setPreferencesOpen = _e[1];\n\n  var _f = useState(0),\n      relativeSize = _f[0],\n      setRelativeSize = _f[1];\n\n  var _g = useState(size),\n      maxSize = _g[0],\n      setMaxSize = _g[1];\n\n  var minSize = position === 'bottom' ? MIN_HEIGHT : MIN_WIDTH;\n  var cappedSize = getLimitedValue(minSize, size, maxSize);\n  var appLayoutMaxWidth = isRefresh && position === 'bottom' ? contentWidthStyles : undefined;\n  useEffect(function () {\n    setOpenButtonAriaLabel === null || setOpenButtonAriaLabel === void 0 ? void 0 : setOpenButtonAriaLabel(i18nStrings.openButtonAriaLabel);\n  }, [setOpenButtonAriaLabel, i18nStrings.openButtonAriaLabel]);\n  useEffect(function () {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    var handle = requestAnimationFrame(function () {\n      var maxSize = position === 'bottom' ? getMaxHeight() : getMaxWidth();\n      setRelativeSize(size / maxSize * 100);\n      setMaxSize(maxSize);\n    });\n    return function () {\n      return cancelAnimationFrame(handle);\n    };\n  }, [size, position, getMaxHeight, getMaxWidth]);\n  useEffect(function () {\n    reportSize(cappedSize);\n  }, [reportSize, cappedSize]);\n  useEffect(function () {\n    var handler = function handler() {\n      return setMaxSize(position === 'bottom' ? getMaxHeight() : getMaxWidth());\n    };\n\n    window.addEventListener('resize', handler);\n    return function () {\n      return window.removeEventListener('resize', handler);\n    };\n  }, [position, getMaxWidth, getMaxHeight]);\n\n  var setSidePanelWidth = function setSidePanelWidth(width) {\n    var maxWidth = getMaxWidth();\n    var size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n\n    if (isOpen && maxWidth >= MIN_WIDTH) {\n      onResize({\n        size: size\n      });\n    }\n  };\n\n  var setBottomPanelHeight = function setBottomPanelHeight(height) {\n    var maxHeight = getMaxHeight();\n    var size = getLimitedValue(MIN_HEIGHT, height, maxHeight);\n\n    if (isOpen && maxHeight >= MIN_HEIGHT) {\n      onResize({\n        size: size\n      });\n    }\n  };\n\n  var splitPanelRefObject = useRef(null);\n  var sizeControlProps = {\n    position: position,\n    splitPanelRef: splitPanelRefObject,\n    setSidePanelWidth: setSidePanelWidth,\n    setBottomPanelHeight: setBottomPanelHeight\n  };\n  var onSliderMouseDown = useMouseEvents(sizeControlProps);\n  var onKeyDown = useKeyboardEvents(sizeControlProps);\n  var toggleRef = useRef(null);\n  var closeRef = useRef(null);\n  var preferencesRef = useRef(null);\n  useEffectOnUpdate(function () {\n    var _a, _b, _c;\n\n    switch (lastInteraction === null || lastInteraction === void 0 ? void 0 : lastInteraction.type) {\n      case 'open':\n        return (_a = closeRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n\n      case 'close':\n        return (_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n\n      case 'position':\n        return (_c = preferencesRef.current) === null || _c === void 0 ? void 0 : _c.focus();\n\n      default:\n        return;\n    }\n  }, [lastInteraction]);\n  var wrappedChildren = React.createElement(AppLayoutContext.Provider, {\n    value: {\n      stickyOffsetTop: topOffset,\n      stickyOffsetBottom: bottomOffset\n    }\n  }, children);\n  var paneHeader = React.createElement(\"div\", {\n    className: styles.header,\n    style: appLayoutMaxWidth\n  }, React.createElement(\"h2\", {\n    className: styles['header-text']\n  }, header), React.createElement(\"div\", {\n    className: styles['header-actions']\n  }, !hidePreferencesButton && isOpen && React.createElement(React.Fragment, null, React.createElement(InternalButton, {\n    className: styles['preferences-button'],\n    iconName: \"settings\",\n    variant: \"icon\",\n    onClick: function onClick() {\n      return setPreferencesOpen(true);\n    },\n    formAction: \"none\",\n    ariaLabel: i18nStrings.preferencesTitle,\n    ref: preferencesRef\n  }), React.createElement(\"span\", {\n    className: styles.divider\n  })), isOpen ? React.createElement(InternalButton, {\n    className: styles['close-button'],\n    iconName: isRefresh && position === 'side' ? 'angle-right' : isRefresh ? 'angle-down' : 'close',\n    variant: \"icon\",\n    onClick: onToggle,\n    formAction: \"none\",\n    ariaLabel: i18nStrings.closeButtonAriaLabel,\n    ref: closeRef\n  }) : position === 'side' ? null : React.createElement(InternalButton, {\n    className: styles['open-button'],\n    iconName: \"angle-up\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: i18nStrings.openButtonAriaLabel,\n    ref: toggleRef\n  })));\n  /*\n    This effect forces the browser to recalculate the layout\n    whenever the split panel might have moved.\n       This is needed as a workaround for a bug in Safari, which does\n    not automatically calculate the new position of the split panel\n    _content_ when the split panel moves.\n  */\n\n  useLayoutEffect(function () {\n    var root = __internalRootRef.current;\n\n    if (root) {\n      var property = 'transform';\n      var temporaryValue = 'translateZ(0)';\n      var valueBefore = root.style[property];\n      root.style[property] = temporaryValue; // This line forces the browser to recalculate the layout\n\n      void root.offsetHeight;\n      root.style[property] = valueBefore;\n    }\n  }, [rightOffset, __internalRootRef]);\n  var mergedRef = useMergeRefs(splitPanelRef, splitPanelRefObject, __internalRootRef);\n  /**\n   * The AppLayout factor moved the circular buttons out of the\n   * SplitPanel and into the Tools component. This conditional\n   * is still needed for the early return to prevent execution\n   * of the following code.\n   */\n\n  if (isRefresh && (!isOpen || isCopy) && position === 'side') {\n    return React.createElement(React.Fragment, null);\n  }\n\n  var centeredMaxWidthClasses = clsx((_b = {}, _b[styles['pane-bottom-center-align']] = isRefresh, _b[styles['pane-bottom-content-nav-padding']] = contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedNav, _b[styles['pane-bottom-content-tools-padding']] = contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedTools, _b));\n  return React.createElement(Transition, {\n    \"in\": isOpen !== null && isOpen !== void 0 ? isOpen : false\n  }, function (state, transitioningElementRef) {\n    return React.createElement(React.Fragment, null, position === 'side' && React.createElement(TransitionContentSide, {\n      baseProps: baseProps,\n      isOpen: isOpen,\n      splitPanelRef: mergedRef,\n      topOffset: topOffset,\n      bottomOffset: bottomOffset,\n      cappedSize: cappedSize,\n      isRefresh: isRefresh,\n      onToggle: onToggle,\n      i18nStrings: i18nStrings,\n      relativeSize: relativeSize,\n      onKeyDown: onKeyDown,\n      onSliderMouseDown: onSliderMouseDown,\n      focusVisible: focusVisible,\n      toggleRef: toggleRef,\n      paneHeader: paneHeader,\n      wrappedChildren: wrappedChildren\n    }), position === 'bottom' && React.createElement(TransitionContentBottom, {\n      baseProps: baseProps,\n      isOpen: isOpen,\n      splitPanelRef: mergedRef,\n      bottomOffset: bottomOffset,\n      cappedSize: cappedSize,\n      isRefresh: isRefresh,\n      onToggle: onToggle,\n      i18nStrings: i18nStrings,\n      relativeSize: relativeSize,\n      onKeyDown: onKeyDown,\n      onSliderMouseDown: onSliderMouseDown,\n      focusVisible: focusVisible,\n      paneHeader: paneHeader,\n      wrappedChildren: wrappedChildren,\n      isMobile: isMobile,\n      disableContentPaddings: disableContentPaddings,\n      state: state,\n      leftOffset: leftOffset,\n      rightOffset: rightOffset,\n      transitioningElementRef: transitioningElementRef,\n      centeredMaxWidthClasses: centeredMaxWidthClasses,\n      splitPanelHeaderRef: splitPanelHeaderRef,\n      appLayoutMaxWidth: appLayoutMaxWidth\n    }), isPreferencesOpen && React.createElement(PreferencesModal, {\n      visible: true,\n      preferences: {\n        position: position\n      },\n      disabledSidePosition: position === 'bottom' && isForcedPosition,\n      isRefresh: isRefresh,\n      i18nStrings: {\n        header: i18nStrings.preferencesTitle,\n        confirm: i18nStrings.preferencesConfirm,\n        cancel: i18nStrings.preferencesCancel,\n        positionLabel: i18nStrings.preferencesPositionLabel,\n        positionDescription: i18nStrings.preferencesPositionDescription,\n        positionBottom: i18nStrings.preferencesPositionBottom,\n        positionSide: i18nStrings.preferencesPositionSide\n      },\n      onConfirm: function onConfirm(preferences) {\n        onPreferencesChange(__assign({}, preferences));\n        setPreferencesOpen(false);\n      },\n      onDismiss: function onDismiss() {\n        setPreferencesOpen(false);\n      }\n    }));\n  });\n}\napplyDisplayName(SplitPanel, 'SplitPanel');","map":null,"metadata":{},"sourceType":"module"}