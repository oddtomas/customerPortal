{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport Dropdown from '../internal/components/dropdown';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\nimport Filter from './parts/filter';\nimport Trigger from './parts/trigger';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { getBaseProps } from '../internal/base-component';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport { useSelect } from './utils/use-select';\nimport { checkOptionValueField } from './utils/check-option-value-field';\nimport { useNativeSearch } from './utils/use-native-search';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useLoadItems } from './utils/use-load-items';\nimport { useAnnouncement } from './utils/use-announcement';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport PlainList from './parts/plain-list';\nimport VirtualList from './parts/virtual-list';\nimport DropdownFooter from '../internal/components/dropdown-footer';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar InternalSelect = React.forwardRef(function (_a, externalRef) {\n  var _b;\n\n  var options = _a.options,\n      _c = _a.filteringType,\n      filteringType = _c === void 0 ? 'none' : _c,\n      filteringPlaceholder = _a.filteringPlaceholder,\n      filteringAriaLabel = _a.filteringAriaLabel,\n      ariaRequired = _a.ariaRequired,\n      placeholder = _a.placeholder,\n      disabled = _a.disabled,\n      ariaLabel = _a.ariaLabel,\n      _d = _a.statusType,\n      statusType = _d === void 0 ? 'finished' : _d,\n      empty = _a.empty,\n      loadingText = _a.loadingText,\n      finishedText = _a.finishedText,\n      errorText = _a.errorText,\n      recoveryText = _a.recoveryText,\n      noMatch = _a.noMatch,\n      _e = _a.triggerVariant,\n      triggerVariant = _e === void 0 ? 'label' : _e,\n      selectedAriaLabel = _a.selectedAriaLabel,\n      renderHighlightedAriaLive = _a.renderHighlightedAriaLive,\n      selectedOption = _a.selectedOption,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      onLoadItems = _a.onLoadItems,\n      onChange = _a.onChange,\n      virtualScroll = _a.virtualScroll,\n      expandToViewport = _a.expandToViewport,\n      __inFilteringToken = _a.__inFilteringToken,\n      _f = _a.__internalRootRef,\n      __internalRootRef = _f === void 0 ? null : _f,\n      restProps = __rest(_a, [\"options\", \"filteringType\", \"filteringPlaceholder\", \"filteringAriaLabel\", \"ariaRequired\", \"placeholder\", \"disabled\", \"ariaLabel\", \"statusType\", \"empty\", \"loadingText\", \"finishedText\", \"errorText\", \"recoveryText\", \"noMatch\", \"triggerVariant\", \"selectedAriaLabel\", \"renderHighlightedAriaLive\", \"selectedOption\", \"onBlur\", \"onFocus\", \"onLoadItems\", \"onChange\", \"virtualScroll\", \"expandToViewport\", \"__inFilteringToken\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(restProps);\n  var formFieldContext = useFormFieldContext(restProps);\n\n  var _g = useLoadItems({\n    onLoadItems: onLoadItems,\n    options: options,\n    statusType: statusType\n  }),\n      handleLoadMore = _g.handleLoadMore,\n      handleRecoveryClick = _g.handleRecoveryClick,\n      fireLoadItems = _g.fireLoadItems;\n\n  checkControlled('Select', 'selectedOption', selectedOption, 'onChange', onChange);\n  checkOptionValueField('Select', 'options', options);\n\n  var _h = useState(''),\n      filteringValue = _h[0],\n      setFilteringValue = _h[1];\n\n  var _j = prepareOptions(options, filteringType, filteringValue),\n      filteredOptions = _j.filteredOptions,\n      parentMap = _j.parentMap;\n\n  var rootRef = useRef(null);\n  var triggerRef = useRef(null);\n  var selfControlId = useUniqueId('trigger');\n  var controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;\n  var scrollToIndex = useRef(null);\n\n  var _k = useSelect({\n    selectedOptions: selectedOption ? [selectedOption] : [],\n    updateSelectedOption: function updateSelectedOption(option) {\n      return fireNonCancelableEvent(onChange, {\n        selectedOption: option\n      });\n    },\n    options: filteredOptions,\n    filteringType: filteringType,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    externalRef: externalRef,\n    fireLoadItems: fireLoadItems,\n    setFilteringValue: setFilteringValue\n  }),\n      isOpen = _k.isOpen,\n      highlightedOption = _k.highlightedOption,\n      highlightedIndex = _k.highlightedIndex,\n      getTriggerProps = _k.getTriggerProps,\n      getFilterProps = _k.getFilterProps,\n      getMenuProps = _k.getMenuProps,\n      getOptionProps = _k.getOptionProps,\n      isKeyboard = _k.isKeyboard,\n      highlightOption = _k.highlightOption,\n      selectOption = _k.selectOption,\n      announceSelected = _k.announceSelected;\n\n  var handleNativeSearch = useNativeSearch({\n    isEnabled: filteringType === 'none',\n    options: filteredOptions,\n    highlightOption: !isOpen ? selectOption : highlightOption,\n    highlightedOption: !isOpen ? selectedOption : highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option,\n    isKeyboard: isKeyboard\n  });\n  useEffect(function () {\n    var _a;\n\n    (_a = scrollToIndex.current) === null || _a === void 0 ? void 0 : _a.call(scrollToIndex, highlightedIndex);\n  }, [highlightedIndex]);\n  var filter = React.createElement(Filter, __assign({\n    filteringType: filteringType,\n    placeholder: filteringPlaceholder,\n    ariaLabel: filteringAriaLabel,\n    ariaRequired: ariaRequired,\n    value: filteringValue\n  }, getFilterProps()));\n  var trigger = React.createElement(Trigger, __assign({\n    ref: triggerRef,\n    placeholder: placeholder,\n    disabled: disabled,\n    ariaLabel: ariaLabel,\n    triggerVariant: triggerVariant,\n    triggerProps: getTriggerProps(disabled),\n    selectedOption: selectedOption,\n    isOpen: isOpen,\n    inFilteringToken: __inFilteringToken\n  }, formFieldContext, {\n    controlId: controlId\n  }));\n\n  var menuProps = __assign(__assign({}, getMenuProps()), {\n    onLoadMore: handleLoadMore,\n    ariaLabelledby: controlId\n  });\n\n  var isEmpty = !options || options.length === 0;\n  var isNoMatch = filteredOptions && filteredOptions.length === 0;\n  var dropdownStatus = useDropdownStatus({\n    statusType: statusType,\n    empty: empty,\n    loadingText: loadingText,\n    finishedText: finishedText,\n    errorText: errorText,\n    recoveryText: recoveryText,\n    isEmpty: isEmpty,\n    isNoMatch: isNoMatch,\n    noMatch: noMatch,\n    onRecoveryClick: handleRecoveryClick\n  });\n  var announcement = useAnnouncement({\n    announceSelected: announceSelected,\n    highlightedOption: highlightedOption,\n    getParent: function getParent(option) {\n      var _a;\n\n      return (_a = parentMap.get(option)) === null || _a === void 0 ? void 0 : _a.option;\n    },\n    selectedAriaLabel: selectedAriaLabel,\n    renderHighlightedAriaLive: renderHighlightedAriaLive\n  });\n  var ListComponent = virtualScroll ? VirtualList : PlainList;\n\n  var handleMouseDown = function handleMouseDown(event) {\n    var target = event.target;\n\n    if (target !== document.activeElement) {\n      // prevent currently focused element from losing it\n      event.preventDefault();\n    }\n  };\n\n  var mergedRef = useMergeRefs(rootRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(styles.root, baseProps.className),\n    onKeyPress: handleNativeSearch\n  }), React.createElement(Dropdown, {\n    open: isOpen,\n    stretchTriggerHeight: __inFilteringToken,\n    trigger: trigger,\n    header: filter,\n    onMouseDown: handleMouseDown,\n    footer: dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: dropdownStatus.content\n    }) : null,\n    expandToViewport: expandToViewport\n  }, React.createElement(ListComponent, {\n    listBottom: !dropdownStatus.isSticky ? React.createElement(DropdownFooter, {\n      content: dropdownStatus.content\n    }) : null,\n    menuProps: menuProps,\n    getOptionProps: getOptionProps,\n    filteredOptions: filteredOptions,\n    filteringValue: filteringValue,\n    isKeyboard: isKeyboard.current,\n    ref: scrollToIndex,\n    hasDropdownStatus: dropdownStatus.content !== null,\n    screenReaderContent: announcement\n  })));\n});\nexport default InternalSelect;","map":null,"metadata":{},"sourceType":"module"}