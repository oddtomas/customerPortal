{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport InternalLink from '../link/internal';\nimport InternalBox from '../box/internal';\nimport styles from './styles.css.js';\nvar Statuses;\n\n(function (Statuses) {\n  Statuses[\"Active\"] = \"active\";\n  Statuses[\"Unvisited\"] = \"unvisited\";\n  Statuses[\"Visited\"] = \"visited\";\n  Statuses[\"Next\"] = \"next\";\n})(Statuses || (Statuses = {}));\n\nexport default function Navigation(_a) {\n  var activeStepIndex = _a.activeStepIndex,\n      farthestStepIndex = _a.farthestStepIndex,\n      allowSkipTo = _a.allowSkipTo,\n      hidden = _a.hidden,\n      i18nStrings = _a.i18nStrings,\n      isVisualRefresh = _a.isVisualRefresh,\n      isLoadingNextStep = _a.isLoadingNextStep,\n      onStepClick = _a.onStepClick,\n      onSkipToClick = _a.onSkipToClick,\n      steps = _a.steps;\n  return React.createElement(\"nav\", {\n    className: clsx(styles.navigation, hidden && styles.hidden, isVisualRefresh && styles.refresh)\n  }, React.createElement(\"ul\", null, steps.map(function (step, index) {\n    return isVisualRefresh ? React.createElement(NavigationStepVisualRefresh, {\n      i18nStrings: i18nStrings,\n      index: index,\n      key: index,\n      onStepClick: onStepClick,\n      onSkipToClick: onSkipToClick,\n      status: getStatus(index),\n      step: step\n    }) : React.createElement(NavigationStepClassic, {\n      i18nStrings: i18nStrings,\n      index: index,\n      key: index,\n      onStepClick: onStepClick,\n      onSkipToClick: onSkipToClick,\n      status: getStatus(index),\n      step: step\n    });\n  })));\n\n  function getStatus(index) {\n    if (activeStepIndex === index) {\n      return Statuses.Active;\n    }\n\n    if (isLoadingNextStep) {\n      return Statuses.Unvisited;\n    }\n\n    if (farthestStepIndex >= index) {\n      return Statuses.Visited;\n    }\n\n    if (allowSkipTo && canSkip(activeStepIndex + 1, index)) {\n      return Statuses.Next;\n    }\n\n    return Statuses.Unvisited;\n  }\n\n  function canSkip(fromIndex, toIndex) {\n    var index = fromIndex;\n\n    do {\n      if (!steps[index].isOptional) {\n        return false;\n      }\n\n      index++;\n    } while (index < toIndex);\n\n    return true;\n  }\n}\n\nfunction NavigationStepVisualRefresh(_a) {\n  var _b;\n\n  var i18nStrings = _a.i18nStrings,\n      index = _a.index,\n      onStepClick = _a.onStepClick,\n      onSkipToClick = _a.onSkipToClick,\n      status = _a.status,\n      step = _a.step;\n\n  function handleStepInteraction() {\n    if (status === Statuses.Visited) {\n      onStepClick(index);\n    }\n\n    if (status === Statuses.Next) {\n      onSkipToClick(index);\n    }\n  }\n\n  var state = {\n    active: 'active',\n    unvisited: 'disabled',\n    visited: 'enabled',\n    next: 'enabled'\n  }[status];\n  var linkClassName = clsx(styles['navigation-link'], (_b = {}, _b[styles['navigation-link-active']] = status === Statuses.Active, _b[styles['navigation-link-disabled']] = status === Statuses.Unvisited, _b));\n  return React.createElement(\"li\", {\n    className: clsx(styles[\"\".concat(state)], styles['navigation-link-item'])\n  }, React.createElement(\"hr\", null), React.createElement(\"span\", {\n    className: clsx(styles.number, styles['navigation-link-label'])\n  }, i18nStrings.stepNumberLabel && i18nStrings.stepNumberLabel(index + 1), step.isOptional && React.createElement(\"i\", null, \" - \".concat(i18nStrings.optional))), React.createElement(\"a\", {\n    className: linkClassName,\n    \"aria-current\": status === Statuses.Active ? 'step' : undefined,\n    \"aria-disabled\": status === Statuses.Unvisited ? 'true' : undefined,\n    onClick: function onClick(event) {\n      event.preventDefault();\n      handleStepInteraction();\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (event.key === ' ' || event.key === 'Enter') {\n        event.preventDefault();\n      } // Enter activates the button on key down instead of key up.\n\n\n      if (event.key === 'Enter') {\n        handleStepInteraction();\n      }\n    },\n    onKeyUp: function onKeyUp(event) {\n      // Emulate button behavior, which also fires on space.\n      if (event.key === ' ') {\n        handleStepInteraction();\n      }\n    },\n    role: \"button\",\n    tabIndex: status === Statuses.Visited || status === Statuses.Next ? 0 : undefined\n  }, React.createElement(\"div\", {\n    className: clsx(styles.circle)\n  }), React.createElement(\"span\", {\n    className: clsx(styles.title)\n  }, step.title)));\n}\n\nfunction NavigationStepClassic(_a) {\n  var i18nStrings = _a.i18nStrings,\n      index = _a.index,\n      onStepClick = _a.onStepClick,\n      onSkipToClick = _a.onSkipToClick,\n      status = _a.status,\n      step = _a.step;\n  var spanClassName = clsx(styles['navigation-link'], status === Statuses.Active ? styles['navigation-link-active'] : styles['navigation-link-disabled']);\n  return React.createElement(\"li\", {\n    className: styles['navigation-link-item']\n  }, React.createElement(InternalBox, {\n    variant: \"small\",\n    className: styles['navigation-link-label'],\n    display: \"block\",\n    margin: {\n      bottom: 'xxs'\n    }\n  }, i18nStrings.stepNumberLabel && i18nStrings.stepNumberLabel(index + 1), step.isOptional && React.createElement(\"i\", null, \" - \".concat(i18nStrings.optional))), React.createElement(\"div\", null, status === Statuses.Visited || status === Statuses.Next ? React.createElement(InternalLink, {\n    className: clsx(styles['navigation-link']),\n    onFollow: function onFollow(evt) {\n      evt.preventDefault();\n      status === Statuses.Visited ? onStepClick(index) : onSkipToClick(index);\n    }\n  }, step.title) : React.createElement(\"span\", {\n    className: spanClassName,\n    \"aria-current\": status === Statuses.Active ? 'step' : undefined,\n    \"aria-disabled\": status === Statuses.Active ? undefined : 'true'\n  }, step.title)));\n}","map":null,"metadata":{},"sourceType":"module"}