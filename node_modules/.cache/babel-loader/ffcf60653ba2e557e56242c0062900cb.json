{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport InternalForm from '../form/internal';\nimport InternalHeader from '../header/internal';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport WizardActions from './wizard-actions';\nimport WizardFormHeader from './wizard-form-header';\nimport styles from './styles.css.js';\nexport default function WizardForm(_a) {\n  var steps = _a.steps,\n      activeStepIndex = _a.activeStepIndex,\n      isVisualRefresh = _a.isVisualRefresh,\n      showCollapsedSteps = _a.showCollapsedSteps,\n      i18nStrings = _a.i18nStrings,\n      isPrimaryLoading = _a.isPrimaryLoading,\n      allowSkipTo = _a.allowSkipTo,\n      secondaryActions = _a.secondaryActions,\n      onCancelClick = _a.onCancelClick,\n      onPreviousClick = _a.onPreviousClick,\n      onPrimaryClick = _a.onPrimaryClick,\n      _onSkipToClick = _a.onSkipToClick;\n\n  var _b = steps[activeStepIndex] || {},\n      title = _b.title,\n      info = _b.info,\n      description = _b.description,\n      content = _b.content,\n      errorText = _b.errorText,\n      isOptional = _b.isOptional;\n\n  var isLastStep = activeStepIndex >= steps.length - 1;\n  var skipToTargetIndex = findSkipToTargetIndex(steps, activeStepIndex);\n  var isMobile = useMobile();\n  var showSkipTo = allowSkipTo && skipToTargetIndex !== -1;\n  var skipToButtonText = skipToTargetIndex !== -1 && i18nStrings.skipToButtonLabel ? i18nStrings.skipToButtonLabel(steps[skipToTargetIndex], skipToTargetIndex + 1) : undefined;\n  return React.createElement(React.Fragment, null, React.createElement(WizardFormHeader, {\n    isMobile: isMobile || showCollapsedSteps,\n    isVisualRefresh: isVisualRefresh\n  }, React.createElement(\"div\", {\n    className: clsx(styles['collapsed-steps'], !showCollapsedSteps && styles['collapsed-steps-hidden'], isVisualRefresh && isMobile && styles['collapsed-steps-extra-padding'])\n  }, i18nStrings.collapsedStepsLabel(activeStepIndex + 1, steps.length)), React.createElement(InternalHeader, {\n    className: styles['form-header-component'],\n    variant: \"h1\",\n    description: description,\n    info: info\n  }, title, isOptional && React.createElement(\"i\", null, \" - \".concat(i18nStrings.optional)))), React.createElement(InternalForm, {\n    className: clsx(styles['form-component']),\n    actions: React.createElement(WizardActions, {\n      cancelButtonText: i18nStrings.cancelButton,\n      primaryButtonText: isLastStep ? i18nStrings.submitButton : i18nStrings.nextButton,\n      previousButtonText: i18nStrings.previousButton,\n      onCancelClick: onCancelClick,\n      onPreviousClick: onPreviousClick,\n      onPrimaryClick: onPrimaryClick,\n      onSkipToClick: function onSkipToClick() {\n        return _onSkipToClick(skipToTargetIndex);\n      },\n      showPrevious: activeStepIndex !== 0,\n      isPrimaryLoading: isPrimaryLoading,\n      showSkipTo: showSkipTo,\n      skipToButtonText: skipToButtonText\n    }),\n    secondaryActions: secondaryActions,\n    errorText: errorText\n  }, content));\n}\n\nfunction findSkipToTargetIndex(steps, activeStepIndex) {\n  var nextRequiredStepIndex = activeStepIndex;\n\n  do {\n    nextRequiredStepIndex++;\n  } while (nextRequiredStepIndex < steps.length - 1 && steps[nextRequiredStepIndex].isOptional);\n\n  return nextRequiredStepIndex > activeStepIndex + 1 ? nextRequiredStepIndex : -1;\n}","map":null,"metadata":{},"sourceType":"module"}