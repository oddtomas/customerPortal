{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { FormFieldContext, useFormFieldContext } from '../internal/context/form-field-context';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport InternalGrid from '../grid/internal';\nimport InternalIcon from '../icon/internal';\nimport { getAriaDescribedBy, getGridDefinition, getSlotIds } from './util';\nimport styles from './styles.css.js';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { joinStrings } from '../internal/utils/strings';\nexport var FormFieldError = function FormFieldError(_a) {\n  var id = _a.id,\n      children = _a.children;\n  return React.createElement(\"div\", {\n    className: styles.error\n  }, React.createElement(\"div\", {\n    className: styles['error-icon-shake-wrapper']\n  }, React.createElement(\"div\", {\n    className: styles['error-icon-scale-wrapper']\n  }, React.createElement(InternalIcon, {\n    name: \"status-warning\",\n    size: \"small\"\n  }))), React.createElement(\"span\", {\n    id: id,\n    className: styles.error__message\n  }, children));\n};\nexport default function InternalFormField(_a) {\n  var controlId = _a.controlId,\n      _b = _a.stretch,\n      stretch = _b === void 0 ? false : _b,\n      label = _a.label,\n      info = _a.info,\n      children = _a.children,\n      secondaryControl = _a.secondaryControl,\n      description = _a.description,\n      constraintText = _a.constraintText,\n      errorText = _a.errorText,\n      __hideLabel = _a.__hideLabel,\n      _c = _a.__internalRootRef,\n      __internalRootRef = _c === void 0 ? null : _c,\n      rest = __rest(_a, [\"controlId\", \"stretch\", \"label\", \"info\", \"children\", \"secondaryControl\", \"description\", \"constraintText\", \"errorText\", \"__hideLabel\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(rest);\n  var ref = useRef(null);\n  var isRefresh = useVisualRefresh(ref);\n  var instanceUniqueId = useUniqueId('formField');\n  var generatedControlId = controlId || instanceUniqueId;\n  var formFieldId = controlId || generatedControlId;\n  var slotIds = getSlotIds(formFieldId, label, description, constraintText, errorText);\n  var ariaDescribedBy = getAriaDescribedBy(slotIds);\n  var gridDefinition = getGridDefinition(stretch, !!secondaryControl, isRefresh);\n\n  var _d = useFormFieldContext({}),\n      parentAriaLabelledby = _d.ariaLabelledby,\n      parentAriaDescribedby = _d.ariaDescribedby,\n      parentInvalid = _d.invalid;\n\n  var contextValuesWithoutControlId = {\n    ariaLabelledby: joinStrings(parentAriaLabelledby, slotIds.label) || undefined,\n    ariaDescribedby: joinStrings(parentAriaDescribedby, ariaDescribedBy) || undefined,\n    invalid: !!errorText || !!parentInvalid\n  };\n  var mergedRef = useMergeRefs(ref, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef\n  }), React.createElement(\"div\", {\n    className: clsx(__hideLabel && styles['visually-hidden'])\n  }, label && React.createElement(\"label\", {\n    className: styles.label,\n    id: slotIds.label,\n    htmlFor: generatedControlId\n  }, label), !__hideLabel && info && React.createElement(\"span\", {\n    className: styles.info\n  }, info)), description && React.createElement(\"div\", {\n    className: styles.description,\n    id: slotIds.description\n  }, description), React.createElement(\"div\", {\n    className: clsx(styles.controls, __hideLabel && styles['label-hidden'])\n  }, React.createElement(InternalGrid, {\n    gridDefinition: gridDefinition\n  }, React.createElement(FormFieldContext.Provider, {\n    value: __assign({\n      controlId: generatedControlId\n    }, contextValuesWithoutControlId)\n  }, children && React.createElement(\"div\", {\n    className: styles.control\n  }, children)), secondaryControl && React.createElement(FormFieldContext.Provider, {\n    value: contextValuesWithoutControlId\n  }, React.createElement(\"div\", {\n    className: styles['secondary-control']\n  }, secondaryControl)))), (constraintText || errorText) && React.createElement(\"div\", {\n    className: styles.hints\n  }, errorText && React.createElement(FormFieldError, {\n    id: slotIds.error\n  }, errorText), constraintText && React.createElement(\"div\", {\n    className: clsx(styles.constraint, errorText && styles['constraint-has-error']),\n    id: slotIds.constraint\n  }, constraintText)));\n}","map":null,"metadata":{},"sourceType":"module"}