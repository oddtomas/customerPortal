{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState, useRef } from 'react';\nimport clsx from 'clsx';\nimport InternalSelect from '../select/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalAutosuggest from '../autosuggest/internal';\nimport InternalPopover from '../popover/internal';\nimport { InternalButton } from '../button/internal';\nimport { useUniqueId } from '../internal/hooks/use-unique-id/index';\nimport styles from './styles.css.js';\nimport { useLoadItems } from './use-load-items';\nimport { getAllowedOperators, getPropertyOptions, getPropertyByKey, operatorToDescription, getPropertySuggestions } from './controller';\n\nvar EditingFields = function EditingFields(_a) {\n  var _b;\n\n  var temporaryToken = _a.temporaryToken,\n      setTemporaryToken = _a.setTemporaryToken,\n      asyncProps = _a.asyncProps,\n      asyncProperties = _a.asyncProperties,\n      filteringProperties = _a.filteringProperties,\n      filteringOptions = _a.filteringOptions,\n      onLoadItems = _a.onLoadItems,\n      customGroupsText = _a.customGroupsText,\n      i18nStrings = _a.i18nStrings,\n      disableFreeTextFiltering = _a.disableFreeTextFiltering;\n  var fields = [];\n  var property = temporaryToken.propertyKey !== undefined ? getPropertyByKey(filteringProperties, temporaryToken.propertyKey) : undefined;\n  var propertySelectHandlers = useLoadItems(onLoadItems);\n  var asyncPropertySelectProps = asyncProperties ? __assign(__assign({}, asyncProps), propertySelectHandlers) : {};\n  var propertyOptions = getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, function (_a) {\n    var propertyLabel = _a.propertyLabel,\n        key = _a.key;\n    return {\n      value: key,\n      label: propertyLabel,\n      dontCloseOnSelect: true\n    };\n  });\n  var allPropertiesOption = {\n    label: i18nStrings.allPropertiesLabel,\n    value: undefined\n  };\n\n  if (!disableFreeTextFiltering) {\n    propertyOptions.unshift(allPropertiesOption);\n  }\n\n  var propertyControlId = useUniqueId('property');\n  var propertySelect = React.createElement(InternalSelect, __assign({\n    controlId: propertyControlId,\n    options: propertyOptions,\n    selectedOption: property ? {\n      value: temporaryToken.propertyKey,\n      label: property.propertyLabel\n    } : allPropertiesOption,\n    onChange: function onChange(e) {\n      var _a;\n\n      var filteringProperty = ((_a = e.detail.selectedOption) === null || _a === void 0 ? void 0 : _a.value) ? filteringProperties.reduce(function (acc, property) {\n        return property.key === e.detail.selectedOption.value ? property : acc;\n      }, undefined) : undefined;\n      var allowedOperators = filteringProperty ? getAllowedOperators(filteringProperty) : freeTextOperators;\n      var operator = temporaryToken.operator;\n\n      if (temporaryToken.operator && allowedOperators.indexOf(temporaryToken.operator) === -1) {\n        operator = allowedOperators[0];\n      }\n\n      setTemporaryToken(__assign(__assign({}, temporaryToken), {\n        operator: operator,\n        propertyKey: e.detail.selectedOption.value\n      }));\n    }\n  }, asyncPropertySelectProps));\n  fields.push({\n    text: i18nStrings.propertyText,\n    className: styles['property-selector'],\n    control: propertySelect,\n    controlId: propertyControlId\n  });\n  var operatorText = temporaryToken.operator;\n  var freeTextOperators = [':', '!:'];\n  var operatorOptions = (property ? getAllowedOperators(property) : freeTextOperators).map(function (operator) {\n    return {\n      value: operator,\n      label: operator,\n      description: operatorToDescription(operator, i18nStrings)\n    };\n  });\n  var operatorControlId = useUniqueId('operator');\n  var operatorSelect = temporaryToken && React.createElement(InternalSelect, {\n    controlId: operatorControlId,\n    options: operatorOptions,\n    triggerVariant: \"option\",\n    selectedOption: operatorText ? {\n      value: operatorText,\n      label: operatorText,\n      description: operatorToDescription(operatorText, i18nStrings)\n    } : null,\n    onChange: function onChange(e) {\n      e.detail.selectedOption.value && setTemporaryToken(__assign(__assign({}, temporaryToken), {\n        operator: e.detail.selectedOption.value\n      }));\n    },\n    disabled: !temporaryToken\n  });\n  fields.push({\n    text: i18nStrings.operatorText,\n    className: styles['operator-selector'],\n    control: operatorSelect,\n    controlId: operatorControlId\n  });\n  var valueOptions = property ? (_b = getPropertyOptions(property, filteringOptions)) === null || _b === void 0 ? void 0 : _b.map(function (_a) {\n    var value = _a.value;\n    return {\n      value: value\n    };\n  }) : [];\n  var valueAutosuggestHandlers = useLoadItems(onLoadItems, '', property);\n  var asyncValueAutosuggesProps = temporaryToken.propertyKey ? __assign(__assign({}, valueAutosuggestHandlers), asyncProps) : {\n    empty: asyncProps.empty\n  };\n  var valueControlId = useUniqueId('value');\n  var valueAutosuggest = temporaryToken && React.createElement(InternalAutosuggest, __assign({\n    controlId: valueControlId,\n    enteredTextLabel: i18nStrings.enteredTextLabel,\n    value: temporaryToken.value || '',\n    onChange: function onChange(e) {\n      setTemporaryToken(__assign(__assign({}, temporaryToken), {\n        value: e.detail.value\n      }));\n    },\n    disabled: !operatorText,\n    options: valueOptions\n  }, asyncValueAutosuggesProps, {\n    virtualScroll: true\n  }));\n  fields.push({\n    text: i18nStrings.valueText,\n    className: styles['value-selector'],\n    control: valueAutosuggest,\n    controlId: valueControlId\n  });\n  return React.createElement(\"div\", null, React.createElement(InternalSpaceBetween, {\n    size: \"l\"\n  }, fields.map(function (_a) {\n    var text = _a.text,\n        control = _a.control,\n        className = _a.className,\n        controlId = _a.controlId;\n    return React.createElement(\"div\", {\n      className: clsx(styles['token-editor-line'], className),\n      key: text\n    }, React.createElement(\"label\", {\n      className: styles['token-editor-label'],\n      htmlFor: controlId\n    }, text), React.createElement(\"div\", {\n      className: styles['token-editor-field']\n    }, control));\n  })));\n};\n\nexport var TokenEditor = function TokenEditor(props) {\n  var token = props.token,\n      triggerComponent = props.triggerComponent,\n      setToken = props.setToken,\n      i18nStrings = props.i18nStrings,\n      expandToViewport = props.expandToViewport;\n\n  var _a = useState(token),\n      temporaryToken = _a[0],\n      setTemporaryToken = _a[1];\n\n  var popoverRef = useRef(null);\n\n  var closePopover = function closePopover() {\n    popoverRef.current && popoverRef.current.dismissPopover();\n  };\n\n  return React.createElement(InternalPopover, {\n    ref: popoverRef,\n    className: styles['token-label'],\n    triggerType: \"text\",\n    header: i18nStrings.editTokenHeader,\n    size: \"large\",\n    position: \"right\",\n    dismissAriaLabel: i18nStrings.dismissAriaLabel,\n    __onOpen: function __onOpen() {\n      return setTemporaryToken(token);\n    },\n    renderWithPortal: expandToViewport,\n    content: React.createElement(\"div\", {\n      className: styles['token-editor']\n    }, React.createElement(EditingFields, __assign({}, props, {\n      temporaryToken: temporaryToken,\n      setTemporaryToken: setTemporaryToken\n    })), React.createElement(\"div\", {\n      className: styles['token-editor-actions']\n    }, React.createElement(InternalButton, {\n      variant: \"link\",\n      className: styles['token-editor-cancel'],\n      onClick: closePopover\n    }, i18nStrings.cancelActionText), React.createElement(InternalButton, {\n      className: styles['token-editor-submit'],\n      onClick: function onClick() {\n        setToken(temporaryToken);\n        closePopover();\n      }\n    }, i18nStrings.applyActionText)))\n  }, triggerComponent);\n};","map":null,"metadata":{},"sourceType":"module"}