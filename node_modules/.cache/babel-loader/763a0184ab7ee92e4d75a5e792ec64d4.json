{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState, createContext, useContext } from 'react';\nimport { getColumnKey } from './utils';\nimport headerCellStyles from './header-cell/styles.css.js';\nimport { warnOnce } from '../internal/logging';\nexport var DEFAULT_WIDTH = 120;\nvar SELECTION_CELL_WIDTH = 54;\n\nfunction checkProperty(column, name) {\n  var value = column[name];\n\n  if (typeof value !== 'number' && typeof value !== 'undefined') {\n    warnOnce('Table', \"resizableColumns feature requires \".concat(name, \" property to be a number, got \").concat(value, \". The component may work incorrectly.\"));\n  }\n}\n\nexport function checkColumnWidths(columnDefinitions) {\n  for (var _i = 0, columnDefinitions_1 = columnDefinitions; _i < columnDefinitions_1.length; _i++) {\n    var column = columnDefinitions_1[_i];\n    checkProperty(column, 'minWidth');\n    checkProperty(column, 'width');\n  }\n}\n\nfunction readWidths(headerEl, columnDefinitions, hasSelection) {\n  var result = {};\n\n  for (var index = 0; index < columnDefinitions.length; index++) {\n    var column = columnDefinitions[index];\n    var id = getColumnKey(columnDefinitions[index], index);\n    var width = column.width || 0;\n    var minWidth = column.minWidth || width || DEFAULT_WIDTH;\n\n    if (!width && // read width from the DOM if it is missing in the config\n    index !== columnDefinitions.length - 1 // skip reading for the last column, because it expands to fully fit the container\n    ) {\n      var colIndex = hasSelection ? index + 2 : index + 1;\n      var colEl = headerEl.querySelector(\".\".concat(headerCellStyles['header-cell'], \":nth-child(\").concat(colIndex, \")\"));\n      width = colEl.getBoundingClientRect().width;\n    }\n\n    result[id] = Math.max(width, minWidth);\n  }\n\n  return result;\n}\n\nfunction updateWidths(columnDefinitions, oldWidths, newWidth, colIndex) {\n  var _a;\n\n  var definition = columnDefinitions[colIndex];\n  var id = getColumnKey(definition, colIndex);\n  var minWidth = typeof definition.minWidth === 'number' ? definition.minWidth : DEFAULT_WIDTH;\n  newWidth = Math.max(newWidth, minWidth);\n\n  if (oldWidths[id] === newWidth) {\n    return oldWidths;\n  }\n\n  return __assign(__assign({}, oldWidths), (_a = {}, _a[id] = newWidth, _a));\n}\n\nvar WidthsContext = createContext({\n  totalWidth: 0,\n  columnWidths: {},\n  updateColumn: function updateColumn() {}\n});\nexport function ColumnWidthsProvider(_a) {\n  var tableRef = _a.tableRef,\n      visibleColumnDefinitions = _a.visibleColumnDefinitions,\n      resizableColumns = _a.resizableColumns,\n      hasSelection = _a.hasSelection,\n      children = _a.children;\n  var visibleColumns = useRef(null);\n\n  var _b = useState({}),\n      columnWidths = _b[0],\n      setColumnWidths = _b[1];\n\n  useEffect(function () {\n    if (!resizableColumns) {\n      return;\n    }\n\n    var lastVisible = visibleColumns.current;\n\n    if (lastVisible) {\n      var _loop_1 = function _loop_1(index) {\n        var column = visibleColumnDefinitions[index];\n        var id = getColumnKey(column, index);\n\n        if (!columnWidths[id] && lastVisible.indexOf(column.id) === -1) {\n          setColumnWidths(function (columnWidths) {\n            var _a;\n\n            return __assign(__assign({}, columnWidths), (_a = {}, _a[id] = column.width || DEFAULT_WIDTH, _a));\n          });\n        }\n      };\n\n      for (var index = 0; index < visibleColumnDefinitions.length; index++) {\n        _loop_1(index);\n      }\n    }\n\n    visibleColumns.current = visibleColumnDefinitions.map(function (column) {\n      return column.id;\n    });\n  }, [columnWidths, resizableColumns, visibleColumnDefinitions]);\n  useEffect(function () {\n    if (!resizableColumns) {\n      return;\n    }\n\n    setColumnWidths(function () {\n      return readWidths(tableRef.current, visibleColumnDefinitions, hasSelection);\n    }); // This code is intended to run only at the first render and should not re-run when table props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function updateColumn(colIndex, newWidth) {\n    setColumnWidths(function (columnWidths) {\n      return updateWidths(visibleColumnDefinitions, columnWidths, newWidth, colIndex);\n    });\n  }\n\n  var totalWidth = visibleColumnDefinitions.reduce(function (total, column, index) {\n    return total + (columnWidths[getColumnKey(column, index)] || DEFAULT_WIDTH);\n  }, 0);\n\n  if (hasSelection) {\n    totalWidth += SELECTION_CELL_WIDTH;\n  }\n\n  return React.createElement(WidthsContext.Provider, {\n    value: {\n      columnWidths: columnWidths,\n      totalWidth: totalWidth,\n      updateColumn: updateColumn\n    }\n  }, children);\n}\nexport function useColumnWidths() {\n  return useContext(WidthsContext);\n}","map":null,"metadata":{},"sourceType":"module"}