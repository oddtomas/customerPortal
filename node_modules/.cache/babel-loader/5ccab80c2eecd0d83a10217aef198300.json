{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../../base-component';\nimport { applyDisplayName } from '../../utils/apply-display-name';\nimport useFocusVisible from '../../hooks/focus-visible';\nimport InternalButtonDropdown from '../../../button-dropdown/internal';\nimport InternalIcon from '../../../icon/internal';\nimport buttonDropdownStyles from '../../../button-dropdown/styles.css.js';\nimport styles from './styles.css.js';\nexport var ButtonTrigger = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var iconName = _a.iconName,\n      iconUrl = _a.iconUrl,\n      iconAlt = _a.iconAlt,\n      iconSvg = _a.iconSvg,\n      badge = _a.badge,\n      ariaLabel = _a.ariaLabel,\n      offsetRight = _a.offsetRight,\n      disabled = _a.disabled,\n      expanded = _a.expanded,\n      children = _a.children,\n      _onClick = _a.onClick;\n  var focusVisible = useFocusVisible();\n  var hasIcon = iconName || iconUrl || iconSvg;\n  return React.createElement(\"button\", __assign({}, focusVisible, {\n    ref: ref,\n    type: \"button\",\n    className: clsx(styles.button, styles[\"offset-right-\".concat(offsetRight)], (_b = {}, _b[styles.expanded] = expanded, _b)),\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": !!expanded,\n    \"aria-haspopup\": true,\n    disabled: disabled,\n    onClick: function onClick(event) {\n      event.preventDefault();\n      _onClick && _onClick();\n    }\n  }), hasIcon && React.createElement(InternalIcon, {\n    className: styles.icon,\n    name: iconName,\n    url: iconUrl,\n    alt: iconAlt,\n    svg: iconSvg,\n    badge: badge\n  }), children && React.createElement(\"span\", {\n    className: styles.text\n  }, children), children && React.createElement(InternalIcon, {\n    name: \"caret-down-filled\",\n    className: expanded ? buttonDropdownStyles['rotate-up'] : buttonDropdownStyles['rotate-down']\n  }));\n});\n\nvar MenuDropdown = function MenuDropdown(_a) {\n  var iconName = _a.iconName,\n      iconUrl = _a.iconUrl,\n      iconAlt = _a.iconAlt,\n      iconSvg = _a.iconSvg,\n      badge = _a.badge,\n      ariaLabel = _a.ariaLabel,\n      offsetRight = _a.offsetRight,\n      children = _a.children,\n      props = __rest(_a, [\"iconName\", \"iconUrl\", \"iconAlt\", \"iconSvg\", \"badge\", \"ariaLabel\", \"offsetRight\", \"children\"]);\n\n  var baseProps = getBaseProps(props);\n\n  var dropdownTrigger = function dropdownTrigger(clickHandler, ref, isDisabled, isExpanded) {\n    return React.createElement(ButtonTrigger, {\n      ref: ref,\n      disabled: isDisabled,\n      expanded: isExpanded,\n      iconName: iconName,\n      iconUrl: iconUrl,\n      iconAlt: iconAlt,\n      iconSvg: iconSvg,\n      badge: badge,\n      ariaLabel: ariaLabel,\n      offsetRight: offsetRight,\n      onClick: clickHandler\n    }, children);\n  };\n\n  return React.createElement(InternalButtonDropdown, __assign({}, baseProps, props, {\n    variant: \"navigation\",\n    customTriggerBuilder: dropdownTrigger,\n    preferCenter: true\n  }));\n};\n\napplyDisplayName(MenuDropdown, 'MenuDropdown');\nexport default MenuDropdown;","map":null,"metadata":{},"sourceType":"module"}