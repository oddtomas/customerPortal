{"ast":null,"code":"import { __assign, __rest, __spreadArray } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\nimport InternalIcon from '../icon/internal';\nimport InternalButtonDropdown from '../button-dropdown/internal';\nimport { InternalButton } from '../button/internal';\nimport { BreadcrumbItem } from './item/item';\nimport { fireCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\n\nvar DropdownTrigger = function DropdownTrigger(clickHandler, ref, isDisabled, isExpanded) {\n  return React.createElement(InternalButton, {\n    disabled: isDisabled,\n    onClick: function onClick(event) {\n      event.preventDefault();\n      clickHandler();\n    },\n    ref: ref,\n    \"aria-expanded\": isExpanded ? true : undefined,\n    \"aria-haspopup\": true,\n    variant: \"breadcrumb-group\"\n  }, \"...\");\n};\n\nvar EllipsisDropdown = function EllipsisDropdown(_a) {\n  var ariaLabel = _a.ariaLabel,\n      dropdownItems = _a.dropdownItems,\n      onDropdownItemClick = _a.onDropdownItemClick,\n      onDropdownItemFollow = _a.onDropdownItemFollow;\n  return React.createElement(\"li\", {\n    className: styles.ellipsis,\n    \"aria-label\": ariaLabel\n  }, React.createElement(InternalButtonDropdown, {\n    items: dropdownItems,\n    onItemClick: onDropdownItemClick,\n    onItemFollow: onDropdownItemFollow,\n    customTriggerBuilder: DropdownTrigger\n  }), React.createElement(\"span\", {\n    className: styles.icon\n  }, React.createElement(InternalIcon, {\n    name: \"angle-right\"\n  })));\n};\n\nexport var getEventDetail = function getEventDetail(item) {\n  return {\n    item: item,\n    text: item.text,\n    href: item.href\n  };\n};\nexport default function InternalBreadcrumbGroup(_a) {\n  var _b = _a.items,\n      items = _b === void 0 ? [] : _b,\n      ariaLabel = _a.ariaLabel,\n      expandAriaLabel = _a.expandAriaLabel,\n      onClick = _a.onClick,\n      onFollow = _a.onFollow,\n      __internalRootRef = _a.__internalRootRef,\n      props = __rest(_a, [\"items\", \"ariaLabel\", \"expandAriaLabel\", \"onClick\", \"onFollow\", \"__internalRootRef\"]);\n\n  for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n    var item = items_1[_i];\n    checkSafeUrl('BreadcrumbGroup', item.href);\n  }\n\n  var baseProps = getBaseProps(props);\n  var isMobile = useMobile();\n  var breadcrumbItems = items.map(function (item, index) {\n    return React.createElement(\"li\", {\n      className: styles.item,\n      key: index\n    }, React.createElement(BreadcrumbItem, {\n      item: item,\n      onClick: onClick,\n      onFollow: onFollow,\n      isCompressed: isMobile,\n      isLast: index === items.length - 1\n    }));\n  });\n\n  var getEventItem = function getEventItem(e) {\n    var id = e.detail.id;\n    return items[parseInt(id)];\n  }; // Add ellipsis\n\n\n  if (breadcrumbItems.length >= 3) {\n    var dropdownItems = items.slice(1, items.length - 1).map(function (item, index) {\n      return {\n        id: (index + 1).toString(),\n        text: item.text,\n        href: item.href || '#'\n      };\n    });\n    breadcrumbItems = __spreadArray([breadcrumbItems[0], React.createElement(EllipsisDropdown, {\n      key: 'ellipsis',\n      ariaLabel: expandAriaLabel,\n      dropdownItems: dropdownItems,\n      onDropdownItemClick: function onDropdownItemClick(e) {\n        return fireCancelableEvent(onClick, getEventDetail(getEventItem(e)), e);\n      },\n      onDropdownItemFollow: function onDropdownItemFollow(e) {\n        return fireCancelableEvent(onFollow, getEventDetail(getEventItem(e)), e);\n      }\n    })], breadcrumbItems.slice(1), true);\n  }\n\n  return React.createElement(\"nav\", __assign({}, baseProps, {\n    className: clsx(styles['breadcrumb-group'], isMobile && styles.mobile, baseProps.className),\n    \"aria-label\": ariaLabel || undefined,\n    ref: __internalRootRef\n  }), React.createElement(\"ol\", {\n    className: styles['breadcrumb-group-list']\n  }, breadcrumbItems));\n}","map":null,"metadata":{},"sourceType":"module"}