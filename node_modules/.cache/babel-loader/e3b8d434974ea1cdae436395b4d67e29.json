{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport AreaSeries from './area-series';\nimport ThresholdSeries from './threshold-series';\nimport styles from '../styles.css.js';\nimport { useSelector } from '../model/async-store';\nexport default memo(DataSeries);\n\nfunction DataSeries(_a) {\n  var model = _a.model;\n  var chartAreaClipPath = useUniqueId('awsui-area-chart__chart-area-');\n  var highlightedX = useSelector(model.interactions, function (state) {\n    return state.highlightedX;\n  });\n  var highlightedSeries = useSelector(model.interactions, function (state) {\n    return state.highlightedSeries;\n  });\n  var useHighlightDimmed = !highlightedX; // Iterating series in the reversed order so that SVG paths overlap correctly.\n\n  var seriesData = [];\n\n  for (var seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {\n    if (model.computed.plot.sx[seriesIndex]) {\n      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: model.width,\n    height: model.height\n  }))), React.createElement(\"g\", {\n    role: \"group\"\n  }, seriesData.map(function (_a) {\n    var _b;\n\n    var series = _a[0],\n        data = _a[1];\n    var isHighlighted = series === highlightedSeries;\n    var isDimmed = !!highlightedSeries && !isHighlighted;\n    return React.createElement(\"g\", {\n      key: series.title,\n      role: \"group\",\n      \"aria-label\": series.title,\n      className: clsx(styles.series, styles[\"series--\".concat(series.type)], (_b = {}, _b[styles['series--highlighted']] = isHighlighted, _b[styles['series--dimmed']] = useHighlightDimmed && isDimmed, _b))\n    }, series.type === 'area' ? React.createElement(AreaSeries, {\n      data: data,\n      color: model.getInternalSeries(series).color,\n      chartAreaClipPath: chartAreaClipPath\n    }) : React.createElement(ThresholdSeries, {\n      data: data,\n      xScale: model.computed.xScale,\n      color: model.getInternalSeries(series).color,\n      chartAreaClipPath: chartAreaClipPath\n    }));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}