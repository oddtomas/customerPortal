{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport { InternalButton } from '../button/internal';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { copyPreferences, mergePreferences, ModalContentLayout, PageSizePreference, WrapLinesPreference, CustomPreference } from './utils';\nimport VisibleContentPreference from './visible-content';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\n\nvar ModalContent = function ModalContent(_a) {\n  var _b = _a.preferences,\n      preferences = _b === void 0 ? {} : _b,\n      pageSizePreference = _a.pageSizePreference,\n      wrapLinesPreference = _a.wrapLinesPreference,\n      customPreference = _a.customPreference,\n      visibleContentPreference = _a.visibleContentPreference,\n      _onChange = _a.onChange;\n\n  if (!visibleContentPreference && !pageSizePreference && !wrapLinesPreference && customPreference) {\n    return React.createElement(CustomPreference, {\n      value: preferences.custom,\n      customPreference: customPreference,\n      onChange: function onChange(custom) {\n        return _onChange({\n          custom: custom\n        });\n      }\n    });\n  }\n\n  return React.createElement(ModalContentLayout, {\n    left: React.createElement(InternalSpaceBetween, {\n      size: \"l\"\n    }, pageSizePreference && React.createElement(PageSizePreference, __assign({\n      value: preferences.pageSize\n    }, pageSizePreference, {\n      onChange: function onChange(pageSize) {\n        return _onChange({\n          pageSize: pageSize\n        });\n      }\n    })), wrapLinesPreference && React.createElement(WrapLinesPreference, __assign({\n      value: preferences.wrapLines\n    }, wrapLinesPreference, {\n      onChange: function onChange(wrapLines) {\n        return _onChange({\n          wrapLines: wrapLines\n        });\n      }\n    })), customPreference && React.createElement(CustomPreference, {\n      value: preferences.custom,\n      customPreference: customPreference,\n      onChange: function onChange(custom) {\n        return _onChange({\n          custom: custom\n        });\n      }\n    })),\n    right: visibleContentPreference && React.createElement(VisibleContentPreference, __assign({\n      value: preferences.visibleContent\n    }, visibleContentPreference, {\n      onChange: function onChange(visibleContent) {\n        return _onChange({\n          visibleContent: visibleContent\n        });\n      }\n    }))\n  });\n};\n\nexport default function CollectionPreferences(_a) {\n  var title = _a.title,\n      confirmLabel = _a.confirmLabel,\n      cancelLabel = _a.cancelLabel,\n      _b = _a.disabled,\n      disabled = _b === void 0 ? false : _b,\n      onConfirm = _a.onConfirm,\n      onCancel = _a.onCancel,\n      visibleContentPreference = _a.visibleContentPreference,\n      pageSizePreference = _a.pageSizePreference,\n      wrapLinesPreference = _a.wrapLinesPreference,\n      preferences = _a.preferences,\n      customPreference = _a.customPreference,\n      rest = __rest(_a, [\"title\", \"confirmLabel\", \"cancelLabel\", \"disabled\", \"onConfirm\", \"onCancel\", \"visibleContentPreference\", \"pageSizePreference\", \"wrapLinesPreference\", \"preferences\", \"customPreference\"]);\n\n  var __internalRootRef = useBaseComponent('CollectionPreferences').__internalRootRef;\n\n  checkControlled('CollectioPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n  var baseProps = getBaseProps(rest);\n\n  var _c = useState(false),\n      modalVisible = _c[0],\n      setModalVisible = _c[1];\n\n  var _d = useState(copyPreferences(preferences || {})),\n      temporaryPreferences = _d[0],\n      setTemporaryPreferences = _d[1];\n\n  var triggerRef = useRef(null);\n  var dialogPreviouslyOpen = useRef(false);\n  useEffect(function () {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n\n  var onConfirmListener = function onConfirmListener() {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n\n  var onCancelListener = function onCancelListener() {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), React.createElement(InternalButton, {\n    ref: triggerRef,\n    className: styles['trigger-button'],\n    disabled: disabled,\n    ariaLabel: title,\n    onClick: function onClick() {\n      setTemporaryPreferences(copyPreferences(preferences || {}));\n      setModalVisible(true);\n    },\n    variant: \"icon\",\n    iconName: \"settings\",\n    formAction: \"none\"\n  }), !disabled && modalVisible && React.createElement(InternalModal, {\n    className: styles['modal-root'],\n    visible: true,\n    header: title,\n    footer: React.createElement(InternalBox, {\n      float: \"right\"\n    }, React.createElement(InternalSpaceBetween, {\n      direction: \"horizontal\",\n      size: \"xs\"\n    }, React.createElement(InternalButton, {\n      className: styles['cancel-button'],\n      variant: \"link\",\n      formAction: \"none\",\n      onClick: onCancelListener\n    }, cancelLabel), React.createElement(InternalButton, {\n      className: styles['confirm-button'],\n      variant: \"primary\",\n      formAction: \"none\",\n      onClick: onConfirmListener\n    }, confirmLabel))),\n    closeAriaLabel: cancelLabel,\n    size: \"large\",\n    onDismiss: onCancelListener\n  }, React.createElement(ModalContent, {\n    preferences: temporaryPreferences,\n    visibleContentPreference: visibleContentPreference,\n    pageSizePreference: pageSizePreference,\n    wrapLinesPreference: wrapLinesPreference,\n    customPreference: customPreference,\n    onChange: function onChange(changedPreferences) {\n      return setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));\n    }\n  })));\n}\napplyDisplayName(CollectionPreferences, 'CollectionPreferences');","map":null,"metadata":{},"sourceType":"module"}