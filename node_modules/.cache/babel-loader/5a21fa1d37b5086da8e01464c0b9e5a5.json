{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport Legend from '../internal/components/chart-legend';\nimport Filter from '../internal/components/chart-filter';\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalBox from '../box/internal';\nimport InternalPieChart from './pie-chart';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport useContainerWidth from '../internal/utils/use-container-width';\nimport { nodeContains } from '../internal/utils/dom';\n\nvar PieChart = function PieChart(_a) {\n  var _b;\n\n  var _c = _a.variant,\n      variant = _c === void 0 ? 'pie' : _c,\n      _d = _a.size,\n      size = _d === void 0 ? 'medium' : _d,\n      _e = _a.hideTitles,\n      hideTitles = _e === void 0 ? false : _e,\n      _f = _a.hideDescriptions,\n      hideDescriptions = _f === void 0 ? false : _f,\n      _g = _a.hideLegend,\n      hideLegend = _g === void 0 ? false : _g,\n      _h = _a.hideFilter,\n      hideFilter = _h === void 0 ? false : _h,\n      _j = _a.statusType,\n      statusType = _j === void 0 ? 'finished' : _j,\n      _k = _a.data,\n      externalData = _k === void 0 ? [] : _k,\n      _l = _a.i18nStrings,\n      i18nStrings = _l === void 0 ? {} : _l,\n      controlledHighlightedSegment = _a.highlightedSegment,\n      controlledVisibleSegments = _a.visibleSegments,\n      controlledOnHighlightChange = _a.onHighlightChange,\n      onFilterChange = _a.onFilterChange,\n      additionalFilters = _a.additionalFilters,\n      legendTitle = _a.legendTitle,\n      _m = _a.detailPopoverSize,\n      detailPopoverSize = _m === void 0 ? 'medium' : _m,\n      props = __rest(_a, [\"variant\", \"size\", \"hideTitles\", \"hideDescriptions\", \"hideLegend\", \"hideFilter\", \"statusType\", \"data\", \"i18nStrings\", \"highlightedSegment\", \"visibleSegments\", \"onHighlightChange\", \"onFilterChange\", \"additionalFilters\", \"legendTitle\", \"detailPopoverSize\"]);\n\n  var _o = useBaseComponent('PieChart').__internalRootRef,\n      __internalRootRef = _o === void 0 ? null : _o;\n\n  var baseProps = getBaseProps(props);\n  var isEmpty = !externalData || externalData.length === 0;\n\n  var containerAttr = __assign(__assign({}, baseProps), {\n    className: clsx(baseProps.className, styles.root)\n  });\n\n  var containerRef = useRef(null);\n\n  var _p = useContainerWidth(),\n      containerWidth = _p[0],\n      measureRef = _p[1];\n\n  var data = useMemo(function () {\n    var colors = createCategoryColorScale(externalData, undefined, function (it) {\n      return it.color || null;\n    });\n    return externalData.map(function (datum, i) {\n      return {\n        index: i,\n        color: colors[i],\n        datum: datum\n      };\n    });\n  }, [externalData]);\n\n  var _q = useControllable(controlledHighlightedSegment, controlledOnHighlightChange, null, {\n    componentName: 'PieChart',\n    controlledProp: 'highlightedSegment',\n    changeHandler: 'onHighlightChange'\n  }),\n      _r = _q[0],\n      highlightedSegment = _r === void 0 ? null : _r,\n      setHighlightedSegment = _q[1];\n\n  var _s = useState(highlightedSegment),\n      legendSegment = _s[0],\n      setLegendSegment = _s[1];\n\n  useEffect(function () {\n    setLegendSegment(controlledHighlightedSegment || null);\n  }, [controlledHighlightedSegment]);\n\n  var _t = useControllable(controlledVisibleSegments, onFilterChange, externalData, {\n    componentName: 'PieChart',\n    controlledProp: 'visibleSegments',\n    changeHandler: 'onFilterChange'\n  }),\n      visibleSegments = _t[0],\n      setVisibleSegments = _t[1];\n\n  var _u = useState(null),\n      pinnedSegment = _u[0],\n      setPinnedSegment = _u[1];\n\n  var visibleData = useMemo(function () {\n    return data.filter(function (d) {\n      return (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d.datum)) !== -1;\n    });\n  }, [data, visibleSegments]);\n  var filterItems = data === null || data === void 0 ? void 0 : data.map(function (data) {\n    return {\n      label: data.datum.title,\n      color: data.color,\n      type: 'rectangle',\n      datum: data.datum\n    };\n  });\n  var legendItems = filterItems.filter(function (d) {\n    return (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d.datum)) !== -1;\n  });\n  var filterChange = useCallback(function (selectedSeries) {\n    setVisibleSegments(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSegments: selectedSeries\n    });\n  }, [setVisibleSegments, onFilterChange]);\n  var onHighlightChange = useCallback(function (segment) {\n    if (pinnedSegment !== null) {\n      return;\n    }\n\n    setLegendSegment(segment);\n    setHighlightedSegment(segment);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSegment: segment\n    });\n  }, [pinnedSegment, controlledOnHighlightChange, setHighlightedSegment]);\n\n  var onBlur = function onBlur(event) {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      highlightedSegment && onHighlightChange(null);\n      setLegendSegment(null);\n    }\n  };\n\n  var mergedRef = useMergeRefs(containerRef, measureRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, containerAttr, {\n    ref: mergedRef,\n    onBlur: onBlur\n  }), statusType === 'finished' && !isEmpty && React.createElement(InternalBox, {\n    className: styles['filter-container'],\n    margin: {\n      bottom: 'l'\n    }\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"l\",\n    direction: \"horizontal\",\n    className: clsx((_b = {}, _b[styles['has-default-filter']] = !hideFilter, _b))\n  }, !hideFilter && React.createElement(Filter, {\n    series: filterItems,\n    onChange: filterChange,\n    selectedSeries: visibleSegments,\n    i18nStrings: i18nStrings\n  }), additionalFilters)), React.createElement(InternalPieChart, __assign({}, props, {\n    variant: variant,\n    size: size,\n    data: externalData,\n    visibleData: visibleData,\n    width: containerWidth,\n    statusType: statusType,\n    hideTitles: hideTitles,\n    hideDescriptions: hideDescriptions,\n    hideLegend: hideLegend,\n    hideFilter: hideFilter,\n    additionalFilters: additionalFilters,\n    i18nStrings: i18nStrings,\n    onHighlightChange: onHighlightChange,\n    highlightedSegment: highlightedSegment,\n    legendSegment: legendSegment,\n    pinnedSegment: pinnedSegment,\n    setPinnedSegment: setPinnedSegment,\n    detailPopoverSize: detailPopoverSize\n  })), !hideLegend && !isEmpty && statusType === 'finished' && React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, React.createElement(Legend, {\n    series: legendItems,\n    highlightedSeries: legendSegment,\n    legendTitle: legendTitle,\n    ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel,\n    onHighlightChange: onHighlightChange,\n    plotContainerRef: containerRef\n  })));\n};\n\napplyDisplayName(PieChart, 'PieChart');\nexport default PieChart;","map":null,"metadata":{},"sourceType":"module"}