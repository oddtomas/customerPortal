{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useState, useCallback } from 'react';\nimport { useResizeObserver } from './use-resize-observer';\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * Examples:\n *    // Switching display mode under a given condition (only re-renders when mode changes):\n *    const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight]);\n *\n *    // Obtain observer entity (re-renders with each observation):\n *    const [entry, ref] = useContainerQuery(entry => entry);\n *\n *    // Using prevState to avoid unnecessary re-renders:\n *    const [value, ref] = useContainerQuery((entry, prevValue) => shouldUpdate(entry) ? getValue(entry) : prevValue);\n *\n * @param mapFn Function to convert ContainerQueryEntry to a custom type S\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of observation value and a reference to be attached to the target element.\n */\n\nexport function useContainerQuery(mapFn, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n\n  var elementRef = useRef(null);\n\n  var _a = useState(null),\n      state = _a[0],\n      setState = _a[1]; // Update getElement when deps change to trigger new observation.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  var getElement = useCallback(function () {\n    return elementRef.current;\n  }, deps);\n  useResizeObserver(getElement, function (entry) {\n    return setState(function (prevState) {\n      return mapFn(entry, prevState);\n    });\n  });\n  return [state, elementRef];\n}","map":null,"metadata":{},"sourceType":"module"}