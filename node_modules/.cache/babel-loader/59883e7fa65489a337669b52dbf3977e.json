{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalToggle from '../toggle/internal';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport styles from './styles.css.js';\n\nvar isVisible = function isVisible(id, visibleIds) {\n  return visibleIds.indexOf(id) !== -1;\n};\n\nvar className = function className(suffix) {\n  return {\n    className: styles[\"visible-content-\".concat(suffix)]\n  };\n};\n\nexport default function VisibleContentPreference(_a) {\n  var title = _a.title,\n      options = _a.options,\n      _b = _a.value,\n      value = _b === void 0 ? [] : _b,\n      onChange = _a.onChange;\n  var idPrefix = useUniqueId('visible-content');\n  var flatOptionsIds = options.reduce(function (ids, group) {\n    return __spreadArray(__spreadArray([], ids, true), group.options.reduce(function (groupIds, option) {\n      return __spreadArray(__spreadArray([], groupIds, true), [option.id], false);\n    }, []), true);\n  }, []);\n\n  var onToggle = function onToggle(id) {\n    if (!isVisible(id, value)) {\n      onChange(__spreadArray(__spreadArray([], value, true), [id], false).sort(function (firstId, secondId) {\n        return flatOptionsIds.indexOf(firstId) - flatOptionsIds.indexOf(secondId);\n      }));\n    } else {\n      onChange(value.filter(function (currentId) {\n        return currentId !== id;\n      }));\n    }\n  };\n\n  var selectionOption = function selectionOption(option, optionGroupIndex, optionIndex) {\n    var labelId = \"\".concat(idPrefix, \"-\").concat(optionGroupIndex, \"-\").concat(optionIndex);\n    return React.createElement(\"div\", __assign({\n      key: optionIndex\n    }, className('option')), React.createElement(\"label\", __assign({}, className('option-label'), {\n      htmlFor: labelId\n    }), option.label), React.createElement(\"div\", __assign({}, className('toggle')), React.createElement(InternalToggle, {\n      checked: isVisible(option.id, value),\n      onChange: function onChange() {\n        return onToggle(option.id);\n      },\n      disabled: option.editable === false,\n      controlId: labelId\n    })));\n  };\n\n  var outerGroupLabelId = \"\".concat(idPrefix, \"-outer\");\n  return React.createElement(\"div\", {\n    className: styles['visible-content']\n  }, React.createElement(\"div\", __assign({}, className('title'), {\n    id: outerGroupLabelId\n  }), title), React.createElement(InternalSpaceBetween, __assign({}, className('groups'), {\n    size: \"xs\"\n  }), options.map(function (optionGroup, optionGroupIndex) {\n    var groupLabelId = \"\".concat(idPrefix, \"-\").concat(optionGroupIndex);\n    return React.createElement(\"div\", __assign({\n      key: optionGroupIndex\n    }, className('group'), {\n      role: \"group\",\n      \"aria-labelledby\": \"\".concat(outerGroupLabelId, \" \").concat(groupLabelId)\n    }), React.createElement(\"div\", __assign({}, className('group-label'), {\n      id: groupLabelId\n    }), optionGroup.label), React.createElement(\"div\", null, optionGroup.options.map(function (option, optionIndex) {\n      return selectionOption(option, optionGroupIndex, optionIndex);\n    })));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}