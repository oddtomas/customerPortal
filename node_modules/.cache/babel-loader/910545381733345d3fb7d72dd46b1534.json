{"ast":null,"code":"import { isInteractive, isGroupInteractive, isGroup } from '../../internal/components/option/utils/filter-options';\nimport { useEffect, useRef } from 'react';\nimport { createHighlightedOptionHook } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { useIds, getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { connectOptionsByValue } from './connect-options';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { fireCancelableEvent } from '../../internal/events/index';\nimport { containsOrEqual } from '../../internal/utils/dom';\nexport function useSelect(_a) {\n  var selectedOptions = _a.selectedOptions,\n      updateSelectedOption = _a.updateSelectedOption,\n      options = _a.options,\n      filteringType = _a.filteringType,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      externalRef = _a.externalRef,\n      keepOpen = _a.keepOpen,\n      fireLoadItems = _a.fireLoadItems,\n      setFilteringValue = _a.setFilteringValue,\n      _b = _a.useInteractiveGroups,\n      useInteractiveGroups = _b === void 0 ? false : _b;\n  var interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n\n  var isHighlightable = function isHighlightable(option) {\n    return !!option && (useInteractiveGroups || option.type !== 'parent');\n  };\n\n  var useHighlightedOption = createHighlightedOptionHook({\n    isHighlightable: isHighlightable\n  });\n  var filterRef = useRef(null);\n  var triggerRef = useRef(null);\n  var menuRef = useRef(null);\n  var hasFilter = filteringType !== 'none';\n  var activeRef = hasFilter ? filterRef : menuRef;\n  var isKeyboard = useRef(false);\n  var isSelectingUsingSpace = useRef(false);\n\n  var __selectedOptions = connectOptionsByValue(options, selectedOptions);\n\n  var __selectedValuesSet = selectedOptions.reduce(function (selectedValuesSet, item) {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n\n    return selectedValuesSet;\n  }, new Set());\n\n  var _c = useHighlightedOption(options),\n      highlightedOption = _c.highlightedOption,\n      highlightedIndex = _c.highlightedIndex,\n      moveHighlight = _c.moveHighlight,\n      resetHighlight = _c.resetHighlight,\n      setHighlightedIndex = _c.setHighlightedIndex,\n      highlightOption = _c.highlightOption,\n      goHome = _c.goHome,\n      goEnd = _c.goEnd;\n\n  var _d = useOpenState({\n    onOpen: function onOpen() {\n      return fireLoadItems('');\n    },\n    onClose: function onClose() {\n      resetHighlight();\n      setFilteringValue('');\n    }\n  }),\n      isOpen = _d.isOpen,\n      openDropdown = _d.openDropdown,\n      _closeDropdown = _d.closeDropdown,\n      toggleDropdown = _d.toggleDropdown;\n\n  var focused = useRef(false);\n\n  var handleFocus = function handleFocus() {\n    if (!focused.current) {\n      fireCancelableEvent(onFocus, {});\n      focused.current = true;\n    }\n  };\n\n  var handleBlur = function handleBlur(_a) {\n    var detail = _a.detail;\n    var relatedTarget = detail.relatedTarget;\n    var nextFocusedIsTrigger = relatedTarget ? containsOrEqual(triggerRef.current, relatedTarget) : false;\n    var nextFocusedInsideDropdown = relatedTarget ? containsOrEqual(menuRef.current, relatedTarget) || containsOrEqual(filterRef.current, relatedTarget) : false;\n    var nextFocusedInsideComponent = nextFocusedIsTrigger || nextFocusedInsideDropdown;\n    var focusingOut = focused.current && !nextFocusedInsideComponent;\n\n    if (nextFocusedIsTrigger || focusingOut) {\n      _closeDropdown();\n    }\n\n    if (focusingOut) {\n      fireCancelableEvent(onBlur, {});\n      focused.current = false;\n    }\n  };\n\n  var hasSelectedOption = __selectedOptions.length > 0;\n\n  var _e = useIds({\n    hasSelectedOption: hasSelectedOption\n  }),\n      selectedOptionId = _e.selectedOptionId,\n      menuId = _e.menuId;\n\n  var highlightedOptionId = getOptionId(menuId, highlightedIndex);\n\n  var selectOption = function selectOption(option) {\n    var _a;\n\n    isSelectingUsingSpace.current = false;\n    var optionToSelect = option || highlightedOption;\n\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n\n    updateSelectedOption(optionToSelect.option);\n\n    if (!keepOpen) {\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n\n      _closeDropdown();\n    }\n  };\n\n  var activeKeyDownHandler = useMenuKeyboard({\n    moveHighlight: moveHighlight,\n    selectOption: selectOption,\n    goHome: goHome,\n    goEnd: goEnd,\n    closeDropdown: function closeDropdown() {\n      var _a;\n\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n\n      _closeDropdown();\n    },\n    isKeyboard: isKeyboard,\n    isSelectingUsingSpace: isSelectingUsingSpace,\n    preventNativeSpace: !hasFilter\n  });\n  var triggerKeyDownHandler = useTriggerKeyboard({\n    openDropdown: openDropdown,\n    goHome: goHome,\n    isKeyboard: isKeyboard\n  });\n\n  var getTriggerProps = function getTriggerProps(disabled) {\n    if (disabled === void 0) {\n      disabled = false;\n    }\n\n    var triggerProps = {\n      ref: triggerRef,\n      onFocus: handleFocus,\n      onBlur: handleBlur\n    };\n\n    if (!disabled) {\n      triggerProps.onMouseDown = function (event) {\n        var _a;\n\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n\n        if (isOpen) {\n          (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n\n        toggleDropdown();\n      };\n\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n\n    if (hasSelectedOption) {\n      triggerProps.ariaLabelledby = selectedOptionId;\n    }\n\n    return triggerProps;\n  };\n\n  var getFilterProps = function getFilterProps() {\n    var _a;\n\n    if (!hasFilter) {\n      return {};\n    }\n\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      __onBlurWithDetail: handleBlur,\n      onFocus: handleFocus,\n      onChange: function onChange(event) {\n        setFilteringValue(event.detail.value);\n        resetHighlight();\n      },\n      __onDelayedInput: function __onDelayedInput(event) {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: (_a = {\n        'aria-activedescendant': highlightedOptionId\n      }, _a['aria-owns'] = menuId, _a['aria-controls'] = menuId, _a)\n    };\n  };\n\n  var getMenuProps = function getMenuProps() {\n    var menuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      onMouseUp: function onMouseUp(itemIndex) {\n        isKeyboard.current = false;\n\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: function onMouseMove(itemIndex) {\n        isKeyboard.current = false;\n\n        if (itemIndex > -1) {\n          setHighlightedIndex(itemIndex);\n        }\n      }\n    };\n\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.onBlur = handleBlur;\n      menuProps.onFocus = handleFocus;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId\n      };\n    }\n\n    return menuProps;\n  };\n\n  var getGroupState = function getGroupState(option) {\n    var totalSelected = option.options.filter(function (item) {\n      return !!item.value && __selectedValuesSet.has(item.value);\n    }).length;\n    var hasSelected = totalSelected > 0;\n    var allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected,\n      indeterminate: hasSelected && !allSelected\n    };\n  };\n\n  var getOptionProps = function getOptionProps(option, index) {\n    var _a;\n\n    var _b;\n\n    var highlighted = option === highlightedOption;\n    var groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    var selected = __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);\n    var nextOption = (_b = options[index + 1]) === null || _b === void 0 ? void 0 : _b.option;\n    var isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;\n    var optionProps = (_a = {\n      key: index,\n      option: option,\n      highlighted: highlighted,\n      selected: selected,\n      isNextSelected: isNextSelected,\n      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate)\n    }, _a['data-mouse-target'] = isHighlightable(option) ? index : -1, _a.id = getOptionId(menuId, index), _a);\n    return optionProps;\n  };\n\n  var prevOpen = usePrevious(isOpen);\n  useEffect(function () {\n    // highlight the first selected option, when opening the Select component\n    if (isOpen && !prevOpen && hasSelectedOption) {\n      setHighlightedIndex(options.indexOf(__selectedOptions[0]));\n    }\n  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndex, options, prevOpen]);\n  useEffect(function () {\n    var _a;\n\n    if (isOpen) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({\n        preventScroll: true\n      });\n    }\n  }, [isOpen, activeRef]);\n  useForwardFocus(externalRef, triggerRef);\n  var highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  var announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n  return {\n    isOpen: isOpen,\n    highlightedOption: highlightedOption,\n    highlightedIndex: highlightedIndex,\n    getTriggerProps: getTriggerProps,\n    getMenuProps: getMenuProps,\n    getFilterProps: getFilterProps,\n    getOptionProps: getOptionProps,\n    isKeyboard: isKeyboard,\n    highlightOption: highlightOption,\n    selectOption: selectOption,\n    announceSelected: announceSelected\n  };\n}","map":null,"metadata":{},"sourceType":"module"}