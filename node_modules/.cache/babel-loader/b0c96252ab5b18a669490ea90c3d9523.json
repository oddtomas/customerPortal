{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { forwardRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireCancelableEvent, isPlainLeftClick } from '../../../internal/events';\nimport { useUniqueId } from '../../../internal/hooks/use-unique-id';\nimport useFocusVisible from '../../../internal/hooks/focus-visible';\nimport InternalIcon from '../../../icon/internal';\nimport { useNavigate } from './router';\nimport styles from '../../styles.css.js';\n\nvar ListItem = function ListItem(_a) {\n  var children = _a.children,\n      startIcon = _a.startIcon,\n      endIcon = _a.endIcon;\n  return React.createElement(React.Fragment, null, startIcon && React.createElement(\"span\", {\n    className: styles['overflow-menu-list-item-icon']\n  }, startIcon), React.createElement(\"span\", {\n    className: styles['overflow-menu-list-item-text']\n  }, children), endIcon && endIcon);\n};\n\nvar LinkItem = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      external = _a.external,\n      href = _a.href,\n      startIcon = _a.startIcon,\n      endIcon = _a.endIcon,\n      onFollow = _a.onFollow,\n      context = _a.context,\n      testId = _a.testId;\n  var focusVisible = useFocusVisible();\n  var rel = external ? 'noopener noreferrer' : undefined;\n  var target = external ? '_blank' : undefined;\n  var anchorProps = {\n    rel: rel,\n    target: target,\n    href: href,\n    onClick: function onClick(event) {\n      if (isPlainLeftClick(event)) {\n        onFollow === null || onFollow === void 0 ? void 0 : onFollow(event);\n      }\n    }\n  };\n  var buttonProps = {\n    role: 'button',\n    tabIndex: 0,\n    onKeyDown: function onKeyDown(event) {\n      if (event.key === ' ') {\n        event.preventDefault();\n      }\n    },\n    onKeyUp: function onKeyUp(event) {\n      if (event.key === ' ' || event.key === 'Enter') {\n        onFollow === null || onFollow === void 0 ? void 0 : onFollow(event);\n      }\n    },\n    onClick: onFollow\n  };\n  return React.createElement(\"a\", __assign({\n    ref: ref,\n    className: clsx(styles['overflow-menu-control'], styles['overflow-menu-control-link'], context && styles[\"overflow-menu-control-\".concat(context)])\n  }, typeof href === 'string' ? anchorProps : buttonProps, focusVisible, testId ? {\n    'data-testid': testId\n  } : {}), React.createElement(ListItem, {\n    startIcon: startIcon,\n    endIcon: endIcon\n  }, children));\n});\nvar ButtonItem = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      startIcon = _a.startIcon,\n      endIcon = _a.endIcon,\n      onClick = _a.onFollow,\n      testId = _a.testId;\n  var focusVisible = useFocusVisible();\n  return React.createElement(\"button\", __assign({\n    ref: ref,\n    className: styles['overflow-menu-control'],\n    onClick: onClick\n  }, focusVisible, typeof testId === 'string' ? {\n    'data-testid': testId\n  } : {}), React.createElement(ListItem, {\n    startIcon: startIcon,\n    endIcon: endIcon\n  }, children));\n});\nvar NavigationItem = forwardRef(function (_a, ref) {\n  var startIcon = _a.startIcon,\n      children = _a.children,\n      index = _a.index,\n      testId = _a.testId,\n      definition = __rest(_a, [\"startIcon\", \"children\", \"index\", \"testId\"]);\n\n  var navigate = useNavigate();\n  return React.createElement(ButtonItem, {\n    ref: ref,\n    startIcon: startIcon,\n    endIcon: React.createElement(InternalIcon, {\n      name: \"angle-right\"\n    }),\n    testId: testId,\n    onFollow: function onFollow() {\n      return navigate('dropdown-menu', {\n        definition: definition,\n        headerText: definition.text || definition.title,\n        headerSecondaryText: definition.description,\n        utilityIndex: index\n      });\n    }\n  }, children);\n});\n\nvar ExpandableItem = function ExpandableItem(_a) {\n  var children = _a.children,\n      onItemClick = _a.onItemClick,\n      definition = __rest(_a, [\"children\", \"onItemClick\"]);\n\n  var focusVisible = useFocusVisible();\n\n  var _b = useState(false),\n      expanded = _b[0],\n      setExpanded = _b[1];\n\n  var headerId = useUniqueId('overflow-menu-item');\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", __assign({\n    className: clsx(styles['overflow-menu-control'], styles['overflow-menu-control-expandable-menu-trigger']),\n    onClick: function onClick() {\n      return setExpanded(function (value) {\n        return !value;\n      });\n    },\n    \"aria-expanded\": expanded\n  }, focusVisible), React.createElement(ListItem, {\n    endIcon: React.createElement(\"span\", {\n      className: clsx(styles.icon, expanded && styles.expanded)\n    }, React.createElement(InternalIcon, {\n      name: \"caret-up-filled\"\n    }))\n  }, React.createElement(\"span\", {\n    id: headerId\n  }, children))), expanded && React.createElement(\"ul\", {\n    className: clsx(styles['overflow-menu-list'], styles['overflow-menu-list-submenu']),\n    \"aria-labelledby\": headerId\n  }, definition.items.map(function (item, index) {\n    var isGroup = typeof item.items !== 'undefined';\n    return React.createElement(\"li\", {\n      key: index,\n      className: clsx(styles[\"overflow-menu-list-item\"], styles[\"overflow-menu-list-item-dropdown-menu\"])\n    }, dropdownComponentFactory(item, isGroup, onItemClick));\n  })));\n};\n\nfunction utilityComponentFactory(utility, index, ref) {\n  var label = utility.text || utility.title;\n  var hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;\n  var startIcon = hasIcon && React.createElement(InternalIcon, {\n    name: utility.iconName,\n    url: utility.iconUrl,\n    alt: utility.iconAlt,\n    svg: utility.iconSvg\n  });\n\n  switch (utility.type) {\n    case 'button':\n      {\n        var handleClick = function handleClick(event) {\n          fireCancelableEvent(utility.onClick, {}, event);\n        };\n\n        if (utility.variant === 'primary-button') {\n          return React.createElement(ButtonItem, {\n            ref: ref,\n            startIcon: startIcon,\n            onFollow: handleClick,\n            testId: \"__\".concat(index)\n          }, label);\n        }\n\n        return React.createElement(LinkItem, {\n          ref: ref,\n          startIcon: startIcon,\n          href: utility.href,\n          external: utility.external,\n          testId: \"__\".concat(index),\n          onFollow: handleClick\n        }, label, utility.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n          \"aria-label\": utility.externalIconAriaLabel,\n          role: utility.externalIconAriaLabel ? 'img' : undefined\n        }, React.createElement(InternalIcon, {\n          name: \"external\",\n          size: \"normal\"\n        }))));\n      }\n\n    case 'menu-dropdown':\n      {\n        return React.createElement(NavigationItem, __assign({\n          ref: ref,\n          startIcon: startIcon,\n          index: index\n        }, utility, {\n          testId: \"__\".concat(index)\n        }), label);\n      }\n  }\n}\n\nfunction dropdownComponentFactory(item, expandable, onItemClick) {\n  var label = item.text;\n  var hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;\n  var startIcon = hasIcon && React.createElement(InternalIcon, {\n    name: item.iconName,\n    url: item.iconUrl,\n    alt: item.iconAlt,\n    svg: item.iconSvg\n  });\n\n  if (expandable) {\n    return React.createElement(ExpandableItem, __assign({}, item, {\n      onItemClick: onItemClick\n    }), label);\n  }\n\n  return React.createElement(LinkItem, {\n    startIcon: startIcon,\n    href: item.href,\n    external: item.external,\n    context: \"dropdown-menu\",\n    testId: item.id,\n    onFollow: function onFollow() {\n      return onItemClick(item);\n    }\n  }, label, item.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n    \"aria-label\": item.externalIconAriaLabel,\n    role: item.externalIconAriaLabel ? 'img' : undefined\n  }, React.createElement(InternalIcon, {\n    name: \"external\",\n    size: \"normal\"\n  }))));\n}\n\nexport var UtilityMenuItem = forwardRef(function (_a, ref) {\n  var index = _a.index,\n      props = __rest(_a, [\"index\"]);\n\n  return React.createElement(\"li\", {\n    className: clsx(styles[\"overflow-menu-list-item\"], styles[\"overflow-menu-list-item-utility\"])\n  }, utilityComponentFactory(props, index, ref));\n});\nexport var SubmenuItem = function SubmenuItem(props) {\n  var expandable = typeof props.items !== 'undefined';\n  return React.createElement(\"li\", {\n    className: clsx(styles[\"overflow-menu-list-item\"], styles[\"overflow-menu-list-item-submenu\"], expandable && styles[\"overflow-menu-list-item-expandable\"])\n  }, dropdownComponentFactory(props, expandable, props.onItemClick));\n};","map":null,"metadata":{},"sourceType":"module"}