{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport InternalIcon from '../icon/internal';\nimport styles from './styles.css.js';\nimport { fireNonCancelableEvent, fireKeyboardEvent, getBlurEventRelatedTarget } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport { useSearchProps, convertAutoComplete } from './utils';\nimport { useDebounceCallback } from '../internal/hooks/use-debounce-callback';\n\nvar iconClassName = function iconClassName(position, hasHandler) {\n  var _a;\n\n  return clsx(styles['input-icon'], styles[\"input-icon-\".concat(position)], (_a = {}, _a[styles['input-icon-hoverable']] = hasHandler, _a));\n};\n\nvar preventMouseDown = function preventMouseDown(e) {\n  return e.preventDefault();\n};\n\nfunction InternalInput(_a, ref) {\n  var _b;\n\n  var _c = _a.type,\n      type = _c === void 0 ? 'text' : _c,\n      step = _a.step,\n      inputMode = _a.inputMode,\n      _d = _a.autoComplete,\n      autoComplete = _d === void 0 ? true : _d,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescribedby = _a.ariaDescribedby,\n      name = _a.name,\n      value = _a.value,\n      controlId = _a.controlId,\n      placeholder = _a.placeholder,\n      autoFocus = _a.autoFocus,\n      disabled = _a.disabled,\n      readOnly = _a.readOnly,\n      disableBrowserAutocorrect = _a.disableBrowserAutocorrect,\n      __noBorderRadius = _a.__noBorderRadius,\n      __leftIcon = _a.__leftIcon,\n      _e = _a.__leftIconVariant,\n      __leftIconVariant = _e === void 0 ? 'subtle' : _e,\n      __onLeftIconClick = _a.__onLeftIconClick,\n      invalid = _a.invalid,\n      ariaRequired = _a.ariaRequired,\n      __rightIcon = _a.__rightIcon,\n      _f = _a.__rightIconVariant,\n      __rightIconVariant = _f === void 0 ? 'normal' : _f,\n      __onRightIconClick = _a.__onRightIconClick,\n      onKeyDown = _a.onKeyDown,\n      onKeyUp = _a.onKeyUp,\n      onChange = _a.onChange,\n      __onDelayedInput = _a.__onDelayedInput,\n      __onBlurWithDetail = _a.__onBlurWithDetail,\n      _onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      __nativeAttributes = _a.__nativeAttributes,\n      __internalRootRef = _a.__internalRootRef,\n      rest = __rest(_a, [\"type\", \"step\", \"inputMode\", \"autoComplete\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescribedby\", \"name\", \"value\", \"controlId\", \"placeholder\", \"autoFocus\", \"disabled\", \"readOnly\", \"disableBrowserAutocorrect\", \"__noBorderRadius\", \"__leftIcon\", \"__leftIconVariant\", \"__onLeftIconClick\", \"invalid\", \"ariaRequired\", \"__rightIcon\", \"__rightIconVariant\", \"__onRightIconClick\", \"onKeyDown\", \"onKeyUp\", \"onChange\", \"__onDelayedInput\", \"__onBlurWithDetail\", \"onBlur\", \"onFocus\", \"__nativeAttributes\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(rest);\n  var fireDelayedInput = useDebounceCallback(function (value) {\n    return fireNonCancelableEvent(__onDelayedInput, {\n      value: value\n    });\n  });\n\n  var handleChange = function handleChange(value) {\n    fireDelayedInput(value);\n    fireNonCancelableEvent(onChange, {\n      value: value\n    });\n  };\n\n  var inputRef = useRef(null);\n  var searchProps = useSearchProps(type, disabled, readOnly, value, inputRef, handleChange);\n  __leftIcon = __leftIcon !== null && __leftIcon !== void 0 ? __leftIcon : searchProps.__leftIcon;\n  __rightIcon = __rightIcon !== null && __rightIcon !== void 0 ? __rightIcon : searchProps.__rightIcon;\n  __onRightIconClick = __onRightIconClick !== null && __onRightIconClick !== void 0 ? __onRightIconClick : searchProps.__onRightIconClick;\n\n  var attributes = __assign({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    name: name,\n    placeholder: placeholder,\n    autoFocus: autoFocus,\n    id: controlId,\n    className: clsx(styles.input, type && styles[\"input-type-\".concat(type)], __rightIcon && styles['input-has-icon-right'], __leftIcon && styles['input-has-icon-left'], __noBorderRadius && styles['input-has-no-border-radius'], (_b = {}, _b[styles['input-readonly']] = readOnly, _b[styles['input-invalid']] = invalid, _b)),\n    autoComplete: convertAutoComplete(autoComplete),\n    disabled: disabled,\n    readOnly: readOnly,\n    type: type,\n    step: step,\n    inputMode: inputMode,\n    onKeyDown: onKeyDown && function (event) {\n      return fireKeyboardEvent(onKeyDown, event);\n    },\n    onKeyUp: onKeyUp && function (event) {\n      return fireKeyboardEvent(onKeyUp, event);\n    },\n    // We set a default value on the component in order to force it into the controlled mode.\n    value: value !== null && value !== void 0 ? value : '',\n    onChange: onChange && function (event) {\n      return handleChange(event.target.value);\n    },\n    onBlur: function onBlur(e) {\n      _onBlur && fireNonCancelableEvent(_onBlur);\n      __onBlurWithDetail && fireNonCancelableEvent(__onBlurWithDetail, {\n        relatedTarget: getBlurEventRelatedTarget(e.nativeEvent)\n      });\n    },\n    onFocus: onFocus && function () {\n      return fireNonCancelableEvent(onFocus);\n    }\n  }, __nativeAttributes);\n\n  if (disableBrowserAutocorrect) {\n    attributes.autoCorrect = 'off';\n    attributes.autoCapitalize = 'off';\n  } // ensure aria properties are string literal \"true\"\n\n\n  if (ariaRequired) {\n    attributes['aria-required'] = 'true';\n  }\n\n  if (invalid) {\n    attributes['aria-invalid'] = 'true';\n  }\n\n  var mergedRef = useMergeRefs(ref, inputRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles['input-container']),\n    ref: __internalRootRef\n  }), __leftIcon && React.createElement(\"span\", {\n    onClick: __onLeftIconClick,\n    className: iconClassName('left', !!__onLeftIconClick)\n  }, React.createElement(InternalIcon, {\n    name: __leftIcon,\n    variant: disabled ? 'disabled' : __leftIconVariant\n  })), React.createElement(\"input\", __assign({\n    ref: mergedRef\n  }, attributes)), __rightIcon && React.createElement(\"span\", {\n    onClick: __onRightIconClick,\n    onMouseDown: preventMouseDown,\n    className: iconClassName('right', !!__onRightIconClick)\n  }, React.createElement(InternalIcon, {\n    name: __rightIcon,\n    variant: disabled ? 'disabled' : __rightIconVariant\n  })));\n}\n\nexport default React.forwardRef(InternalInput);","map":null,"metadata":{},"sourceType":"module"}