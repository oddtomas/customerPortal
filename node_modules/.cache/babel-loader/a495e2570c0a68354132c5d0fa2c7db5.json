{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useMemo, useCallback, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent, fireCancelableEvent } from '../internal/events';\nimport { Header, ItemList } from './internal';\nimport { generateExpandableItemsMapping, checkDuplicateHrefs } from './util';\nimport styles from './styles.css.js';\nimport { isDevelopment } from '../internal/is-development';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nexport default function SideNavigation(_a) {\n  var header = _a.header,\n      activeHref = _a.activeHref,\n      _b = _a.items,\n      items = _b === void 0 ? [] : _b,\n      onFollow = _a.onFollow,\n      onChange = _a.onChange,\n      props = __rest(_a, [\"header\", \"activeHref\", \"items\", \"onFollow\", \"onChange\"]);\n\n  var __internalRootRef = useBaseComponent('SideNavigation').__internalRootRef;\n\n  var baseProps = getBaseProps(props);\n  var parentMap = useMemo(function () {\n    return generateExpandableItemsMapping(items);\n  }, [items]);\n\n  if (isDevelopment) {\n    // This code should be wiped in production anyway.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(function () {\n      return checkDuplicateHrefs(items);\n    }, [items]);\n  }\n\n  var onChangeHandler = useCallback(function (item, expanded) {\n    // generateExpandableItemsMapping walks through the entire tree, so we're certain about getting a value.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    fireNonCancelableEvent(onChange, {\n      item: item,\n      expanded: expanded,\n      expandableParents: parentMap.get(item)\n    });\n  }, [onChange, parentMap]);\n  var onFollowHandler = useCallback(function (item, sourceEvent) {\n    fireCancelableEvent(onFollow, item, sourceEvent);\n  }, [onFollow]);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef\n  }), header && React.createElement(Header, {\n    definition: header,\n    activeHref: activeHref,\n    fireChange: onChangeHandler,\n    fireFollow: onFollowHandler\n  }), items && React.createElement(\"div\", {\n    className: styles['list-container']\n  }, React.createElement(ItemList, {\n    variant: \"root\",\n    items: items,\n    fireFollow: onFollowHandler,\n    fireChange: onChangeHandler,\n    activeHref: activeHref\n  })));\n}\napplyDisplayName(SideNavigation, 'SideNavigation');","map":null,"metadata":{},"sourceType":"module"}