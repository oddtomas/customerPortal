{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { useVirtual } from 'react-virtual';\nimport OptionsList from '../internal/components/options-list';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport AutosuggestOption from './autosuggest-option';\nimport { getOptionProps } from './plain-list';\nimport styles from './styles.css.js';\n\nvar VirtualList = function VirtualList(_a, ref) {\n  var handleLoadMore = _a.handleLoadMore,\n      filteredItems = _a.filteredItems,\n      usingMouse = _a.usingMouse,\n      menuProps = _a.menuProps,\n      highlightedOption = _a.highlightedOption,\n      enteredTextLabel = _a.enteredTextLabel,\n      highlightedA11yProps = _a.highlightedA11yProps,\n      hasDropdownStatus = _a.hasDropdownStatus,\n      highlightText = _a.highlightText,\n      listBottom = _a.listBottom,\n      screenReaderContent = _a.screenReaderContent;\n  var scrollRef = useRef(null); // update component, when it gets wider or narrower to reposition items\n\n  var _b = useContainerQuery(function (rect) {\n    return rect.width;\n  }, []),\n      width = _b[0],\n      strutRef = _b[1];\n\n  useImperativeHandle(strutRef, function () {\n    return scrollRef.current;\n  });\n  var rowVirtualizer = useVirtual({\n    size: filteredItems.length,\n    parentRef: scrollRef,\n    // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n    // when the height of any option could have changed:\n    // 1: because the component got resized (width property got updated)\n    // 2: becasue the option changed its content (highlightText property controls the highlight and the visibility of hidden tags)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    estimateSize: useCallback(function () {\n      return 31;\n    }, [width, highlightText]),\n    overscan: 5\n  });\n  useImperativeHandle(ref, function () {\n    return function (index) {\n      if (!usingMouse.current) {\n        rowVirtualizer.scrollToIndex(index);\n      }\n    };\n  }, [usingMouse, rowVirtualizer]);\n  return React.createElement(OptionsList, __assign({}, menuProps, {\n    onLoadMore: handleLoadMore,\n    ref: scrollRef,\n    open: true,\n    // to prevent closing the list when clicking the scrollbar on IE11\n    nativeAttributes: {\n      unselectable: 'on'\n    }\n  }), React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    key: \"total-size\",\n    className: styles['layout-strut'],\n    style: {\n      height: rowVirtualizer.totalSize + (filteredItems.length === 1 ? 1 : 0)\n    }\n  }), rowVirtualizer.virtualItems.map(function (virtualRow) {\n    var index = virtualRow.index,\n        start = virtualRow.start,\n        measureRef = virtualRow.measureRef;\n    var item = filteredItems[index];\n    var optionProps = getOptionProps(index, item, filteredItems, highlightedA11yProps, highlightedOption, hasDropdownStatus);\n    return React.createElement(AutosuggestOption, __assign({\n      key: index,\n      ref: measureRef,\n      highlightText: highlightText,\n      option: item,\n      highlighted: item === highlightedOption,\n      \"data-mouse-target\": index,\n      enteredTextLabel: enteredTextLabel,\n      virtualPosition: start + (index === 0 ? 1 : 0),\n      screenReaderContent: screenReaderContent,\n      ariaSetsize: filteredItems.length,\n      ariaPosinset: index + 1\n    }, optionProps));\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n};\n\nexport default forwardRef(VirtualList);","map":null,"metadata":{},"sourceType":"module"}