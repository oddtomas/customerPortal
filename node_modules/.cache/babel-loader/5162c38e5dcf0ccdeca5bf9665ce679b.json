{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { isDevelopment } from '../internal/is-development';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport AreaChartFilter from './elements/area-chart-filter';\nimport AreaChartLegend from './elements/area-chart-legend';\nimport InternalSpaceBetween from '../space-between/internal';\nimport ChartContainer from './chart-container';\nimport cartesianStyles from '../internal/components/cartesian-chart/styles.css.js';\nimport styles from './styles.css.js';\nimport useChartModel from './model/use-chart-model';\nimport useFilterProps from './model/use-filter-props';\nimport useHighlightProps from './model/use-highlight-props';\nimport { isSeriesValid } from './model/utils';\nimport { warnOnce } from '../internal/logging';\nimport { nodeContains } from '../internal/utils/dom';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nexport default function InternalAreaChart(_a) {\n  var _b, _c;\n\n  var height = _a.height,\n      xScaleType = _a.xScaleType,\n      yScaleType = _a.yScaleType,\n      xDomain = _a.xDomain,\n      yDomain = _a.yDomain,\n      controlledHighlightedSeries = _a.highlightedSeries,\n      controlledVisibleSeries = _a.visibleSeries,\n      externalSeries = _a.series,\n      controlledOnVisibleChange = _a.onFilterChange,\n      controlledOnHighlightChange = _a.onHighlightChange,\n      i18nStrings = _a.i18nStrings,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescription = _a.ariaDescription,\n      xTitle = _a.xTitle,\n      yTitle = _a.yTitle,\n      hideFilter = _a.hideFilter,\n      additionalFilters = _a.additionalFilters,\n      hideLegend = _a.hideLegend,\n      legendTitle = _a.legendTitle,\n      statusType = _a.statusType,\n      detailPopoverSize = _a.detailPopoverSize,\n      empty = _a.empty,\n      noMatch = _a.noMatch,\n      errorText = _a.errorText,\n      loadingText = _a.loadingText,\n      recoveryText = _a.recoveryText,\n      onRecoveryClick = _a.onRecoveryClick,\n      _d = _a.__internalRootRef,\n      __internalRootRef = _d === void 0 ? null : _d,\n      props = __rest(_a, [\"height\", \"xScaleType\", \"yScaleType\", \"xDomain\", \"yDomain\", \"highlightedSeries\", \"visibleSeries\", \"series\", \"onFilterChange\", \"onHighlightChange\", \"i18nStrings\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescription\", \"xTitle\", \"yTitle\", \"hideFilter\", \"additionalFilters\", \"hideLegend\", \"legendTitle\", \"statusType\", \"detailPopoverSize\", \"empty\", \"noMatch\", \"errorText\", \"loadingText\", \"recoveryText\", \"onRecoveryClick\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(props);\n  var containerRef = useRef(null);\n\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(function () {\n      if (!isSeriesValid(externalSeries)) {\n        warnOnce('AreaChart', \"The `series` property violates the component's constraints: all `area` \" + 'series must have `data` arrays of the same length and with the same x-values.');\n      }\n    }, [externalSeries]);\n  }\n\n  var _e = useState(0),\n      width = _e[0],\n      setWidth = _e[1];\n\n  var _f = useFilterProps(externalSeries, controlledVisibleSeries, controlledOnVisibleChange),\n      visibleSeries = _f[0],\n      setVisibleSeries = _f[1];\n\n  var _g = useHighlightProps(externalSeries, controlledHighlightedSeries, controlledOnHighlightChange),\n      highlightedSeries = _g[0],\n      setHighlightedSeries = _g[1];\n\n  var model = useChartModel({\n    externalSeries: externalSeries,\n    visibleSeries: visibleSeries,\n    setVisibleSeries: setVisibleSeries,\n    highlightedSeries: highlightedSeries,\n    setHighlightedSeries: setHighlightedSeries,\n    xDomain: xDomain,\n    yDomain: yDomain,\n    xScaleType: xScaleType,\n    yScaleType: yScaleType,\n    height: height,\n    width: width\n  });\n\n  var _h = getChartStatus({\n    externalData: externalSeries,\n    visibleData: visibleSeries,\n    statusType: statusType\n  }),\n      isEmpty = _h.isEmpty,\n      isNoMatch = _h.isNoMatch,\n      showChart = _h.showChart;\n\n  var showFilters = statusType === 'finished' && (!isEmpty || isNoMatch);\n  var showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  var reserveLegendSpace = !showChart && !hideLegend;\n  var reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n\n  var onBlur = function onBlur(event) {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      model.handlers.onContainerBlur();\n    }\n  };\n\n  var mergedRef = useMergeRefs(containerRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef,\n    onBlur: onBlur\n  }), showFilters && React.createElement(InternalBox, {\n    className: cartesianStyles['filter-container'],\n    margin: {\n      bottom: 'l'\n    }\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"l\",\n    direction: \"horizontal\",\n    className: clsx((_b = {}, _b[styles['has-default-filter']] = !hideFilter, _b))\n  }, !hideFilter && React.createElement(AreaChartFilter, {\n    model: model,\n    filterLabel: i18nStrings.filterLabel,\n    filterPlaceholder: i18nStrings.filterPlaceholder,\n    filterSelectedAriaLabel: i18nStrings.filterSelectedAriaLabel\n  }), additionalFilters)), React.createElement(\"div\", {\n    className: clsx(styles.content, (_c = {}, _c[styles['content--reserve-filter']] = reserveFilterSpace, _c[styles['content--reserve-legend']] = reserveLegendSpace, _c)),\n    style: {\n      minHeight: height\n    }\n  }, React.createElement(ChartStatusContainer, {\n    isEmpty: isEmpty,\n    isNoMatch: isNoMatch,\n    showChart: showChart,\n    statusType: statusType,\n    empty: empty,\n    noMatch: noMatch,\n    loadingText: loadingText,\n    errorText: errorText,\n    recoveryText: recoveryText,\n    onRecoveryClick: onRecoveryClick\n  }), showChart && React.createElement(ChartContainer, {\n    model: model,\n    autoWidth: setWidth,\n    detailPopoverSize: detailPopoverSize,\n    xTitle: xTitle,\n    yTitle: yTitle,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescription: ariaDescription,\n    i18nStrings: i18nStrings\n  })), showLegend && React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, React.createElement(AreaChartLegend, {\n    plotContainerRef: containerRef,\n    model: model,\n    legendTitle: legendTitle,\n    ariaLabel: i18nStrings.legendAriaLabel\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}