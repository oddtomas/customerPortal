{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\n/**\n * useScrollSync returns scroll event handler to be attached to synchronised scroll elements.\n *\n * For example\n *    const handleScroll = useScrollSync([ref1, ref2]);\n *    <div ref={ref1} onScroll={handleScroll}/>\n *    <div ref={ref2} onScroll={handleScroll}/>\n */\n\nexport function useScrollSync(refs, disabled) {\n  if (disabled === void 0) {\n    disabled = false;\n  }\n\n  var activeElement = useRef(null);\n\n  var onScroll = function onScroll(event) {\n    var targetElement = event.target; // remembers the first element that fires onscroll to align with other elements against it\n\n    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {\n      requestAnimationFrame(function () {\n        activeElement.current = targetElement;\n        refs.forEach(function (ref) {\n          var element = ref.current;\n\n          if (element && element !== targetElement) {\n            element.scrollLeft = targetElement.scrollLeft;\n          }\n        }); // unblock the ability to scroll the synced elements\n\n        requestAnimationFrame(function () {\n          activeElement.current = null;\n        });\n      });\n    }\n  };\n\n  return !disabled ? onScroll : undefined;\n}","map":null,"metadata":{},"sourceType":"module"}