{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalCheckbox from '../../checkbox/internal';\nimport RadioButton from '../../radio-group/radio-button';\nimport styles from './styles.css.js';\nexport default function SelectionControl(_a) {\n  var selectionType = _a.selectionType,\n      _b = _a.indeterminate,\n      indeterminate = _b === void 0 ? false : _b,\n      onShiftToggle = _a.onShiftToggle,\n      onFocusUp = _a.onFocusUp,\n      onFocusDown = _a.onFocusDown,\n      name = _a.name,\n      ariaLabel = _a.ariaLabel,\n      sharedProps = __rest(_a, [\"selectionType\", \"indeterminate\", \"onShiftToggle\", \"onFocusUp\", \"onFocusDown\", \"name\", \"ariaLabel\"]);\n\n  var controlId = useUniqueId();\n  var isMultiSelection = selectionType === 'multi';\n\n  var setShiftState = function setShiftState(event) {\n    if (isMultiSelection) {\n      onShiftToggle && onShiftToggle(event.shiftKey);\n    }\n  };\n\n  var onMouseDownHandler = function onMouseDownHandler(event) {\n    setShiftState(event);\n\n    if (isMultiSelection) {\n      // To overcome an issue\n      // If you shift+click or ctrl+click on a label for a checkbox, checkbox is not checked.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=559506\n      event.preventDefault();\n    }\n  }; // native checkboxes do not have focus move via keyboard, we implement it here programmatically\n\n\n  var handleKeyDown = function handleKeyDown(event) {\n    setShiftState(event);\n\n    if (isMultiSelection) {\n      if (event.keyCode === KeyCode.up) {\n        event.preventDefault();\n        onFocusUp && onFocusUp(event);\n      }\n\n      if (event.keyCode === KeyCode.down) {\n        event.preventDefault();\n        onFocusDown && onFocusDown(event);\n      }\n    }\n  };\n\n  var handleClick = function handleClick(event) {\n    var target = event.currentTarget;\n    var nativeInput = target.tagName === 'INPUT' ? target : target.querySelector('input'); // Clicking on input, does not focus it on Firefox (AWSUI-11345)\n\n    nativeInput === null || nativeInput === void 0 ? void 0 : nativeInput.focus();\n  };\n\n  var selector = isMultiSelection ? React.createElement(InternalCheckbox, __assign({}, sharedProps, {\n    controlId: controlId,\n    withoutLabel: true,\n    indeterminate: indeterminate\n  })) : React.createElement(RadioButton, __assign({}, sharedProps, {\n    controlId: controlId,\n    withoutLabel: true,\n    name: name,\n    value: '',\n    label: ''\n  }));\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    onKeyDown: handleKeyDown,\n    onKeyUp: setShiftState,\n    onMouseDown: onMouseDownHandler,\n    onMouseUp: setShiftState,\n    onClick: handleClick,\n    htmlFor: controlId,\n    className: clsx(styles.label, styles.root),\n    \"aria-label\": ariaLabel\n  }, selector), React.createElement(\"span\", {\n    className: clsx(styles.stud),\n    \"aria-hidden\": true\n  }, \"\\xA0\"));\n}","map":null,"metadata":{},"sourceType":"module"}