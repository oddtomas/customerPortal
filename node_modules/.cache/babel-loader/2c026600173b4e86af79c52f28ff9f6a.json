{"ast":null,"code":"import { __spreadArray } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useState, useMemo, useCallback } from 'react';\nimport { indexIncludes } from './utils';\nimport createItemsTree from './create-items-tree';\nimport moveHighlightOneStep from './move-highlight';\nexport default function useHighlightedMenu(_a) {\n  var items = _a.items,\n      hasExpandableGroups = _a.hasExpandableGroups,\n      _b = _a.isInRestrictedView,\n      isInRestrictedView = _b === void 0 ? false : _b;\n\n  var _c = useState([]),\n      targetIndex = _c[0],\n      setTargetIndex = _c[1];\n\n  var _d = useState([]),\n      expandedIndex = _d[0],\n      setExpandedIndex = _d[1];\n\n  var _e = useMemo(function () {\n    return createItemsTree(items);\n  }, [items]),\n      getItem = _e.getItem,\n      getItemIndex = _e.getItemIndex,\n      getSequentialIndex = _e.getSequentialIndex,\n      getParentIndex = _e.getParentIndex;\n\n  var targetItem = useMemo(function () {\n    return getItem(targetIndex);\n  }, [targetIndex, getItem]);\n  var isHighlighted = useCallback(function (item) {\n    var index = getItemIndex(item);\n    return indexIncludes(index, targetIndex);\n  }, [targetIndex, getItemIndex]);\n  var isExpanded = useCallback(function (group) {\n    var index = getItemIndex(group);\n    return indexIncludes(index, expandedIndex);\n  }, [expandedIndex, getItemIndex]);\n  var moveHighlight = useCallback(function (direction) {\n    var getNext = function getNext(index) {\n      var nextIndex = getSequentialIndex(index, direction);\n      var item = getItem(nextIndex || [-1]);\n\n      if (!nextIndex || !item) {\n        return null;\n      }\n\n      var parentIndex = getParentIndex(item);\n      var parentItem = parentIndex && getItem(parentIndex);\n      return {\n        index: nextIndex,\n        item: item,\n        parent: parentItem || undefined\n      };\n    };\n\n    var nextIndex = moveHighlightOneStep({\n      startIndex: targetIndex,\n      expandedIndex: expandedIndex,\n      getNext: getNext,\n      hasExpandableGroups: hasExpandableGroups,\n      isInRestrictedView: isInRestrictedView\n    });\n\n    if (nextIndex) {\n      setTargetIndex(nextIndex);\n    }\n  }, [targetIndex, expandedIndex, getItem, getSequentialIndex, getParentIndex, hasExpandableGroups, isInRestrictedView]);\n  var highlightItem = useCallback(function (item) {\n    setTargetIndex(getItemIndex(item));\n  }, [getItemIndex]);\n  var expandGroup = useCallback(function (group) {\n    var groupIndex = group ? getItemIndex(group) : targetIndex;\n\n    var firstChildIndex = __spreadArray(__spreadArray([], groupIndex, true), [0], false); // move to the first child item unless in restricted mode\n\n\n    setTargetIndex(isInRestrictedView ? groupIndex : firstChildIndex);\n    setExpandedIndex(groupIndex);\n  }, [targetIndex, getItemIndex, isInRestrictedView]);\n  var collapseGroup = useCallback(function () {\n    if (expandedIndex.length > 0) {\n      setTargetIndex(expandedIndex);\n      setExpandedIndex(expandedIndex.slice(0, -1));\n    }\n  }, [expandedIndex]);\n  var reset = useCallback(function () {\n    setTargetIndex([]);\n    setExpandedIndex([]);\n  }, []);\n  return {\n    targetItem: targetItem,\n    isHighlighted: isHighlighted,\n    isExpanded: isExpanded,\n    moveHighlight: moveHighlight,\n    highlightItem: highlightItem,\n    expandGroup: expandGroup,\n    collapseGroup: collapseGroup,\n    reset: reset\n  };\n}","map":null,"metadata":{},"sourceType":"module"}