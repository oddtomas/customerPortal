{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport defaultOptionDescription from '../../internal/components/option/option-announcer';\n/**\n * The hook produces the live region string to be announced when an option is highlighted.\n * This is a workaround to account for the issues with assistive technologies.\n *\n * If the testing reveals no issues with the native announcements the live-region can be removed.\n */\n\nexport function useAnnouncement(_a) {\n  var announceSelected = _a.announceSelected,\n      highlightedOption = _a.highlightedOption,\n      getParent = _a.getParent,\n      selectedAriaLabel = _a.selectedAriaLabel,\n      renderHighlightedAriaLive = _a.renderHighlightedAriaLive;\n  var prevAnnouncedGroup = useRef(undefined); // Record previously announced group with a delay to account for possible re-renders of the hook.\n\n  useEffect(function () {\n    if (highlightedOption) {\n      var frameId_1 = requestAnimationFrame(function () {\n        prevAnnouncedGroup.current = getParent(highlightedOption);\n      });\n      return function () {\n        return cancelAnimationFrame(frameId_1);\n      };\n    }\n  });\n\n  if (!highlightedOption) {\n    return '';\n  }\n\n  var option = highlightedOption.option;\n  var parent = getParent(highlightedOption); // Only announce parent group if it wasn't announced with previous option.\n\n  var group = parent && parent !== prevAnnouncedGroup.current ? parent : undefined; // Use custom renderer if provided.\n\n  if (renderHighlightedAriaLive) {\n    return renderHighlightedAriaLive(option, group);\n  } // Use default renderer with selected ARIA label if defined and relevant.\n\n\n  var selectedPrefix = announceSelected && selectedAriaLabel ? selectedAriaLabel : '';\n  var defaultDescription = defaultOptionDescription(option, group);\n  return [selectedPrefix, defaultDescription].filter(Boolean).join(' ');\n}","map":null,"metadata":{},"sourceType":"module"}