{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';\nimport { Transition } from '../../internal/components/transition';\nimport { useObservedElement } from '../utils/use-observed-element';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\n\nfunction SplitPanel(_a) {\n  var children = _a.children;\n\n  var _b = useContext(AppLayoutContext),\n      handleSplitPanelClick = _b.handleSplitPanelClick,\n      handleSplitPanelPreferencesChange = _b.handleSplitPanelPreferencesChange,\n      handleSplitPanelResize = _b.handleSplitPanelResize,\n      isMobile = _b.isMobile,\n      isSplitPanelForcedPosition = _b.isSplitPanelForcedPosition,\n      isSplitPanelOpen = _b.isSplitPanelOpen,\n      setSplitPanelReportedSize = _b.setSplitPanelReportedSize,\n      splitPanelPosition = _b.splitPanelPosition,\n      splitPanelSize = _b.splitPanelSize,\n      headerHeight = _b.headerHeight,\n      footerHeight = _b.footerHeight;\n\n  var _c = useState(undefined),\n      openButtonAriaLabel = _c[0],\n      setOpenButtonAriaLabel = _c[1];\n\n  var _d = useState(),\n      splitPanelLastInteraction = _d[0],\n      setSplitPanelLastInteraction = _d[1];\n\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction(isSplitPanelOpen ? {\n      type: 'open'\n    } : {\n      type: 'close'\n    });\n  }, [isSplitPanelOpen]);\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction({\n      type: 'position'\n    });\n  }, [splitPanelPosition]);\n  var splitPanelRef = useRef(null);\n  var splitPanelHeaderRef = useRef(null);\n  var context = {\n    bottomOffset: 0,\n    getMaxHeight: function getMaxHeight() {\n      var availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight; // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    getMaxWidth: function getMaxWidth() {\n      return document.documentElement.clientWidth;\n    },\n    getHeader: function getHeader() {\n      return splitPanelHeaderRef.current;\n    },\n    isForcedPosition: isSplitPanelForcedPosition,\n    isMobile: isMobile,\n    isOpen: isSplitPanelOpen,\n    isRefresh: true,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    splitPanelRef: splitPanelRef,\n    splitPanelHeaderRef: splitPanelHeaderRef,\n    topOffset: 0,\n    openButtonAriaLabel: openButtonAriaLabel,\n    setOpenButtonAriaLabel: setOpenButtonAriaLabel,\n    lastInteraction: splitPanelLastInteraction\n  };\n  return React.createElement(SplitPanelContext.Provider, {\n    value: __assign({}, context)\n  }, children);\n}\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the the presence and state of the Navigation and Tools components.\n */\n\n\nfunction SplitPanelBottom() {\n  var _a = useContext(AppLayoutContext),\n      disableBodyScroll = _a.disableBodyScroll,\n      isNavigationOpen = _a.isNavigationOpen,\n      isSplitPanelOpen = _a.isSplitPanelOpen,\n      isToolsOpen = _a.isToolsOpen,\n      splitPanel = _a.splitPanel,\n      splitPanelReportedSize = _a.splitPanelReportedSize;\n\n  var _b = useContext(SplitPanelContext),\n      splitPanelPosition = _b.position,\n      getHeader = _b.getHeader;\n\n  var headerHeight = useObservedElement(getHeader);\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return React.createElement(Transition, {\n    \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, function (state, transitionEventsRef) {\n    var _a, _b;\n\n    return React.createElement(\"section\", {\n      className: clsx(styles['split-panel-bottom'], styles[\"position-\".concat(splitPanelPosition)], (_a = {}, _a[styles.animating] = state === 'entering', _a[styles['disable-body-scroll']] = disableBodyScroll, _a[styles['is-navigation-open']] = isNavigationOpen, _a[styles['is-split-panel-open']] = isSplitPanelOpen, _a[styles['is-tools-open']] = isToolsOpen, _a)),\n      ref: transitionEventsRef,\n      style: (_b = {}, _b[customCssProps.splitPanelReportedSize] = \"\".concat(splitPanelReportedSize, \"px\"), _b[customCssProps.splitPanelReportedHeaderSize] = \"\".concat(headerHeight, \"px\"), _b)\n    }, React.createElement(SplitPanel, null), splitPanelPosition === 'bottom' && splitPanel);\n  });\n}\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\n\n\nfunction SplitPanelSide() {\n  var _a = useContext(AppLayoutContext),\n      isSplitPanelOpen = _a.isSplitPanelOpen,\n      splitPanel = _a.splitPanel,\n      splitPanelMaxWidth = _a.splitPanelMaxWidth,\n      splitPanelMinWidth = _a.splitPanelMinWidth,\n      splitPanelReportedSize = _a.splitPanelReportedSize;\n\n  var splitPanelPosition = useContext(SplitPanelContext).position;\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return React.createElement(Transition, {\n    \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, function (state, transitionEventsRef) {\n    var _a, _b;\n\n    return React.createElement(\"section\", {\n      \"aria-hidden\": !isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false,\n      className: clsx(styles['split-panel-side'], styles[\"position-\".concat(splitPanelPosition)], (_a = {}, _a[styles.animating] = state === 'entering', _a[styles['is-split-panel-open']] = isSplitPanelOpen, _a)),\n      ref: transitionEventsRef,\n      style: (_b = {}, _b[customCssProps.splitPanelMaxWidth] = \"\".concat(splitPanelMaxWidth, \"px\"), _b[customCssProps.splitPanelMinWidth] = \"\".concat(splitPanelMinWidth, \"px\"), _b[customCssProps.splitPanelReportedHeaderSize] = \"\".concat(splitPanelReportedSize, \"px\"), _b)\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, splitPanelPosition === 'side' && splitPanel));\n  });\n}\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\n\n\nexport function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {\n  var splitPanelPosition = 'bottom';\n\n  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === 'side') {\n    splitPanelPosition = 'side';\n  }\n\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\nexport default SplitPanel;","map":null,"metadata":{},"sourceType":"module"}