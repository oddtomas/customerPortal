{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var isoToDisplay = function isoToDisplay(value) {\n  return value.replace(/-/g, '/');\n};\nexport var displayToIso = function displayToIso(value) {\n  return value.replace(/\\//g, '-');\n};\nexport var daysInMonth = function daysInMonth(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n};\n\nvar padLeftZeros = function padLeftZeros(value, length) {\n  while (value.length < length) {\n    value = \"0\".concat(value);\n  }\n\n  return value;\n};\n\nexport function parseDate(value, strict) {\n  if (strict === void 0) {\n    strict = false;\n  }\n\n  var _a = value.split('-'),\n      year = _a[0],\n      month = _a[1],\n      day = _a[2];\n\n  var y = Number(year);\n  var m = Number(month);\n  var d = Number(day);\n\n  if (strict) {\n    if (isNaN(y) || isNaN(m) || isNaN(d)) {\n      return null;\n    }\n  }\n\n  return new Date(y, (m || 1) - 1, d || 1);\n} // we cannot use Date.toISOString because it produces GMT time where the date can be different than local\n\nexport var formatDate = function formatDate(value) {\n  var year = value.getFullYear();\n  var month = padLeftZeros(\"\".concat(value.getMonth() + 1), 2);\n  var date = padLeftZeros(\"\".concat(value.getDate()), 2);\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(date);\n};\nexport var formatTime = function formatTime(value) {\n  var hours = padLeftZeros(\"\".concat(value.getHours()), 2);\n  var minutes = padLeftZeros(\"\".concat(value.getMinutes()), 2);\n  var seconds = padLeftZeros(\"\".concat(value.getSeconds()), 2);\n  return \"\".concat(hours, \":\").concat(minutes, \":\").concat(seconds);\n};\nexport function formatISOStringWithoutTimezone(dateString, timeString) {\n  return \"\".concat(dateString, \"T\").concat(timeString);\n} // reuse date instances, to allow shallow equality checking\n\nvar memoCache = {};\nexport var memoizedDate = function memoizedDate(key, date) {\n  var parsed = date && date.length >= 4 && parseDate(date);\n\n  if (!(memoCache[key] && parsed && memoCache[key].getTime() === parsed.getTime())) {\n    memoCache[key] = parsed;\n  }\n\n  return memoCache[key];\n};","map":null,"metadata":{},"sourceType":"module"}