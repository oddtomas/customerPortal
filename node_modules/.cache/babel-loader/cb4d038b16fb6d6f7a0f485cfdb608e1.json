{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useCollection } from '@cloudscape-design/collection-hooks';\nimport { InternalButton } from '../../button/internal';\nimport InternalHeader from '../../header/internal';\nimport InternalPagination from '../../pagination/internal';\nimport InternalTable from '../../table/internal';\nimport InternalTextFilter from '../../text-filter/internal';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { EmptyState } from './empty-state';\nexport function getSharedI18Strings(i18nStrings) {\n  return {\n    filteringCounterText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCounterText,\n    labelRefresh: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelRefresh,\n    labelsPagination: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsPagination,\n    noMatchTitle: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringNoMatches,\n    noMatchSubtitle: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCantFindMatch,\n    clearFilterButtonText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearFilterButtonText\n  };\n}\nexport function BasicS3Table(_a) {\n  var _b;\n\n  var forwardFocusRef = _a.forwardFocusRef,\n      columnDefinitions = _a.columnDefinitions,\n      fetchData = _a.fetchData,\n      trackBy = _a.trackBy,\n      _c = _a.i18nStrings,\n      i18nStrings = _c === void 0 ? {} : _c,\n      isVisualRefresh = _a.isVisualRefresh,\n      visibleColumns = _a.visibleColumns,\n      isItemDisabled = _a.isItemDisabled,\n      onSelect = _a.onSelect;\n\n  var _d = useState(false),\n      loading = _d[0],\n      setLoading = _d[1];\n\n  var _e = useState([]),\n      allItems = _e[0],\n      setAllItems = _e[1];\n\n  var textFilterRef = useRef(null);\n  var onSelectLatest = useStableEventHandler(onSelect);\n\n  function loadData() {\n    setLoading(true);\n    fetchData().then(function (items) {\n      setAllItems(items);\n      setLoading(false);\n    })[\"catch\"](function () {\n      // error handling should happen on the customer side, outside of this component\n      setLoading(false);\n    });\n  }\n\n  useEffect(function () {\n    loadData(); // Data loading is only happening on initial render, or via refresh button\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useForwardFocus(forwardFocusRef, textFilterRef);\n\n  var _f = useCollection(allItems, {\n    selection: {\n      trackBy: trackBy\n    },\n    filtering: {\n      empty: i18nStrings.emptyText,\n      noMatch: React.createElement(EmptyState, {\n        title: i18nStrings.noMatchTitle,\n        subtitle: i18nStrings.noMatchSubtitle,\n        action: React.createElement(InternalButton, {\n          onClick: function onClick() {\n            return actions.setFiltering('');\n          }\n        }, i18nStrings.clearFilterButtonText)\n      })\n    },\n    pagination: {},\n    sorting: {}\n  }),\n      items = _f.items,\n      filteredItemsCount = _f.filteredItemsCount,\n      collectionProps = _f.collectionProps,\n      filterProps = _f.filterProps,\n      paginationProps = _f.paginationProps,\n      actions = _f.actions;\n\n  var selectedItem = (_b = collectionProps.selectedItems) === null || _b === void 0 ? void 0 : _b[0]; // selectedItem can change internally inside the hook after pagination or filtering\n  // useEffect will capture all possible changes\n\n  useEffect(function () {\n    onSelectLatest(selectedItem);\n  }, [selectedItem, onSelectLatest]);\n  return React.createElement(InternalTable, __assign({\n    variant: \"embedded\"\n  }, collectionProps, {\n    header: React.createElement(InternalHeader, {\n      variant: isVisualRefresh ? 'h3' : 'h2',\n      actions: React.createElement(InternalButton, {\n        iconName: \"refresh\",\n        ariaLabel: i18nStrings.labelRefresh,\n        onClick: loadData\n      }),\n      counter: selectedItem ? \"(1/\".concat(allItems.length, \")\") : \"(\".concat(allItems.length, \")\")\n    }, i18nStrings.header),\n    trackBy: trackBy,\n    filter: React.createElement(InternalTextFilter, __assign({}, filterProps, {\n      ref: textFilterRef,\n      filteringAriaLabel: i18nStrings.filteringAriaLabel,\n      filteringPlaceholder: i18nStrings.filteringPlaceholder,\n      countText: i18nStrings.filteringCounterText ? i18nStrings.filteringCounterText(filteredItemsCount) : ''\n    })),\n    pagination: React.createElement(InternalPagination, __assign({}, paginationProps, {\n      ariaLabels: i18nStrings.labelsPagination\n    })),\n    selectionType: \"single\",\n    ariaLabels: i18nStrings.selectionLabels,\n    loading: loading,\n    loadingText: i18nStrings.loadingText,\n    items: items,\n    visibleColumns: visibleColumns,\n    isItemDisabled: isItemDisabled,\n    columnDefinitions: columnDefinitions\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}