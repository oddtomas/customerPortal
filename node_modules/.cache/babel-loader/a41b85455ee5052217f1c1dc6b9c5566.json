{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport clsx from 'clsx';\nimport InternalExpandableSection from '../expandable-section/internal';\nimport InternalIcon from '../icon/internal';\nimport styles from './styles.css.js';\nimport { isPlainLeftClick } from '../internal/events';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { hasActiveLink } from './util';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nexport function Header(_a) {\n  var _b, _c;\n\n  var definition = _a.definition,\n      activeHref = _a.activeHref,\n      fireFollow = _a.fireFollow;\n  checkSafeUrl('SideNavigation', definition.href);\n  var focusVisible = useFocusVisible();\n  var onClick = useCallback(function (event) {\n    if (isPlainLeftClick(event)) {\n      fireFollow(definition, event);\n    }\n  }, [fireFollow, definition]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: styles.header\n  }, React.createElement(\"a\", __assign({}, focusVisible, {\n    href: definition.href,\n    className: clsx(styles['header-link'], (_b = {}, _b[styles['header-link--has-logo']] = !!definition.logo, _b)),\n    \"aria-current\": definition.href === activeHref ? 'page' : undefined,\n    onClick: onClick\n  }), definition.logo && React.createElement(\"img\", __assign({\n    className: clsx(styles['header-logo'], (_c = {}, _c[styles['header-logo--stretched']] = !definition.text, _c))\n  }, definition.logo)), React.createElement(\"span\", {\n    className: styles['header-link-text']\n  }, definition.text))), React.createElement(Divider, {\n    variant: \"header\"\n  }));\n}\nexport function ItemList(_a) {\n  var variant = _a.variant,\n      items = _a.items,\n      activeHref = _a.activeHref,\n      fireChange = _a.fireChange,\n      fireFollow = _a.fireFollow;\n  return React.createElement(\"ul\", {\n    className: clsx(styles.list, styles[\"list-variant-\".concat(variant)])\n  }, items.map(function (item, i) {\n    return React.createElement(\"li\", {\n      key: i,\n      className: styles['list-item']\n    }, item.type === 'divider' && React.createElement(Divider, {\n      variant: \"default\"\n    }), item.type === 'link' && React.createElement(Link, {\n      definition: item,\n      activeHref: activeHref,\n      fireChange: fireChange,\n      fireFollow: fireFollow\n    }), item.type === 'section' && React.createElement(Section, {\n      definition: item,\n      activeHref: activeHref,\n      fireChange: fireChange,\n      fireFollow: fireFollow\n    }), item.type === 'link-group' && React.createElement(LinkGroup, {\n      definition: item,\n      activeHref: activeHref,\n      fireChange: fireChange,\n      fireFollow: fireFollow\n    }), item.type === 'expandable-link-group' && React.createElement(ExpandableLinkGroup, {\n      definition: item,\n      activeHref: activeHref,\n      fireChange: fireChange,\n      fireFollow: fireFollow\n    }));\n  }));\n}\n\nfunction Divider(_a) {\n  var _b = _a.variant,\n      variant = _b === void 0 ? 'default' : _b;\n  return React.createElement(\"hr\", {\n    className: clsx(styles.divider, styles[\"divider-\".concat(variant)])\n  });\n}\n\nfunction Link(_a) {\n  var _b;\n\n  var definition = _a.definition,\n      expanded = _a.expanded,\n      activeHref = _a.activeHref,\n      fireFollow = _a.fireFollow;\n  checkSafeUrl('SideNavigation', definition.href);\n  var isActive = definition.href === activeHref;\n  var focusVisible = useFocusVisible();\n  var onClick = useCallback(function (event) {\n    // Prevent the click event from toggling outer expandable sections.\n    event.stopPropagation();\n\n    if (isPlainLeftClick(event)) {\n      fireFollow(definition, event);\n    }\n  }, [fireFollow, definition]);\n  return React.createElement(React.Fragment, null, React.createElement(\"a\", __assign({}, focusVisible, {\n    href: definition.href,\n    className: clsx(styles.link, (_b = {}, _b[styles['link-active']] = isActive, _b)),\n    target: definition.external ? '_blank' : undefined,\n    rel: definition.external ? 'noopener noreferrer' : undefined,\n    \"aria-expanded\": expanded,\n    \"aria-current\": definition.href === activeHref ? 'page' : undefined,\n    onClick: onClick\n  }), definition.text, definition.external && React.createElement(\"span\", {\n    \"aria-label\": definition.externalIconAriaLabel,\n    role: definition.externalIconAriaLabel ? 'img' : undefined\n  }, React.createElement(InternalIcon, {\n    name: \"external\",\n    className: styles['external-icon']\n  }))), definition.info && React.createElement(\"span\", {\n    className: styles.info\n  }, definition.info));\n}\n\nfunction Section(_a) {\n  var _b;\n\n  var definition = _a.definition,\n      activeHref = _a.activeHref,\n      fireFollow = _a.fireFollow,\n      fireChange = _a.fireChange;\n\n  var _c = useState((_b = definition.defaultExpanded) !== null && _b !== void 0 ? _b : true),\n      expanded = _c[0],\n      setExpanded = _c[1];\n\n  var onExpandedChange = useCallback(function (e) {\n    fireChange(definition, e.detail.expanded);\n    setExpanded(e.detail.expanded);\n  }, [definition, fireChange]);\n  useEffect(function () {\n    var _a;\n\n    setExpanded((_a = definition.defaultExpanded) !== null && _a !== void 0 ? _a : true);\n  }, [definition]);\n  return React.createElement(InternalExpandableSection, {\n    variant: \"footer\",\n    expanded: expanded,\n    onChange: onExpandedChange,\n    className: styles.section,\n    header: definition.text\n  }, React.createElement(ItemList, {\n    variant: \"section\",\n    items: definition.items,\n    fireFollow: fireFollow,\n    fireChange: fireChange,\n    activeHref: activeHref\n  }));\n}\n\nfunction LinkGroup(_a) {\n  var definition = _a.definition,\n      activeHref = _a.activeHref,\n      _fireFollow = _a.fireFollow,\n      fireChange = _a.fireChange;\n  checkSafeUrl('SideNavigation', definition.href);\n  return React.createElement(React.Fragment, null, React.createElement(Link, {\n    definition: {\n      type: 'link',\n      href: definition.href,\n      text: definition.text\n    },\n    fireFollow: function fireFollow(_, event) {\n      return _fireFollow(definition, event);\n    },\n    fireChange: fireChange,\n    activeHref: activeHref\n  }), React.createElement(ItemList, {\n    variant: \"link-group\",\n    items: definition.items,\n    fireFollow: _fireFollow,\n    fireChange: fireChange,\n    activeHref: activeHref\n  }));\n}\n\nfunction ExpandableLinkGroup(_a) {\n  var definition = _a.definition,\n      fireFollow = _a.fireFollow,\n      fireChange = _a.fireChange,\n      activeHref = _a.activeHref; // Check whether the definition contains an active link and memoize it to avoid\n  // rechecking every time.\n\n  var containsActiveLink = useMemo(function () {\n    return activeHref ? hasActiveLink(definition.items, activeHref) : false;\n  }, [activeHref, definition.items]);\n\n  var _b = useState(function () {\n    var _a;\n\n    return (_a = definition.defaultExpanded) !== null && _a !== void 0 ? _a : definition.href === activeHref || containsActiveLink;\n  }),\n      expanded = _b[0],\n      setExpanded = _b[1];\n\n  var _c = useState(),\n      userExpanded = _c[0],\n      setUserExpanded = _c[1]; // Reset user expansion status when the items property is updated.\n\n\n  useEffect(function () {\n    return setUserExpanded(undefined);\n  }, [definition]); // By default, the expandable section is open when there's an active link inside.\n\n  useEffect(function () {\n    setExpanded(definition.href === activeHref || containsActiveLink);\n  }, [definition.href, containsActiveLink, activeHref]); // If the definition object itself is updated, reset the expansion state to default.\n\n  useEffect(function () {\n    if (definition.defaultExpanded !== undefined) {\n      setExpanded(definition.defaultExpanded);\n    }\n  }, [definition]);\n  var onExpandedChange = useCallback(function (e) {\n    fireChange(definition, e.detail.expanded);\n    setUserExpanded(e.detail.expanded);\n  }, [definition, fireChange]);\n\n  var onHeaderFollow = function onHeaderFollow(_, event) {\n    fireFollow(definition, event);\n    setUserExpanded(true);\n\n    if (!expanded) {\n      fireChange(definition, true);\n    }\n  };\n\n  return React.createElement(InternalExpandableSection, {\n    className: styles['expandable-link-group'],\n    variant: \"navigation\",\n    expanded: userExpanded !== null && userExpanded !== void 0 ? userExpanded : expanded,\n    onChange: onExpandedChange,\n    header: React.createElement(Link, {\n      definition: {\n        type: 'link',\n        href: definition.href,\n        text: definition.text\n      },\n      expanded: userExpanded !== null && userExpanded !== void 0 ? userExpanded : expanded,\n      fireFollow: onHeaderFollow,\n      fireChange: fireChange,\n      activeHref: activeHref\n    })\n  }, React.createElement(ItemList, {\n    variant: \"expandable-link-group\",\n    items: definition.items,\n    fireFollow: fireFollow,\n    fireChange: fireChange,\n    activeHref: activeHref\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}