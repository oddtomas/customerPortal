{"ast":null,"code":"import { __spreadArray } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useEffect, useRef } from 'react';\n/**\n * Ponyfill for Array.prototype.findIndex.\n */\n\nexport function findIndex(array, condition) {\n  for (var i = 0; i < array.length; i++) {\n    if (condition(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction makeMemoizedArray(prev, next, isEqual) {\n  for (var i = 0; i < Math.max(prev.length, next.length); i++) {\n    // The next array is shorter, but all the items match.\n    if (i === next.length) {\n      return prev.slice(0, i);\n    } // The prev array is shorter, but all the items so far match.\n\n\n    if (i === prev.length) {\n      return __spreadArray(__spreadArray([], prev.slice(0, i), true), next.slice(i), true);\n    } // The item is not equal. Partition at this point.\n\n\n    if (!isEqual(prev[i], next[i])) {\n      return __spreadArray(__spreadArray(__spreadArray([], prev.slice(0, i), true), [next[i]], false), makeMemoizedArray(prev.slice(i + 1), next.slice(i + 1), isEqual), true);\n    }\n  } // All the references match. Return the old array.\n\n\n  return prev;\n}\n\nexport function useMemoizedArray(array, isEqual) {\n  var ref = useRef(array);\n  var updated = makeMemoizedArray(ref.current, array, isEqual);\n  useEffect(function () {\n    ref.current = updated;\n  }, [updated]);\n  return updated;\n}","map":null,"metadata":{},"sourceType":"module"}