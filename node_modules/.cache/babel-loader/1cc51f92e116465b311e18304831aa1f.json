{"ast":null,"code":"import { __spreadArray } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\nimport { useMergeRefs } from '../../hooks/use-merge-refs';\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { fireNonCancelableEvent } from '../../events';\nimport { calculatePosition } from './dropdown-fit-handler';\nimport { Transition } from '../transition';\nimport { useVisualRefresh } from '../../hooks/use-visual-mode';\nimport { usePortalModeClasses } from '../../hooks/use-portal-mode-classes';\nimport { DropdownContextProvider } from './context';\nimport { useMobile } from '../../hooks/use-mobile';\n\nvar DropdownContainer = function DropdownContainer(_a) {\n  var children = _a.children,\n      _b = _a.renderWithPortal,\n      renderWithPortal = _b === void 0 ? false : _b,\n      id = _a.id,\n      open = _a.open;\n\n  if (renderWithPortal) {\n    if (open) {\n      return createPortal(React.createElement(\"div\", {\n        id: id\n      }, children), document.body);\n    } else {\n      return null;\n    }\n  } else {\n    return React.createElement(React.Fragment, null, children);\n  }\n};\n\nvar TransitionContent = function TransitionContent(_a) {\n  var _b;\n\n  var state = _a.state,\n      transitionRef = _a.transitionRef,\n      dropdownClasses = _a.dropdownClasses,\n      stretchWidth = _a.stretchWidth,\n      interior = _a.interior,\n      hasContent = _a.hasContent,\n      isRefresh = _a.isRefresh,\n      dropdownRef = _a.dropdownRef,\n      verticalContainerRef = _a.verticalContainerRef,\n      expandToViewport = _a.expandToViewport,\n      header = _a.header,\n      children = _a.children,\n      footer = _a.footer,\n      position = _a.position,\n      open = _a.open,\n      onMouseDown = _a.onMouseDown;\n  var contentRef = useMergeRefs(dropdownRef, transitionRef);\n  return React.createElement(\"div\", {\n    className: clsx(styles.dropdown, dropdownClasses, (_b = {}, _b[styles.open] = open, _b[styles['with-limited-width']] = !stretchWidth, _b[styles['hide-upper-border']] = stretchWidth, _b[styles.interior] = interior, _b[styles['is-empty']] = !header && !hasContent, _b[styles.refresh] = isRefresh, _b[styles['use-portal']] = expandToViewport && !interior, _b)),\n    ref: contentRef,\n    \"data-open\": open,\n    \"data-animating\": state !== 'exited',\n    onMouseDown: onMouseDown\n  }, React.createElement(\"div\", {\n    className: clsx(styles['dropdown-content-wrapper'], isRefresh && styles.refresh)\n  }, React.createElement(\"div\", {\n    className: styles['ie11-wrapper']\n  }, React.createElement(\"div\", {\n    ref: verticalContainerRef,\n    className: styles['dropdown-content']\n  }, React.createElement(DropdownContextProvider, {\n    position: position\n  }, header, children, footer)))));\n};\n\nvar Dropdown = function Dropdown(_a) {\n  var children = _a.children,\n      trigger = _a.trigger,\n      open = _a.open,\n      onDropdownClose = _a.onDropdownClose,\n      onMouseDown = _a.onMouseDown,\n      header = _a.header,\n      footer = _a.footer,\n      dropdownId = _a.dropdownId,\n      _b = _a.stretchTriggerHeight,\n      stretchTriggerHeight = _b === void 0 ? false : _b,\n      _c = _a.stretchWidth,\n      stretchWidth = _c === void 0 ? true : _c,\n      _d = _a.stretchHeight,\n      stretchHeight = _d === void 0 ? false : _d,\n      _e = _a.stretchToTriggerWidth,\n      stretchToTriggerWidth = _e === void 0 ? true : _e,\n      _f = _a.expandToViewport,\n      expandToViewport = _f === void 0 ? false : _f,\n      _g = _a.preferCenter,\n      preferCenter = _g === void 0 ? false : _g,\n      _h = _a.interior,\n      interior = _h === void 0 ? false : _h,\n      minWidth = _a.minWidth,\n      _j = _a.hasContent,\n      hasContent = _j === void 0 ? true : _j,\n      _k = _a.scrollable,\n      scrollable = _k === void 0 ? true : _k;\n  var triggerRef = useRef(null);\n  var dropdownRef = useRef(null); // This container is only needed to apply max-height to. We can't move max-height to it's parent\n  // because of an IE11 issue with flexbox. https://github.com/philipwalton/flexbugs/issues/216\n\n  var verticalContainerRef = useRef(null); // To keep track of the initial position (drop up/down) which is kept the same during fixed repositioning\n\n  var fixedPosition = useRef(null);\n  var isRefresh = useVisualRefresh(triggerRef);\n  var dropdownClasses = usePortalModeClasses(triggerRef);\n\n  var _l = useState('bottom-right'),\n      position = _l[0],\n      setPosition = _l[1];\n\n  var isMobile = useMobile();\n\n  var setDropdownPosition = function setDropdownPosition(position, triggerBox, target, verticalContainer) {\n    var entireWidth = !interior && stretchWidth;\n\n    if (!stretchWidth) {\n      // 1px offset for dropdowns where the dropdown itself needs a border, rather than on the items\n      verticalContainer.style.maxHeight = \"\".concat(parseInt(position.height) + 1, \"px\");\n    } else {\n      verticalContainer.style.maxHeight = position.height;\n    }\n\n    if (entireWidth && !expandToViewport) {\n      if (stretchToTriggerWidth) {\n        target.classList.add(styles['occupy-entire-width']);\n      }\n    } else {\n      target.style.width = position.width;\n    } // Using styles for main dropdown to adjust its position as preferred alternative\n\n\n    if (position.dropUp && !interior) {\n      target.classList.add(styles['dropdown-drop-up']);\n\n      if (!expandToViewport) {\n        target.style.bottom = '100%';\n      }\n    } else {\n      target.classList.remove(styles['dropdown-drop-up']);\n    }\n\n    target.classList.add(position.dropLeft ? styles['dropdown-drop-left'] : styles['dropdown-drop-right']);\n\n    if (position.left && position.left !== 'auto') {\n      target.style.left = position.left;\n    } // Position normal overflow dropdowns with fixed positioning relative to viewport\n\n\n    if (expandToViewport && !interior) {\n      target.style.position = 'fixed';\n\n      if (position.dropUp) {\n        target.style.bottom = \"calc(100% - \".concat(triggerBox.top, \"px)\");\n      } else {\n        target.style.top = \"\".concat(triggerBox.bottom, \"px\");\n      }\n\n      if (position.dropLeft) {\n        target.style.left = \"calc(\".concat(triggerBox.right, \"px - \").concat(position.width, \")\");\n      } else {\n        target.style.left = \"\".concat(triggerBox.left, \"px\");\n      } // Keep track of the initial dropdown position and direction.\n      // Dropdown direction doesn't need to change as the user scrolls, just needs to stay attached to the trigger.\n\n\n      fixedPosition.current = position;\n      return;\n    } // For an interior dropdown (the fly out) we need exact values for positioning\n    // and classes are not enough\n    // usage of relative position is impossible due to overwrite of overflow-x\n\n\n    if (interior && isInteriorPosition(position)) {\n      if (position.dropUp) {\n        target.style.bottom = position.bottom;\n      } else {\n        target.style.top = position.top;\n      }\n\n      target.style.left = position.left;\n    }\n\n    if (position.dropUp && position.dropLeft) {\n      setPosition('top-left');\n    } else if (position.dropUp) {\n      setPosition('top-right');\n    } else if (position.dropLeft) {\n      setPosition('bottom-left');\n    } else {\n      setPosition('bottom-right');\n    }\n  };\n\n  useLayoutEffect(function () {\n    var onDropdownOpen = function onDropdownOpen() {\n      if (open && dropdownRef.current && triggerRef.current && verticalContainerRef.current) {\n        // calculate scroll width only for dropdowns that has a scrollbar and ignore it for date picker components\n        if (scrollable) {\n          dropdownRef.current.classList.add(styles.nowrap);\n        }\n\n        setDropdownPosition.apply(void 0, __spreadArray(__spreadArray([], calculatePosition(dropdownRef.current, triggerRef.current, verticalContainerRef.current, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth), false), [dropdownRef.current, verticalContainerRef.current], false));\n\n        if (scrollable) {\n          dropdownRef.current.classList.remove(styles.nowrap);\n        }\n      }\n    };\n\n    onDropdownOpen();\n\n    if (open) {\n      // window may scroll when dropdown opens, for example when soft keyboard shows up\n      window.addEventListener('scroll', onDropdownOpen); // only listen to window scroll within very short time after the dropdown opens\n      // do not want to interfere dropdown position on scroll afterwards\n\n      var timeoutId_1 = setTimeout(function () {\n        window.removeEventListener('scroll', onDropdownOpen);\n      }, 500);\n      return function () {\n        clearTimeout(timeoutId_1);\n        window.removeEventListener('scroll', onDropdownOpen);\n      };\n    } // See AWSUI-13040\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [open, dropdownRef, triggerRef, verticalContainerRef, interior, stretchWidth, isMobile]); // subscribe to outside click\n\n  useEffect(function () {\n    if (!open) {\n      return;\n    }\n\n    var clickListener = function clickListener(e) {\n      var _a;\n\n      if (!((_a = dropdownRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {\n        fireNonCancelableEvent(onDropdownClose);\n      }\n    };\n    /*\n     * This small delay allows the event that opened the dropdown to\n     * finish bubbling, so that it is not immediately captured here.\n     */\n\n\n    var timeout = setTimeout(function () {\n      window.addEventListener('click', clickListener);\n    }, 0);\n    return function () {\n      clearTimeout(timeout);\n      window.removeEventListener('click', clickListener);\n    };\n  }, [open, onDropdownClose]); // sync dropdown position on scroll and resize\n\n  useLayoutEffect(function () {\n    if (!expandToViewport || !open) {\n      return;\n    }\n\n    var updateDropdownPosition = function updateDropdownPosition() {\n      if (triggerRef.current && dropdownRef.current && verticalContainerRef.current) {\n        var triggerRect = triggerRef.current.getBoundingClientRect();\n        var target = dropdownRef.current;\n\n        if (fixedPosition.current) {\n          if (fixedPosition.current.dropUp) {\n            dropdownRef.current.style.bottom = \"calc(100% - \".concat(triggerRect.top, \"px)\");\n          } else {\n            target.style.top = \"\".concat(triggerRect.bottom, \"px\");\n          }\n\n          if (fixedPosition.current.dropLeft) {\n            target.style.left = \"calc(\".concat(triggerRect.right, \"px - \").concat(fixedPosition.current.width, \")\");\n          } else {\n            target.style.left = \"\".concat(triggerRect.left, \"px\");\n          }\n        }\n      }\n    };\n\n    updateDropdownPosition();\n    window.addEventListener('scroll', updateDropdownPosition, true);\n    window.addEventListener('resize', updateDropdownPosition, true);\n    return function () {\n      window.removeEventListener('scroll', updateDropdownPosition, true);\n      window.removeEventListener('resize', updateDropdownPosition, true);\n    };\n  }, [open, expandToViewport]);\n  return React.createElement(\"div\", {\n    className: clsx(styles.root, interior && styles.interior, stretchTriggerHeight && styles['stretch-trigger-height'])\n  }, React.createElement(\"div\", {\n    className: clsx(stretchTriggerHeight && styles['stretch-trigger-height']),\n    ref: triggerRef\n  }, trigger), React.createElement(DropdownContainer, {\n    renderWithPortal: expandToViewport && !interior,\n    id: dropdownId,\n    open: open\n  }, React.createElement(Transition, {\n    \"in\": open !== null && open !== void 0 ? open : false,\n    exit: false\n  }, function (state, ref) {\n    return React.createElement(TransitionContent, {\n      state: state,\n      transitionRef: ref,\n      dropdownClasses: dropdownClasses,\n      open: open,\n      stretchWidth: stretchWidth,\n      interior: interior,\n      header: header,\n      hasContent: hasContent,\n      expandToViewport: expandToViewport,\n      footer: footer,\n      onMouseDown: onMouseDown,\n      isRefresh: isRefresh,\n      dropdownRef: dropdownRef,\n      verticalContainerRef: verticalContainerRef,\n      position: position\n    }, children);\n  })));\n};\n\nvar isInteriorPosition = function isInteriorPosition(position) {\n  return position.bottom !== undefined;\n};\n\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}