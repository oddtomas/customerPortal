{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { makeCancellable, PromiseCancelledSignal } from '../../internal/utils/promises';\nimport { extractBucketName, validate } from './validation';\nexport function useVersionsFetch(fetchVersions) {\n  var _a = useState(false),\n      loading = _a[0],\n      setLoading = _a[1];\n\n  var _b = useState(''),\n      lastFetchedValue = _b[0],\n      setLastFetched = _b[1];\n\n  var _c = useState([]),\n      versions = _c[0],\n      setVersions = _c[1];\n\n  var loadVersions = function loadVersions(uri) {\n    if (uri === lastFetchedValue) {\n      return;\n    }\n\n    setLastFetched(uri);\n    var errorCode = validate(uri);\n\n    var _a = extractBucketName(uri),\n        bucketName = _a[0],\n        prefix = _a[1];\n\n    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === '/') {\n      return;\n    }\n\n    setLoading(true);\n    var result = makeCancellable(fetchVersions(bucketName, prefix));\n    result.promise.then(function (versions) {\n      setLoading(false);\n      setVersions(versions.map(function (version) {\n        return {\n          value: version.VersionId,\n          label: version.LastModified\n        };\n      }));\n    }, function (err) {\n      if (!(err instanceof PromiseCancelledSignal)) {\n        setLoading(false);\n      }\n    });\n    return result;\n  };\n\n  return {\n    loading: loading,\n    versions: versions,\n    resetVersions: function resetVersions() {\n      return setVersions([]);\n    },\n    // this function is a dependency of useEffect\n    loadVersions: useStableEventHandler(loadVersions)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}