{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { useUniqueId } from '../../hooks/use-unique-id';\nimport { KeyCode } from '../../keycode';\nimport LiveRegion from '../live-region/index';\nimport ApplicationController from './application-controller';\nimport FocusOutline from './focus-outline';\nimport focusSvgElement from '../../utils/focus-svg-element';\nvar DEFAULT_PLOT_FOCUS_OFFSET = 3;\nvar DEFAULT_ELEMENT_FOCUS_OFFSET = 3;\n/**\n  An extension for the SVG to be used for charts. It includes a controller element to\n  handle the focus and keyboard interactions in a way that is supported by screen readers.\n\n  The application mimics the aria-activedescendant behavior which is unsupported by Safari. The\n  activeElementRef is the pointer to the secondary-focus element and activeElementKey denotes when\n  the focus transition was made.\n\n  Alternatively, ariaLiveRegion can be used to make announcements.\n*/\n\nexport default forwardRef(ChartPlot);\n\nfunction ChartPlot(_a, ref) {\n  var _b;\n\n  var width = _a.width,\n      height = _a.height,\n      transform = _a.transform,\n      offsetTop = _a.offsetTop,\n      offsetBottom = _a.offsetBottom,\n      offsetLeft = _a.offsetLeft,\n      offsetRight = _a.offsetRight,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaRoleDescription = _a.ariaRoleDescription,\n      ariaDescription = _a.ariaDescription,\n      ariaDescribedby = _a.ariaDescribedby,\n      activeElementKey = _a.activeElementKey,\n      activeElementRef = _a.activeElementRef,\n      ariaLiveRegion = _a.ariaLiveRegion,\n      isClickable = _a.isClickable,\n      isPrecise = _a.isPrecise,\n      children = _a.children,\n      onMouseDown = _a.onMouseDown,\n      onKeyDown = _a.onKeyDown,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      _c = _a.focusOffset,\n      focusOffset = _c === void 0 ? DEFAULT_PLOT_FOCUS_OFFSET : _c,\n      _d = _a.activeElementFocusOffset,\n      activeElementFocusOffset = _d === void 0 ? DEFAULT_ELEMENT_FOCUS_OFFSET : _d,\n      restProps = __rest(_a, [\"width\", \"height\", \"transform\", \"offsetTop\", \"offsetBottom\", \"offsetLeft\", \"offsetRight\", \"ariaLabel\", \"ariaLabelledby\", \"ariaRoleDescription\", \"ariaDescription\", \"ariaDescribedby\", \"activeElementKey\", \"activeElementRef\", \"ariaLiveRegion\", \"isClickable\", \"isPrecise\", \"children\", \"onMouseDown\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"focusOffset\", \"activeElementFocusOffset\"]);\n\n  var svgRef = useRef(null);\n  var applicationRef = useRef(null);\n  var plotClickedRef = useRef(false);\n\n  var _e = useState(false),\n      isPlotFocused = _e[0],\n      setPlotFocused = _e[1];\n\n  var _f = useState(false),\n      isApplicationFocused = _f[0],\n      setApplicationFocused = _f[1];\n\n  var internalDescriptionId = useUniqueId('awsui-chart-plot__description');\n  var ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(' ');\n  useImperativeHandle(ref, function () {\n    return {\n      svg: svgRef.current,\n      focusPlot: function focusPlot() {\n        return focusSvgElement(svgRef.current);\n      },\n      focusApplication: function focusApplication() {\n        return applicationRef.current.focus();\n      }\n    };\n  });\n\n  var onPlotMouseDown = function onPlotMouseDown(event) {\n    onMouseDown && onMouseDown(event); // Record the click was made for the application focus handler.\n\n    plotClickedRef.current = true;\n  };\n\n  var onPlotFocus = function onPlotFocus(event) {\n    if (event.target === svgRef.current && !plotClickedRef.current) {\n      setPlotFocused(true);\n    } // The click should focus the underling application bypassing the svg.\n    else if (plotClickedRef.current) {\n      applicationRef.current.focus();\n    }\n  };\n\n  var onPlotBlur = function onPlotBlur(event) {\n    if (event.target === svgRef.current) {\n      setPlotFocused(false);\n    }\n  }; // Once one of the expected keys is pressed the focus is delegated to the application controller.\n\n\n  var onPlotKeyDown = function onPlotKeyDown(event) {\n    if (isPlotFocused) {\n      // Delegate the focus to the application if one of the expected keys was pressed.\n      var codes = [KeyCode.space, KeyCode.enter, KeyCode.up, KeyCode.left, KeyCode.right, KeyCode.down];\n\n      if (codes.indexOf(event.keyCode) !== -1) {\n        applicationRef.current.focus();\n      }\n    }\n  };\n\n  var onApplicationFocus = function onApplicationFocus(event) {\n    onFocus && onFocus(event, plotClickedRef.current ? 'mouse' : 'keyboard'); // \"Release\" the click reference to not affect the next call of this handler.\n\n    plotClickedRef.current = false;\n    setApplicationFocused(true);\n  };\n\n  var onApplicationBlur = function onApplicationBlur(event) {\n    onBlur && onBlur(event);\n    setApplicationFocused(false);\n  };\n\n  var onApplicationKeyDown = onKeyDown;\n  var plotFocusable = !isApplicationFocused;\n  var plotTabIndex = plotFocusable ? 0 : -1;\n  var plotAria = !isApplicationFocused ? {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescriptionId,\n    'aria-roledescription': ariaRoleDescription\n  } : {};\n  return React.createElement(React.Fragment, null, React.createElement(\"svg\", __assign({}, restProps, {\n    focusable: plotFocusable,\n    tabIndex: plotTabIndex,\n    role: \"application\",\n    \"aria-hidden\": \"false\"\n  }, plotAria, {\n    ref: svgRef,\n    width: width,\n    height: height,\n    style: {\n      marginTop: offsetTop,\n      marginBottom: offsetBottom,\n      marginLeft: offsetLeft,\n      marginRight: offsetRight\n    },\n    className: clsx(styles.root, (_b = {}, _b[styles.clickable] = isClickable, _b[styles.precise] = isPrecise, _b)),\n    onMouseDown: onPlotMouseDown,\n    onFocus: onPlotFocus,\n    onBlur: onPlotBlur,\n    onKeyDown: onPlotKeyDown\n  }), React.createElement(FocusOutline, {\n    elementRef: svgRef,\n    elementKey: isPlotFocused,\n    offset: focusOffset\n  }), React.createElement(\"g\", {\n    transform: transform,\n    role: \"group\"\n  }, React.createElement(ApplicationController, {\n    activeElementKey: activeElementKey || null,\n    activeElementRef: activeElementRef,\n    ref: applicationRef,\n    onFocus: onApplicationFocus,\n    onBlur: onApplicationBlur,\n    onKeyDown: onApplicationKeyDown\n  }), ariaDescription && plotFocusable && React.createElement(\"desc\", {\n    \"aria-hidden\": \"true\",\n    id: internalDescriptionId\n  }, ariaDescription), children, React.createElement(FocusOutline, {\n    elementRef: activeElementRef,\n    elementKey: isApplicationFocused && activeElementKey,\n    offset: activeElementFocusOffset\n  }))), React.createElement(LiveRegion, null, ariaLiveRegion));\n}","map":null,"metadata":{},"sourceType":"module"}