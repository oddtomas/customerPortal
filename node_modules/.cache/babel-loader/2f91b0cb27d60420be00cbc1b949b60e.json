{"ast":null,"code":"import { filter } from './filter.js';\nimport { propertyFilter } from './property-filter.js';\nimport { sort } from './sort.js';\nimport { getPagesCount, normalizePageIndex, paginate } from './paginate.js';\nexport function processItems(items, _a, _b) {\n  var filteringText = _a.filteringText,\n      sortingState = _a.sortingState,\n      currentPageIndex = _a.currentPageIndex,\n      propertyFilteringQuery = _a.propertyFilteringQuery;\n  var filtering = _b.filtering,\n      sorting = _b.sorting,\n      pagination = _b.pagination,\n      propertyFiltering = _b.propertyFiltering;\n  var result = items;\n  var pagesCount;\n  var actualPageIndex;\n  var filteredItemsCount;\n\n  if (propertyFiltering) {\n    result = propertyFilter(result, propertyFilteringQuery || {\n      tokens: [],\n      operation: 'and'\n    }, propertyFiltering);\n    filteredItemsCount = result.length;\n  }\n\n  if (filtering) {\n    result = filter(result, filteringText, filtering);\n    filteredItemsCount = result.length;\n  }\n\n  if (sorting) {\n    result = sort(result, sortingState);\n  }\n\n  if (pagination) {\n    pagesCount = getPagesCount(result, pagination.pageSize);\n    actualPageIndex = normalizePageIndex(currentPageIndex, pagesCount);\n    result = paginate(result, actualPageIndex, pagination.pageSize);\n  }\n\n  return {\n    items: result,\n    pagesCount: pagesCount,\n    filteredItemsCount: filteredItemsCount,\n    actualPageIndex: actualPageIndex\n  };\n}\nexport var getTrackableValue = function getTrackableValue(trackBy, item) {\n  if (!trackBy) {\n    return item;\n  }\n\n  if (typeof trackBy === 'function') {\n    return trackBy(item);\n  }\n\n  return item[trackBy];\n};\nexport var processSelectedItems = function processSelectedItems(items, selectedItems, trackBy) {\n  var selectedSet = new Set();\n  selectedItems.forEach(function (item) {\n    return selectedSet.add(getTrackableValue(trackBy, item));\n  });\n  return items.filter(function (item) {\n    return selectedSet.has(getTrackableValue(trackBy, item));\n  });\n};\nexport var itemsAreEqual = function itemsAreEqual(items1, items2, trackBy) {\n  if (items1.length !== items2.length) {\n    return false;\n  }\n\n  var set1 = new Set();\n  items1.forEach(function (item) {\n    return set1.add(getTrackableValue(trackBy, item));\n  });\n  return items2.every(function (item) {\n    return set1.has(getTrackableValue(trackBy, item));\n  });\n};","map":null,"metadata":{},"sourceType":"module"}