{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { THEME, PACKAGE_VERSION } from './environment';\nvar oneTimeMetrics = {};\n\nvar buildMetricHash = function buildMetricHash(_a) {\n  var source = _a.source,\n      action = _a.action;\n  return [\"src\".concat(source), \"action\".concat(action)].join('_');\n};\n\nvar getMajorVersion = function getMajorVersion(versionString) {\n  var majorVersionMatch = versionString.match(/^(\\d+\\.\\d+)/);\n  return majorVersionMatch ? majorVersionMatch[1] : '';\n};\n\nvar formatMajorVersionForMetricDetail = function formatMajorVersionForMetricDetail(version) {\n  return version.replace(/\\s/g, '');\n};\n\nvar formatVersionForMetricName = function formatVersionForMetricName(theme, version) {\n  return \"\".concat(theme.charAt(0)).concat(getMajorVersion(version).replace('.', ''));\n};\n\nvar buildMetricDetail = function buildMetricDetail(_a) {\n  var source = _a.source,\n      action = _a.action,\n      version = _a.version;\n  var metricOrigin = typeof AWSUI_METRIC_ORIGIN !== 'undefined' ? AWSUI_METRIC_ORIGIN : 'main';\n  var detailObject = {\n    o: metricOrigin,\n    s: source,\n    t: THEME,\n    a: action,\n    f: framework,\n    v: formatMajorVersionForMetricDetail(version)\n  };\n  return JSON.stringify(detailObject);\n};\n\nvar buildMetricName = function buildMetricName(_a) {\n  var source = _a.source,\n      version = _a.version;\n  return ['awsui', source, \"\".concat(formatVersionForMetricName(THEME, version))].join('_');\n};\n\nvar findAWSC = function findAWSC(currentWindow) {\n  try {\n    if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC) === 'object') {\n      return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC;\n    }\n\n    if (!currentWindow || currentWindow.parent === currentWindow) {\n      // When the window has no more parents, it references itself\n      return undefined;\n    }\n\n    return findAWSC(currentWindow.parent);\n  } catch (ex) {\n    // Most likely a cross-origin access error\n    return undefined;\n  }\n}; // react is the default framework we're logging, for angular we need to set it explicitly\n\n\nvar framework = 'react';\n\nfunction setFramework(fwk) {\n  framework = fwk;\n}\n\nexport var Metrics = {\n  initMetrics: function initMetrics(fwk) {\n    setFramework(fwk);\n  },\n\n  /**\n   * Calls Console Platform's client logging JS API with provided metric name, value, and detail.\n   * Does nothing if Console Platform client logging JS is not present in page.\n   */\n  sendMetric: function sendMetric(metricName, value, detail) {\n    if (!metricName || !/^[a-zA-Z0-9_-]{1,32}$/.test(metricName)) {\n      console.error(\"Invalid metric name: \".concat(metricName));\n      return;\n    }\n\n    if (detail && detail.length > 200) {\n      console.error(\"Detail for metric \".concat(metricName, \" is too long: \").concat(detail));\n      return;\n    }\n\n    var AWSC = findAWSC(window);\n\n    if (typeof AWSC === 'object' && typeof AWSC.Clog === 'object' && typeof AWSC.Clog.log === 'function') {\n      AWSC.Clog.log(metricName, value, detail);\n    }\n  },\n  sendMetricObject: function sendMetricObject(metric, value) {\n    this.sendMetric(buildMetricName(metric), value, buildMetricDetail(metric));\n  },\n  sendMetricObjectOnce: function sendMetricObjectOnce(metric, value) {\n    var metricHash = buildMetricHash(metric);\n\n    if (!oneTimeMetrics[metricHash]) {\n      this.sendMetricObject(metric, value);\n      oneTimeMetrics[metricHash] = true;\n    }\n  },\n\n  /*\n   * Calls Console Platform's client logging only the first time the provided metricName is used.\n   * Subsequent calls with the same metricName are ignored.\n   */\n  sendMetricOnce: function sendMetricOnce(metricName, value, detail) {\n    if (!oneTimeMetrics[metricName]) {\n      this.sendMetric(metricName, value, detail);\n      oneTimeMetrics[metricName] = true;\n    }\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was loaded. The component load event will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentLoaded: function logComponentLoaded() {\n    this.sendMetricObjectOnce({\n      source: 'components',\n      action: 'loaded',\n      version: PACKAGE_VERSION\n    }, 1);\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was used in the page.  A component will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentUsed: function logComponentUsed(componentName) {\n    this.sendMetricObjectOnce({\n      source: componentName,\n      action: 'used',\n      version: PACKAGE_VERSION\n    }, 1);\n  }\n};\nexport var MetricsTestHelper = {\n  resetOneTimeMetricsCache: function resetOneTimeMetricsCache() {\n    for (var prop in oneTimeMetrics) {\n      delete oneTimeMetrics[prop];\n    }\n  },\n  formatMajorVersionForMetricDetail: formatMajorVersionForMetricDetail,\n  formatVersionForMetricName: formatVersionForMetricName\n};","map":null,"metadata":{},"sourceType":"module"}