{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport styles from '../../styles.css.js';\nimport GridDay from './day';\nimport { isSameMonth, isAfter, isBefore, isSameDay, addWeeks, addDays } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport rotateDayIndexes from '../../../date-picker/calendar/utils/rotate-day-indexes';\nimport { renderDayName } from '../../../date-picker/calendar/utils/intl';\nimport clsx from 'clsx';\nexport function Grid(_a) {\n  var baseDate = _a.baseDate,\n      selectedStartDate = _a.selectedStartDate,\n      selectedEndDate = _a.selectedEndDate,\n      rangeStartDate = _a.rangeStartDate,\n      rangeEndDate = _a.rangeEndDate,\n      focusedDate = _a.focusedDate,\n      focusedDateRef = _a.focusedDateRef,\n      onSelectDate = _a.onSelectDate,\n      onGridKeyDownHandler = _a.onGridKeyDownHandler,\n      onFocusedDateChange = _a.onFocusedDateChange,\n      isDateEnabled = _a.isDateEnabled,\n      locale = _a.locale,\n      startOfWeek = _a.startOfWeek,\n      todayAriaLabel = _a.todayAriaLabel,\n      className = _a.className;\n  var baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime(); // `baseDateTime` is used as a more stable replacement for baseDate\n\n  var weeks = useMemo(function () {\n    return getCalendarMonth(baseDate, {\n      firstDayOfWeek: startOfWeek\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [baseDateTime, startOfWeek]);\n  return React.createElement(\"div\", {\n    className: clsx(styles.grid, className)\n  }, React.createElement(\"div\", {\n    className: styles['calendar-day-names']\n  }, rotateDayIndexes(startOfWeek).map(function (i) {\n    return React.createElement(\"div\", {\n      key: \"day-name-\".concat(i),\n      className: styles['calendar-day-name']\n    }, renderDayName(locale, i));\n  })), React.createElement(\"div\", {\n    className: styles['calendar-dates'],\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map(function (week, weekIndex) {\n    return React.createElement(\"div\", {\n      key: \"week-\".concat(weekIndex),\n      className: styles['calendar-week']\n    }, week.map(function (date, dateIndex) {\n      var isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n      var isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n      var isSelected = isStartDate || isEndDate;\n      var isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n      var isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n      var isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n      var dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n      var inRangeStartWeek = rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n      var inRangeEndWeek = rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n      var onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameDay(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;\n      return React.createElement(GridDay, {\n        key: \"date-\".concat(weekIndex, \"-\").concat(dateIndex),\n        locale: locale,\n        baseDate: baseDate,\n        isSelected: isSelected,\n        isStartDate: isStartDate,\n        isEndDate: isEndDate,\n        onlyOneSelected: onlyOneSelected,\n        isRangeStartDate: isRangeStartDate,\n        isRangeEndDate: isRangeEndDate,\n        date: date,\n        isFocusedDate: isFocused,\n        ref: isFocused ? focusedDateRef : undefined,\n        todayAriaLabel: todayAriaLabel,\n        onSelectDate: onSelectDate,\n        onFocusDate: onFocusedDateChange,\n        isInRange: dateIsInRange,\n        isDateEnabled: isDateEnabled,\n        isDateInFirstRow: weekIndex === 0,\n        isDateInFirstColumn: dateIndex === 0,\n        isDateInLastColumn: dateIndex === week.length - 1,\n        isDateInSelectionStartWeek: !!inRangeStartWeek,\n        isDateInSelectionEndWeek: !!inRangeEndWeek\n      });\n    }));\n  })));\n}\n\nfunction isInRange(date, dateOne, dateTwo) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n\n  var inRange = isAfter(date, dateOne) && isBefore(date, dateTwo) || isAfter(date, dateTwo) && isBefore(date, dateOne);\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}","map":null,"metadata":{},"sourceType":"module"}