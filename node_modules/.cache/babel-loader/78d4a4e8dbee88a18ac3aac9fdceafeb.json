{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../button/internal';\nimport InternalIcon from '../icon/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport VisualContext from '../internal/components/visual-context';\nimport styles from './styles.css.js';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar typeToIcon = {\n  error: 'status-negative',\n  warning: 'status-warning',\n  success: 'status-positive',\n  info: 'status-info'\n};\nexport default function InternalAlert(_a) {\n  var _b;\n\n  var type = _a.type,\n      _c = _a.visible,\n      visible = _c === void 0 ? true : _c,\n      dismissible = _a.dismissible,\n      dismissAriaLabel = _a.dismissAriaLabel,\n      children = _a.children,\n      header = _a.header,\n      buttonText = _a.buttonText,\n      action = _a.action,\n      onDismiss = _a.onDismiss,\n      onButtonClick = _a.onButtonClick,\n      _d = _a.__internalRootRef,\n      __internalRootRef = _d === void 0 ? null : _d,\n      rest = __rest(_a, [\"type\", \"visible\", \"dismissible\", \"dismissAriaLabel\", \"children\", \"header\", \"buttonText\", \"action\", \"onDismiss\", \"onButtonClick\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(rest);\n\n  var _e = useContainerBreakpoints(['xs']),\n      breakpoint = _e[0],\n      breakpointRef = _e[1];\n\n  var refObject = useRef(null);\n  var mergedRef = useMergeRefs(breakpointRef, refObject, __internalRootRef);\n  var isRefresh = useVisualRefresh(refObject);\n  var size = isRefresh ? 'normal' : header && children ? 'big' : 'normal';\n  var actionButton = action || React.createElement(InternalButton, {\n    className: styles['action-button'],\n    onClick: function onClick() {\n      return fireNonCancelableEvent(onButtonClick);\n    },\n    formAction: \"none\"\n  }, buttonText);\n  var hasAction = Boolean(action || buttonText);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    \"aria-hidden\": !visible,\n    className: clsx(styles.root, (_b = {}, _b[styles.hidden] = !visible, _b), baseProps.className, styles[\"breakpoint-\".concat(breakpoint)]),\n    ref: mergedRef\n  }), React.createElement(VisualContext, {\n    contextName: \"alert\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles.alert, styles[\"type-\".concat(type)])\n  }, React.createElement(\"div\", {\n    className: clsx(styles.icon, styles.text)\n  }, React.createElement(InternalIcon, {\n    name: typeToIcon[type],\n    size: size\n  })), React.createElement(\"div\", {\n    className: styles.body\n  }, React.createElement(\"div\", {\n    className: clsx(styles.message, styles.text)\n  }, header && React.createElement(\"div\", {\n    className: styles.header\n  }, header), React.createElement(\"div\", {\n    className: styles.content\n  }, children)), hasAction && React.createElement(\"div\", {\n    className: styles.action\n  }, actionButton)), dismissible && React.createElement(\"div\", {\n    className: styles.dismiss\n  }, React.createElement(InternalButton, {\n    className: styles['dismiss-button'],\n    variant: \"icon\",\n    iconName: \"close\",\n    formAction: \"none\",\n    ariaLabel: dismissAriaLabel,\n    onClick: function onClick() {\n      return fireNonCancelableEvent(onDismiss);\n    }\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}