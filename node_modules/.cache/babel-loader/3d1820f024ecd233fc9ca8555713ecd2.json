{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport OptionsList from '../../internal/components/options-list';\nimport { renderOptions } from '../utils/render-options';\nimport { useVirtual } from 'react-virtual';\nimport { useContainerQuery } from '../../internal/hooks/container-queries';\nimport styles from './styles.css.js';\n\nvar VirtualList = function VirtualList(props, ref) {\n  return props.menuProps.open ? React.createElement(VirtualListOpen, __assign({}, props, {\n    ref: ref\n  })) : React.createElement(VirtualListClosed, __assign({}, props, {\n    ref: ref\n  }));\n};\n\nvar VirtualListOpen = forwardRef(function (_a, ref) {\n  var menuProps = _a.menuProps,\n      getOptionProps = _a.getOptionProps,\n      filteredOptions = _a.filteredOptions,\n      filteringValue = _a.filteringValue,\n      isKeyboard = _a.isKeyboard,\n      checkboxes = _a.checkboxes,\n      hasDropdownStatus = _a.hasDropdownStatus,\n      listBottom = _a.listBottom,\n      useInteractiveGroups = _a.useInteractiveGroups,\n      screenReaderContent = _a.screenReaderContent; // update component, when it gets wider or narrower to reposition items\n\n  var _b = useContainerQuery(function (rect) {\n    return rect.width;\n  }, []),\n      width = _b[0],\n      menuMeasureRef = _b[1];\n\n  var menuRefObject = useRef(null);\n  var menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);\n\n  var _c = useVirtual({\n    size: filteredOptions.length,\n    parentRef: menuRefObject,\n    // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n    // when the height of any option could have changed:\n    // 1: because the component got resized (width property got updated)\n    // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    estimateSize: useCallback(function () {\n      return 31;\n    }, [width, filteringValue]),\n    overscan: 5\n  }),\n      virtualItems = _c.virtualItems,\n      totalSize = _c.totalSize,\n      scrollToIndex = _c.scrollToIndex;\n\n  useImperativeHandle(ref, function () {\n    return function (index) {\n      if (isKeyboard) {\n        scrollToIndex(index);\n      }\n    };\n  }, [isKeyboard, scrollToIndex]);\n  var finalOptions = renderOptions({\n    options: virtualItems.map(function (_a) {\n      var index = _a.index;\n      return filteredOptions[index];\n    }),\n    getOptionProps: getOptionProps,\n    filteringValue: filteringValue,\n    isKeyboard: isKeyboard,\n    checkboxes: checkboxes,\n    hasDropdownStatus: hasDropdownStatus,\n    virtualItems: virtualItems,\n    useInteractiveGroups: useInteractiveGroups,\n    screenReaderContent: screenReaderContent,\n    ariaSetsize: filteredOptions.length\n  });\n  return React.createElement(OptionsList, __assign({}, menuProps, {\n    ref: menuRef\n  }), React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    key: \"total-size\",\n    className: styles['layout-strut'],\n    style: {\n      height: totalSize\n    }\n  }), finalOptions, listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nvar VirtualListClosed = forwardRef(function (_a, ref) {\n  var menuProps = _a.menuProps,\n      listBottom = _a.listBottom;\n  useImperativeHandle(ref, function () {\n    return function () {};\n  }, []);\n  return React.createElement(OptionsList, __assign({}, menuProps, {\n    ref: menuProps.ref\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nexport default forwardRef(VirtualList);","map":null,"metadata":{},"sourceType":"module"}